// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListReportsQueryParamOrder - Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
type ListReportsQueryParamOrder string

const (
	ListReportsQueryParamOrderAsc  ListReportsQueryParamOrder = "ASC"
	ListReportsQueryParamOrderDesc ListReportsQueryParamOrder = "DESC"
)

func (e ListReportsQueryParamOrder) ToPointer() *ListReportsQueryParamOrder {
	return &e
}

func (e *ListReportsQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListReportsQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsQueryParamOrder: %v", v)
	}
}

// ListReportsQueryParamSort - Field of resource to sort by
type ListReportsQueryParamSort string

const (
	ListReportsQueryParamSortID        ListReportsQueryParamSort = "id"
	ListReportsQueryParamSortType      ListReportsQueryParamSort = "type"
	ListReportsQueryParamSortCreatedAt ListReportsQueryParamSort = "created_at"
)

func (e ListReportsQueryParamSort) ToPointer() *ListReportsQueryParamSort {
	return &e
}

func (e *ListReportsQueryParamSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "type":
		fallthrough
	case "created_at":
		*e = ListReportsQueryParamSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsQueryParamSort: %v", v)
	}
}

// ReportType - Report type
// * BUY_ORDER - Buy order
// * SELL_ORDER - Sell order
// * INCOME_DISTRIBUTION - Income distribution report
// * GENERAL_MEETING_NOTIFICATION - General meeting notification
// * INCOME_REINVESTMENT - Reinvestment billing report (accumulating funds)
// * FUND_COMMUNICATION - Generic fund communication
// * TAX_REFUND - Tax refund document (after tax optimization)
// * TAX_EXEMPTION_CREATION - Creation of exemption order ("Freistellungsauftrag")
// * CANCELLED_ORDER - Cancelled buy or sell order (not yet executed, user cancels or trading venue cancelled)
// * REVOKED_ORDER - Revoked buy or sell order ("Storno")
// * ACCOUNT_OPENING - Securities account opening
// * ACCOUNT_CLOSING - Securities account closure
// * DIRECT_DEBIT_MANDATE - Creation of SEPA direct debit mandate
// * ANNUAL_TAX_STATEMENT - Annual tax reporting
// * ANNUAL_ACCOUNT_STATEMENT - Annual account statement
// * ANNUAL_INCOME_STATEMENT - Annual tax income statement ("Ertr√§gnisaufstellung")
// * GENERIC_COMMUNICATION - Generic communication
// * BANK_ACCOUNT_CONNECTED - Connect reference bank account
// * AD_HOC_ACCOUNT_STATEMENT - Ad hoc account statement
// * EX_POST_COST - Ex-post cost report
type ReportType string

const (
	ReportTypeBuyOrder                   ReportType = "BUY_ORDER"
	ReportTypeSellOrder                  ReportType = "SELL_ORDER"
	ReportTypeIncomeDistribution         ReportType = "INCOME_DISTRIBUTION"
	ReportTypeGeneralMeetingNotification ReportType = "GENERAL_MEETING_NOTIFICATION"
	ReportTypeIncomeReinvestment         ReportType = "INCOME_REINVESTMENT"
	ReportTypeFundCommunication          ReportType = "FUND_COMMUNICATION"
	ReportTypeTaxRefund                  ReportType = "TAX_REFUND"
	ReportTypeTaxExemptionCreation       ReportType = "TAX_EXEMPTION_CREATION"
	ReportTypeCancelledOrder             ReportType = "CANCELLED_ORDER"
	ReportTypeRevokedOrder               ReportType = "REVOKED_ORDER"
	ReportTypeAccountOpening             ReportType = "ACCOUNT_OPENING"
	ReportTypeAccountClosing             ReportType = "ACCOUNT_CLOSING"
	ReportTypeDirectDebitMandate         ReportType = "DIRECT_DEBIT_MANDATE"
	ReportTypeAnnualTaxStatement         ReportType = "ANNUAL_TAX_STATEMENT"
	ReportTypeAnnualAccountStatement     ReportType = "ANNUAL_ACCOUNT_STATEMENT"
	ReportTypeAnnualIncomeStatement      ReportType = "ANNUAL_INCOME_STATEMENT"
	ReportTypeGenericCommunication       ReportType = "GENERIC_COMMUNICATION"
	ReportTypeBankAccountConnected       ReportType = "BANK_ACCOUNT_CONNECTED"
	ReportTypeAdHocAccountStatement      ReportType = "AD_HOC_ACCOUNT_STATEMENT"
	ReportTypeExPostCost                 ReportType = "EX_POST_COST"
)

func (e ReportType) ToPointer() *ReportType {
	return &e
}

func (e *ReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY_ORDER":
		fallthrough
	case "SELL_ORDER":
		fallthrough
	case "INCOME_DISTRIBUTION":
		fallthrough
	case "GENERAL_MEETING_NOTIFICATION":
		fallthrough
	case "INCOME_REINVESTMENT":
		fallthrough
	case "FUND_COMMUNICATION":
		fallthrough
	case "TAX_REFUND":
		fallthrough
	case "TAX_EXEMPTION_CREATION":
		fallthrough
	case "CANCELLED_ORDER":
		fallthrough
	case "REVOKED_ORDER":
		fallthrough
	case "ACCOUNT_OPENING":
		fallthrough
	case "ACCOUNT_CLOSING":
		fallthrough
	case "DIRECT_DEBIT_MANDATE":
		fallthrough
	case "ANNUAL_TAX_STATEMENT":
		fallthrough
	case "ANNUAL_ACCOUNT_STATEMENT":
		fallthrough
	case "ANNUAL_INCOME_STATEMENT":
		fallthrough
	case "GENERIC_COMMUNICATION":
		fallthrough
	case "BANK_ACCOUNT_CONNECTED":
		fallthrough
	case "AD_HOC_ACCOUNT_STATEMENT":
		fallthrough
	case "EX_POST_COST":
		*e = ReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportType: %v", v)
	}
}

type ListReportsRequest struct {
	EndDate *types.Date `queryParam:"style=form,explode=true,name=end_date"`
	// Filters the list to only include reports concerning specified instrument
	Instrument *string `queryParam:"style=form,explode=true,name=instrument"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *ListReportsQueryParamOrder `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Field of resource to sort by
	Sort      *ListReportsQueryParamSort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
	StartDate *types.Date                `queryParam:"style=form,explode=true,name=start_date"`
	// Filters the list to only show reports of a certain type (e.g. only buy order confirmations)
	Type *ReportType `queryParam:"style=form,explode=true,name=type"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (l ListReportsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListReportsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListReportsRequest) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ListReportsRequest) GetInstrument() *string {
	if o == nil {
		return nil
	}
	return o.Instrument
}

func (o *ListReportsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListReportsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListReportsRequest) GetOrder() *ListReportsQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListReportsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListReportsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListReportsRequest) GetSort() *ListReportsQueryParamSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListReportsRequest) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ListReportsRequest) GetType() *ReportType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListReportsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListReportsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *ListReportsRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListReportsAccount - Account information.
type ListReportsAccount struct {
	// Account unique identifier.
	ID *string `json:"id,omitempty"`
}

func (o *ListReportsAccount) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ListReportsReportData - Contents of the report.
type ListReportsReportData struct {
	// Account information.
	Account *ListReportsAccount `json:"account,omitempty"`
}

func (o *ListReportsReportData) GetAccount() *ListReportsAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

// ListReportsReportType - Report type
// * BUY_ORDER - Buy order
// * SELL_ORDER - Sell order
// * INCOME_DISTRIBUTION - Income distribution report
// * GENERAL_MEETING_NOTIFICATION - General meeting notification
// * INCOME_REINVESTMENT - Reinvestment billing report (accumulating funds)
// * FUND_COMMUNICATION - Generic fund communication
// * TAX_REFUND - Tax refund document (after tax optimization)
// * TAX_EXEMPTION_CREATION - Creation of exemption order ("Freistellungsauftrag")
// * CANCELLED_ORDER - Cancelled buy or sell order (not yet executed, user cancels or trading venue cancelled)
// * REVOKED_ORDER - Revoked buy or sell order ("Storno")
// * ACCOUNT_OPENING - Securities account opening
// * ACCOUNT_CLOSING - Securities account closure
// * DIRECT_DEBIT_MANDATE - Creation of SEPA direct debit mandate
// * ANNUAL_TAX_STATEMENT - Annual tax reporting
// * ANNUAL_ACCOUNT_STATEMENT - Annual account statement
// * ANNUAL_INCOME_STATEMENT - Annual tax income statement ("Ertr√§gnisaufstellung")
// * GENERIC_COMMUNICATION - Generic communication
// * BANK_ACCOUNT_CONNECTED - Connect reference bank account
// * AD_HOC_ACCOUNT_STATEMENT - Ad hoc account statement
// * EX_POST_COST - Ex-post cost report
type ListReportsReportType string

const (
	ListReportsReportTypeBuyOrder                   ListReportsReportType = "BUY_ORDER"
	ListReportsReportTypeSellOrder                  ListReportsReportType = "SELL_ORDER"
	ListReportsReportTypeIncomeDistribution         ListReportsReportType = "INCOME_DISTRIBUTION"
	ListReportsReportTypeGeneralMeetingNotification ListReportsReportType = "GENERAL_MEETING_NOTIFICATION"
	ListReportsReportTypeIncomeReinvestment         ListReportsReportType = "INCOME_REINVESTMENT"
	ListReportsReportTypeFundCommunication          ListReportsReportType = "FUND_COMMUNICATION"
	ListReportsReportTypeTaxRefund                  ListReportsReportType = "TAX_REFUND"
	ListReportsReportTypeTaxExemptionCreation       ListReportsReportType = "TAX_EXEMPTION_CREATION"
	ListReportsReportTypeCancelledOrder             ListReportsReportType = "CANCELLED_ORDER"
	ListReportsReportTypeRevokedOrder               ListReportsReportType = "REVOKED_ORDER"
	ListReportsReportTypeAccountOpening             ListReportsReportType = "ACCOUNT_OPENING"
	ListReportsReportTypeAccountClosing             ListReportsReportType = "ACCOUNT_CLOSING"
	ListReportsReportTypeDirectDebitMandate         ListReportsReportType = "DIRECT_DEBIT_MANDATE"
	ListReportsReportTypeAnnualTaxStatement         ListReportsReportType = "ANNUAL_TAX_STATEMENT"
	ListReportsReportTypeAnnualAccountStatement     ListReportsReportType = "ANNUAL_ACCOUNT_STATEMENT"
	ListReportsReportTypeAnnualIncomeStatement      ListReportsReportType = "ANNUAL_INCOME_STATEMENT"
	ListReportsReportTypeGenericCommunication       ListReportsReportType = "GENERIC_COMMUNICATION"
	ListReportsReportTypeBankAccountConnected       ListReportsReportType = "BANK_ACCOUNT_CONNECTED"
	ListReportsReportTypeAdHocAccountStatement      ListReportsReportType = "AD_HOC_ACCOUNT_STATEMENT"
	ListReportsReportTypeExPostCost                 ListReportsReportType = "EX_POST_COST"
)

func (e ListReportsReportType) ToPointer() *ListReportsReportType {
	return &e
}

func (e *ListReportsReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY_ORDER":
		fallthrough
	case "SELL_ORDER":
		fallthrough
	case "INCOME_DISTRIBUTION":
		fallthrough
	case "GENERAL_MEETING_NOTIFICATION":
		fallthrough
	case "INCOME_REINVESTMENT":
		fallthrough
	case "FUND_COMMUNICATION":
		fallthrough
	case "TAX_REFUND":
		fallthrough
	case "TAX_EXEMPTION_CREATION":
		fallthrough
	case "CANCELLED_ORDER":
		fallthrough
	case "REVOKED_ORDER":
		fallthrough
	case "ACCOUNT_OPENING":
		fallthrough
	case "ACCOUNT_CLOSING":
		fallthrough
	case "DIRECT_DEBIT_MANDATE":
		fallthrough
	case "ANNUAL_TAX_STATEMENT":
		fallthrough
	case "ANNUAL_ACCOUNT_STATEMENT":
		fallthrough
	case "ANNUAL_INCOME_STATEMENT":
		fallthrough
	case "GENERIC_COMMUNICATION":
		fallthrough
	case "BANK_ACCOUNT_CONNECTED":
		fallthrough
	case "AD_HOC_ACCOUNT_STATEMENT":
		fallthrough
	case "EX_POST_COST":
		*e = ListReportsReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsReportType: %v", v)
	}
}

type ListReportsReport struct {
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Contents of the report.
	Data *ListReportsReportData `json:"data,omitempty"`
	// Report unique identifier.
	ID                  string  `json:"id"`
	SubstitutedReportID *string `json:"substituted_report_id"`
	// Report type
	// * BUY_ORDER - Buy order
	// * SELL_ORDER - Sell order
	// * INCOME_DISTRIBUTION - Income distribution report
	// * GENERAL_MEETING_NOTIFICATION - General meeting notification
	// * INCOME_REINVESTMENT - Reinvestment billing report (accumulating funds)
	// * FUND_COMMUNICATION - Generic fund communication
	// * TAX_REFUND - Tax refund document (after tax optimization)
	// * TAX_EXEMPTION_CREATION - Creation of exemption order ("Freistellungsauftrag")
	// * CANCELLED_ORDER - Cancelled buy or sell order (not yet executed, user cancels or trading venue cancelled)
	// * REVOKED_ORDER - Revoked buy or sell order ("Storno")
	// * ACCOUNT_OPENING - Securities account opening
	// * ACCOUNT_CLOSING - Securities account closure
	// * DIRECT_DEBIT_MANDATE - Creation of SEPA direct debit mandate
	// * ANNUAL_TAX_STATEMENT - Annual tax reporting
	// * ANNUAL_ACCOUNT_STATEMENT - Annual account statement
	// * ANNUAL_INCOME_STATEMENT - Annual tax income statement ("Ertr√§gnisaufstellung")
	// * GENERIC_COMMUNICATION - Generic communication
	// * BANK_ACCOUNT_CONNECTED - Connect reference bank account
	// * AD_HOC_ACCOUNT_STATEMENT - Ad hoc account statement
	// * EX_POST_COST - Ex-post cost report
	Type ListReportsReportType `json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListReportsReport) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListReportsReport) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListReportsReport) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListReportsReport) GetData() *ListReportsReportData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *ListReportsReport) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListReportsReport) GetSubstitutedReportID() *string {
	if o == nil {
		return nil
	}
	return o.SubstitutedReportID
}

func (o *ListReportsReport) GetType() ListReportsReportType {
	if o == nil {
		return ListReportsReportType("")
	}
	return o.Type
}

func (o *ListReportsReport) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type ReportUnionType string

const (
	ReportUnionTypeListReportsReport ReportUnionType = "list_reports_Report"
)

type Report struct {
	ListReportsReport *ListReportsReport

	Type ReportUnionType
}

func CreateReportListReportsReport(listReportsReport ListReportsReport) Report {
	typ := ReportUnionTypeListReportsReport

	return Report{
		ListReportsReport: &listReportsReport,
		Type:              typ,
	}
}

func (u *Report) UnmarshalJSON(data []byte) error {

	listReportsReport := ListReportsReport{}
	if err := utils.UnmarshalJSON(data, &listReportsReport, "", true, true); err == nil {
		u.ListReportsReport = &listReportsReport
		u.Type = ReportUnionTypeListReportsReport
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Report) MarshalJSON() ([]byte, error) {
	if u.ListReportsReport != nil {
		return utils.MarshalJSON(u.ListReportsReport, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ListReportsOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListReportsOrder string

const (
	ListReportsOrderAsc  ListReportsOrder = "ASC"
	ListReportsOrderDesc ListReportsOrder = "DESC"
)

func (e ListReportsOrder) ToPointer() *ListReportsOrder {
	return &e
}

func (e *ListReportsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListReportsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsOrder: %v", v)
	}
}

type ListReportsMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order ListReportsOrder `json:"order"`
	// The field that the list is sorted by.
	Sort string `json:"sort"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListReportsMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListReportsMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListReportsMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListReportsMeta) GetOrder() ListReportsOrder {
	if o == nil {
		return ListReportsOrder("")
	}
	return o.Order
}

func (o *ListReportsMeta) GetSort() string {
	if o == nil {
		return ""
	}
	return o.Sort
}

func (o *ListReportsMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListReportsReportsListResponse - Reports list
type ListReportsReportsListResponse struct {
	Data []Report        `json:"data"`
	Meta ListReportsMeta `json:"meta"`
}

func (o *ListReportsReportsListResponse) GetData() []Report {
	if o == nil {
		return []Report{}
	}
	return o.Data
}

func (o *ListReportsReportsListResponse) GetMeta() ListReportsMeta {
	if o == nil {
		return ListReportsMeta{}
	}
	return o.Meta
}

type ListReportsResponse struct {
	// Reports list
	TwoHundredApplicationJSONReportsListResponse *ListReportsReportsListResponse
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListReportsResponse) GetTwoHundredApplicationJSONReportsListResponse() *ListReportsReportsListResponse {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONReportsListResponse
}

func (o *ListReportsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListReportsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListReportsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListReportsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
