// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListReportsOrder - Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
type ListReportsOrder string

const (
	ListReportsOrderAsc  ListReportsOrder = "ASC"
	ListReportsOrderDesc ListReportsOrder = "DESC"
)

func (e ListReportsOrder) ToPointer() *ListReportsOrder {
	return &e
}

func (e *ListReportsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListReportsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsOrder: %v", v)
	}
}

// ListReportsSort - Field of resource to sort by
type ListReportsSort string

const (
	ListReportsSortID        ListReportsSort = "id"
	ListReportsSortType      ListReportsSort = "type"
	ListReportsSortCreatedAt ListReportsSort = "created_at"
)

func (e ListReportsSort) ToPointer() *ListReportsSort {
	return &e
}

func (e *ListReportsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "type":
		fallthrough
	case "created_at":
		*e = ListReportsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsSort: %v", v)
	}
}

// ListReportsTypeReportType - Report type
// * BUY_ORDER - Buy order
// * SELL_ORDER - Sell order
// * INCOME_DISTRIBUTION - Income distribution report
// * GENERAL_MEETING_NOTIFICATION - General meeting notification
// * INCOME_REINVESTMENT - Reinvestment billing report (accumulating funds)
// * FUND_COMMUNICATION - Generic fund communication
// * TAX_REFUND - Tax refund document (after tax optimization)
// * TAX_EXEMPTION_CREATION - Creation of exemption order ("Freistellungsauftrag")
// * CANCELLED_ORDER - Cancelled buy or sell order (not yet executed, user cancels or trading venue cancelled)
// * REVOKED_ORDER - Revoked buy or sell order ("Storno")
// * ACCOUNT_OPENING - Securities account opening
// * ACCOUNT_CLOSING - Securities account closure
// * DIRECT_DEBIT_MANDATE - Creation of SEPA direct debit mandate
// * ANNUAL_TAX_STATEMENT - Annual tax reporting
// * ANNUAL_ACCOUNT_STATEMENT - Annual account statement
// * ANNUAL_INCOME_STATEMENT - Annual tax income statement ("Ertr√§gnisaufstellung")
// * GENERIC_COMMUNICATION - Generic communication
// * BANK_ACCOUNT_CONNECTED - Connect reference bank account
// * AD_HOC_ACCOUNT_STATEMENT - Ad hoc account statement
// * EX_POST_COST - Ex-post cost report
type ListReportsTypeReportType string

const (
	ListReportsTypeReportTypeBuyOrder                   ListReportsTypeReportType = "BUY_ORDER"
	ListReportsTypeReportTypeSellOrder                  ListReportsTypeReportType = "SELL_ORDER"
	ListReportsTypeReportTypeIncomeDistribution         ListReportsTypeReportType = "INCOME_DISTRIBUTION"
	ListReportsTypeReportTypeGeneralMeetingNotification ListReportsTypeReportType = "GENERAL_MEETING_NOTIFICATION"
	ListReportsTypeReportTypeIncomeReinvestment         ListReportsTypeReportType = "INCOME_REINVESTMENT"
	ListReportsTypeReportTypeFundCommunication          ListReportsTypeReportType = "FUND_COMMUNICATION"
	ListReportsTypeReportTypeTaxRefund                  ListReportsTypeReportType = "TAX_REFUND"
	ListReportsTypeReportTypeTaxExemptionCreation       ListReportsTypeReportType = "TAX_EXEMPTION_CREATION"
	ListReportsTypeReportTypeCancelledOrder             ListReportsTypeReportType = "CANCELLED_ORDER"
	ListReportsTypeReportTypeRevokedOrder               ListReportsTypeReportType = "REVOKED_ORDER"
	ListReportsTypeReportTypeAccountOpening             ListReportsTypeReportType = "ACCOUNT_OPENING"
	ListReportsTypeReportTypeAccountClosing             ListReportsTypeReportType = "ACCOUNT_CLOSING"
	ListReportsTypeReportTypeDirectDebitMandate         ListReportsTypeReportType = "DIRECT_DEBIT_MANDATE"
	ListReportsTypeReportTypeAnnualTaxStatement         ListReportsTypeReportType = "ANNUAL_TAX_STATEMENT"
	ListReportsTypeReportTypeAnnualAccountStatement     ListReportsTypeReportType = "ANNUAL_ACCOUNT_STATEMENT"
	ListReportsTypeReportTypeAnnualIncomeStatement      ListReportsTypeReportType = "ANNUAL_INCOME_STATEMENT"
	ListReportsTypeReportTypeGenericCommunication       ListReportsTypeReportType = "GENERIC_COMMUNICATION"
	ListReportsTypeReportTypeBankAccountConnected       ListReportsTypeReportType = "BANK_ACCOUNT_CONNECTED"
	ListReportsTypeReportTypeAdHocAccountStatement      ListReportsTypeReportType = "AD_HOC_ACCOUNT_STATEMENT"
	ListReportsTypeReportTypeExPostCost                 ListReportsTypeReportType = "EX_POST_COST"
)

func (e ListReportsTypeReportType) ToPointer() *ListReportsTypeReportType {
	return &e
}

func (e *ListReportsTypeReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY_ORDER":
		fallthrough
	case "SELL_ORDER":
		fallthrough
	case "INCOME_DISTRIBUTION":
		fallthrough
	case "GENERAL_MEETING_NOTIFICATION":
		fallthrough
	case "INCOME_REINVESTMENT":
		fallthrough
	case "FUND_COMMUNICATION":
		fallthrough
	case "TAX_REFUND":
		fallthrough
	case "TAX_EXEMPTION_CREATION":
		fallthrough
	case "CANCELLED_ORDER":
		fallthrough
	case "REVOKED_ORDER":
		fallthrough
	case "ACCOUNT_OPENING":
		fallthrough
	case "ACCOUNT_CLOSING":
		fallthrough
	case "DIRECT_DEBIT_MANDATE":
		fallthrough
	case "ANNUAL_TAX_STATEMENT":
		fallthrough
	case "ANNUAL_ACCOUNT_STATEMENT":
		fallthrough
	case "ANNUAL_INCOME_STATEMENT":
		fallthrough
	case "GENERIC_COMMUNICATION":
		fallthrough
	case "BANK_ACCOUNT_CONNECTED":
		fallthrough
	case "AD_HOC_ACCOUNT_STATEMENT":
		fallthrough
	case "EX_POST_COST":
		*e = ListReportsTypeReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsTypeReportType: %v", v)
	}
}

type ListReportsRequest struct {
	EndDate *types.Date `queryParam:"style=form,explode=true,name=end_date"`
	// Filters the list to only include reports concerning specified instrument
	Instrument *string `queryParam:"style=form,explode=true,name=instrument"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *ListReportsOrder `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Field of resource to sort by
	Sort      *ListReportsSort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
	StartDate *types.Date      `queryParam:"style=form,explode=true,name=start_date"`
	// Filters the list to only show reports of a certain type (e.g. only buy order confirmations)
	Type *ListReportsTypeReportType `queryParam:"style=form,explode=true,name=type"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (l ListReportsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListReportsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListReportsRequest) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ListReportsRequest) GetInstrument() *string {
	if o == nil {
		return nil
	}
	return o.Instrument
}

func (o *ListReportsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListReportsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListReportsRequest) GetOrder() *ListReportsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListReportsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListReportsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListReportsRequest) GetSort() *ListReportsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListReportsRequest) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ListReportsRequest) GetType() *ListReportsTypeReportType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListReportsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListReportsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *ListReportsRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListReportsReportsListResponseReportReportReportDataAccount - Account information.
type ListReportsReportsListResponseReportReportReportDataAccount struct {
	// Account unique identifier.
	ID *string `json:"id,omitempty"`
}

func (o *ListReportsReportsListResponseReportReportReportDataAccount) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ListReportsReportsListResponseReportReportReportData - Contents of the report.
type ListReportsReportsListResponseReportReportReportData struct {
	// Account information.
	Account *ListReportsReportsListResponseReportReportReportDataAccount `json:"account,omitempty"`
}

func (o *ListReportsReportsListResponseReportReportReportData) GetAccount() *ListReportsReportsListResponseReportReportReportDataAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

// ListReportsReportsListResponseReportReportReportType - Report type
// * BUY_ORDER - Buy order
// * SELL_ORDER - Sell order
// * INCOME_DISTRIBUTION - Income distribution report
// * GENERAL_MEETING_NOTIFICATION - General meeting notification
// * INCOME_REINVESTMENT - Reinvestment billing report (accumulating funds)
// * FUND_COMMUNICATION - Generic fund communication
// * TAX_REFUND - Tax refund document (after tax optimization)
// * TAX_EXEMPTION_CREATION - Creation of exemption order ("Freistellungsauftrag")
// * CANCELLED_ORDER - Cancelled buy or sell order (not yet executed, user cancels or trading venue cancelled)
// * REVOKED_ORDER - Revoked buy or sell order ("Storno")
// * ACCOUNT_OPENING - Securities account opening
// * ACCOUNT_CLOSING - Securities account closure
// * DIRECT_DEBIT_MANDATE - Creation of SEPA direct debit mandate
// * ANNUAL_TAX_STATEMENT - Annual tax reporting
// * ANNUAL_ACCOUNT_STATEMENT - Annual account statement
// * ANNUAL_INCOME_STATEMENT - Annual tax income statement ("Ertr√§gnisaufstellung")
// * GENERIC_COMMUNICATION - Generic communication
// * BANK_ACCOUNT_CONNECTED - Connect reference bank account
// * AD_HOC_ACCOUNT_STATEMENT - Ad hoc account statement
// * EX_POST_COST - Ex-post cost report
type ListReportsReportsListResponseReportReportReportType string

const (
	ListReportsReportsListResponseReportReportReportTypeBuyOrder                   ListReportsReportsListResponseReportReportReportType = "BUY_ORDER"
	ListReportsReportsListResponseReportReportReportTypeSellOrder                  ListReportsReportsListResponseReportReportReportType = "SELL_ORDER"
	ListReportsReportsListResponseReportReportReportTypeIncomeDistribution         ListReportsReportsListResponseReportReportReportType = "INCOME_DISTRIBUTION"
	ListReportsReportsListResponseReportReportReportTypeGeneralMeetingNotification ListReportsReportsListResponseReportReportReportType = "GENERAL_MEETING_NOTIFICATION"
	ListReportsReportsListResponseReportReportReportTypeIncomeReinvestment         ListReportsReportsListResponseReportReportReportType = "INCOME_REINVESTMENT"
	ListReportsReportsListResponseReportReportReportTypeFundCommunication          ListReportsReportsListResponseReportReportReportType = "FUND_COMMUNICATION"
	ListReportsReportsListResponseReportReportReportTypeTaxRefund                  ListReportsReportsListResponseReportReportReportType = "TAX_REFUND"
	ListReportsReportsListResponseReportReportReportTypeTaxExemptionCreation       ListReportsReportsListResponseReportReportReportType = "TAX_EXEMPTION_CREATION"
	ListReportsReportsListResponseReportReportReportTypeCancelledOrder             ListReportsReportsListResponseReportReportReportType = "CANCELLED_ORDER"
	ListReportsReportsListResponseReportReportReportTypeRevokedOrder               ListReportsReportsListResponseReportReportReportType = "REVOKED_ORDER"
	ListReportsReportsListResponseReportReportReportTypeAccountOpening             ListReportsReportsListResponseReportReportReportType = "ACCOUNT_OPENING"
	ListReportsReportsListResponseReportReportReportTypeAccountClosing             ListReportsReportsListResponseReportReportReportType = "ACCOUNT_CLOSING"
	ListReportsReportsListResponseReportReportReportTypeDirectDebitMandate         ListReportsReportsListResponseReportReportReportType = "DIRECT_DEBIT_MANDATE"
	ListReportsReportsListResponseReportReportReportTypeAnnualTaxStatement         ListReportsReportsListResponseReportReportReportType = "ANNUAL_TAX_STATEMENT"
	ListReportsReportsListResponseReportReportReportTypeAnnualAccountStatement     ListReportsReportsListResponseReportReportReportType = "ANNUAL_ACCOUNT_STATEMENT"
	ListReportsReportsListResponseReportReportReportTypeAnnualIncomeStatement      ListReportsReportsListResponseReportReportReportType = "ANNUAL_INCOME_STATEMENT"
	ListReportsReportsListResponseReportReportReportTypeGenericCommunication       ListReportsReportsListResponseReportReportReportType = "GENERIC_COMMUNICATION"
	ListReportsReportsListResponseReportReportReportTypeBankAccountConnected       ListReportsReportsListResponseReportReportReportType = "BANK_ACCOUNT_CONNECTED"
	ListReportsReportsListResponseReportReportReportTypeAdHocAccountStatement      ListReportsReportsListResponseReportReportReportType = "AD_HOC_ACCOUNT_STATEMENT"
	ListReportsReportsListResponseReportReportReportTypeExPostCost                 ListReportsReportsListResponseReportReportReportType = "EX_POST_COST"
)

func (e ListReportsReportsListResponseReportReportReportType) ToPointer() *ListReportsReportsListResponseReportReportReportType {
	return &e
}

func (e *ListReportsReportsListResponseReportReportReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY_ORDER":
		fallthrough
	case "SELL_ORDER":
		fallthrough
	case "INCOME_DISTRIBUTION":
		fallthrough
	case "GENERAL_MEETING_NOTIFICATION":
		fallthrough
	case "INCOME_REINVESTMENT":
		fallthrough
	case "FUND_COMMUNICATION":
		fallthrough
	case "TAX_REFUND":
		fallthrough
	case "TAX_EXEMPTION_CREATION":
		fallthrough
	case "CANCELLED_ORDER":
		fallthrough
	case "REVOKED_ORDER":
		fallthrough
	case "ACCOUNT_OPENING":
		fallthrough
	case "ACCOUNT_CLOSING":
		fallthrough
	case "DIRECT_DEBIT_MANDATE":
		fallthrough
	case "ANNUAL_TAX_STATEMENT":
		fallthrough
	case "ANNUAL_ACCOUNT_STATEMENT":
		fallthrough
	case "ANNUAL_INCOME_STATEMENT":
		fallthrough
	case "GENERIC_COMMUNICATION":
		fallthrough
	case "BANK_ACCOUNT_CONNECTED":
		fallthrough
	case "AD_HOC_ACCOUNT_STATEMENT":
		fallthrough
	case "EX_POST_COST":
		*e = ListReportsReportsListResponseReportReportReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsReportsListResponseReportReportReportType: %v", v)
	}
}

type ListReportsReportsListResponseReportReport struct {
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Contents of the report.
	Data *ListReportsReportsListResponseReportReportReportData `json:"data,omitempty"`
	// Report unique identifier.
	ID                  string  `json:"id"`
	SubstitutedReportID *string `json:"substituted_report_id"`
	// Report type
	// * BUY_ORDER - Buy order
	// * SELL_ORDER - Sell order
	// * INCOME_DISTRIBUTION - Income distribution report
	// * GENERAL_MEETING_NOTIFICATION - General meeting notification
	// * INCOME_REINVESTMENT - Reinvestment billing report (accumulating funds)
	// * FUND_COMMUNICATION - Generic fund communication
	// * TAX_REFUND - Tax refund document (after tax optimization)
	// * TAX_EXEMPTION_CREATION - Creation of exemption order ("Freistellungsauftrag")
	// * CANCELLED_ORDER - Cancelled buy or sell order (not yet executed, user cancels or trading venue cancelled)
	// * REVOKED_ORDER - Revoked buy or sell order ("Storno")
	// * ACCOUNT_OPENING - Securities account opening
	// * ACCOUNT_CLOSING - Securities account closure
	// * DIRECT_DEBIT_MANDATE - Creation of SEPA direct debit mandate
	// * ANNUAL_TAX_STATEMENT - Annual tax reporting
	// * ANNUAL_ACCOUNT_STATEMENT - Annual account statement
	// * ANNUAL_INCOME_STATEMENT - Annual tax income statement ("Ertr√§gnisaufstellung")
	// * GENERIC_COMMUNICATION - Generic communication
	// * BANK_ACCOUNT_CONNECTED - Connect reference bank account
	// * AD_HOC_ACCOUNT_STATEMENT - Ad hoc account statement
	// * EX_POST_COST - Ex-post cost report
	Type ListReportsReportsListResponseReportReportReportType `json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListReportsReportsListResponseReportReport) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListReportsReportsListResponseReportReport) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListReportsReportsListResponseReportReport) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListReportsReportsListResponseReportReport) GetData() *ListReportsReportsListResponseReportReportReportData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *ListReportsReportsListResponseReportReport) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListReportsReportsListResponseReportReport) GetSubstitutedReportID() *string {
	if o == nil {
		return nil
	}
	return o.SubstitutedReportID
}

func (o *ListReportsReportsListResponseReportReport) GetType() ListReportsReportsListResponseReportReportReportType {
	if o == nil {
		return ListReportsReportsListResponseReportReportReportType("")
	}
	return o.Type
}

func (o *ListReportsReportsListResponseReportReport) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type ListReportsReportsListResponseReportType string

const (
	ListReportsReportsListResponseReportTypeListReportsReportsListResponseReportReport ListReportsReportsListResponseReportType = "list_reports_Reports - List - Response_Report_Report"
)

type ListReportsReportsListResponseReport struct {
	ListReportsReportsListResponseReportReport *ListReportsReportsListResponseReportReport

	Type ListReportsReportsListResponseReportType
}

func CreateListReportsReportsListResponseReportListReportsReportsListResponseReportReport(listReportsReportsListResponseReportReport ListReportsReportsListResponseReportReport) ListReportsReportsListResponseReport {
	typ := ListReportsReportsListResponseReportTypeListReportsReportsListResponseReportReport

	return ListReportsReportsListResponseReport{
		ListReportsReportsListResponseReportReport: &listReportsReportsListResponseReportReport,
		Type: typ,
	}
}

func (u *ListReportsReportsListResponseReport) UnmarshalJSON(data []byte) error {

	listReportsReportsListResponseReportReport := new(ListReportsReportsListResponseReportReport)
	if err := utils.UnmarshalJSON(data, &listReportsReportsListResponseReportReport, "", true, true); err == nil {
		u.ListReportsReportsListResponseReportReport = listReportsReportsListResponseReportReport
		u.Type = ListReportsReportsListResponseReportTypeListReportsReportsListResponseReportReport
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ListReportsReportsListResponseReport) MarshalJSON() ([]byte, error) {
	if u.ListReportsReportsListResponseReportReport != nil {
		return utils.MarshalJSON(u.ListReportsReportsListResponseReportReport, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ListReportsReportsListResponseMetaOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListReportsReportsListResponseMetaOrder string

const (
	ListReportsReportsListResponseMetaOrderAsc  ListReportsReportsListResponseMetaOrder = "ASC"
	ListReportsReportsListResponseMetaOrderDesc ListReportsReportsListResponseMetaOrder = "DESC"
)

func (e ListReportsReportsListResponseMetaOrder) ToPointer() *ListReportsReportsListResponseMetaOrder {
	return &e
}

func (e *ListReportsReportsListResponseMetaOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListReportsReportsListResponseMetaOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReportsReportsListResponseMetaOrder: %v", v)
	}
}

type ListReportsReportsListResponseMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order ListReportsReportsListResponseMetaOrder `json:"order"`
	// The field that the list is sorted by.
	Sort string `json:"sort"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListReportsReportsListResponseMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListReportsReportsListResponseMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListReportsReportsListResponseMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListReportsReportsListResponseMeta) GetOrder() ListReportsReportsListResponseMetaOrder {
	if o == nil {
		return ListReportsReportsListResponseMetaOrder("")
	}
	return o.Order
}

func (o *ListReportsReportsListResponseMeta) GetSort() string {
	if o == nil {
		return ""
	}
	return o.Sort
}

func (o *ListReportsReportsListResponseMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListReportsReportsListResponse - Reports list
type ListReportsReportsListResponse struct {
	Data []ListReportsReportsListResponseReport `json:"data"`
	Meta ListReportsReportsListResponseMeta     `json:"meta"`
}

func (o *ListReportsReportsListResponse) GetData() []ListReportsReportsListResponseReport {
	if o == nil {
		return []ListReportsReportsListResponseReport{}
	}
	return o.Data
}

func (o *ListReportsReportsListResponse) GetMeta() ListReportsReportsListResponseMeta {
	if o == nil {
		return ListReportsReportsListResponseMeta{}
	}
	return o.Meta
}

type ListReportsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Reports list
	ReportsListResponse *ListReportsReportsListResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListReportsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListReportsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListReportsResponse) GetReportsListResponse() *ListReportsReportsListResponse {
	if o == nil {
		return nil
	}
	return o.ReportsListResponse
}

func (o *ListReportsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListReportsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
