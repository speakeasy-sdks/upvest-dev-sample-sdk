// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListCashWithdrawalsOrder - Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
type ListCashWithdrawalsOrder string

const (
	ListCashWithdrawalsOrderAsc  ListCashWithdrawalsOrder = "ASC"
	ListCashWithdrawalsOrderDesc ListCashWithdrawalsOrder = "DESC"
)

func (e ListCashWithdrawalsOrder) ToPointer() *ListCashWithdrawalsOrder {
	return &e
}

func (e *ListCashWithdrawalsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListCashWithdrawalsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashWithdrawalsOrder: %v", v)
	}
}

// ListCashWithdrawalsSort - Field of resource to sort by
type ListCashWithdrawalsSort string

const (
	ListCashWithdrawalsSortID        ListCashWithdrawalsSort = "id"
	ListCashWithdrawalsSortCreatedAt ListCashWithdrawalsSort = "created_at"
)

func (e ListCashWithdrawalsSort) ToPointer() *ListCashWithdrawalsSort {
	return &e
}

func (e *ListCashWithdrawalsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "created_at":
		*e = ListCashWithdrawalsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashWithdrawalsSort: %v", v)
	}
}

type ListCashWithdrawalsRequest struct {
	AccountGroupID string `pathParam:"style=simple,explode=false,name=account_group_id"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *ListCashWithdrawalsOrder `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Field of resource to sort by
	Sort *ListCashWithdrawalsSort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListCashWithdrawalsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCashWithdrawalsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCashWithdrawalsRequest) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *ListCashWithdrawalsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListCashWithdrawalsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListCashWithdrawalsRequest) GetOrder() *ListCashWithdrawalsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListCashWithdrawalsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListCashWithdrawalsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListCashWithdrawalsRequest) GetSort() *ListCashWithdrawalsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListCashWithdrawalsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListCashWithdrawalsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency string

const (
	ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrencyEur ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency = "EUR"
)

func (e ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency) ToPointer() *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency {
	return &e
}

func (e *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency: %v", v)
	}
}

// ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus - Status of the withdrawal
// * NEW - Withdrawal is created but not started processing.
// * PROCESSING - Withdrawal is in processing.
// * CONFIRMED - Withdrawal was successfully processed.
// * CANCELLED - Withdrawal was cancelled.
type ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus string

const (
	ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatusNew        ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus = "NEW"
	ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatusProcessing ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus = "PROCESSING"
	ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatusConfirmed  ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus = "CONFIRMED"
	ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatusCancelled  ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus = "CANCELLED"
)

func (e ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus) ToPointer() *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus {
	return &e
}

func (e *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "CANCELLED":
		*e = ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus: %v", v)
	}
}

type ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal struct {
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	Amount         string `json:"amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency `default:"EUR" json:"currency"`
	// Cash withdrawal unique identifier
	ID string `json:"id"`
	// Reference account unique identifier.
	ReferenceAccountID string `json:"reference_account_id"`
	// Payment reference the end user will see in their bank statement for the corresponding credit transfer booking (“Verwendungszweck”)
	RemittanceInformation string `json:"remittance_information"`
	// Status of the withdrawal
	// * NEW - Withdrawal is created but not started processing.
	// * PROCESSING - Withdrawal is in processing.
	// * CONFIRMED - Withdrawal was successfully processed.
	// * CANCELLED - Withdrawal was cancelled.
	Status *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus `json:"status,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetCurrency() *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetReferenceAccountID() string {
	if o == nil {
		return ""
	}
	return o.ReferenceAccountID
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetRemittanceInformation() string {
	if o == nil {
		return ""
	}
	return o.RemittanceInformation
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetStatus() *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawalStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListCashWithdrawalsWithdrawalsListResponseMetaOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListCashWithdrawalsWithdrawalsListResponseMetaOrder string

const (
	ListCashWithdrawalsWithdrawalsListResponseMetaOrderAsc  ListCashWithdrawalsWithdrawalsListResponseMetaOrder = "ASC"
	ListCashWithdrawalsWithdrawalsListResponseMetaOrderDesc ListCashWithdrawalsWithdrawalsListResponseMetaOrder = "DESC"
)

func (e ListCashWithdrawalsWithdrawalsListResponseMetaOrder) ToPointer() *ListCashWithdrawalsWithdrawalsListResponseMetaOrder {
	return &e
}

func (e *ListCashWithdrawalsWithdrawalsListResponseMetaOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListCashWithdrawalsWithdrawalsListResponseMetaOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashWithdrawalsWithdrawalsListResponseMetaOrder: %v", v)
	}
}

type ListCashWithdrawalsWithdrawalsListResponseMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListCashWithdrawalsWithdrawalsListResponseMetaOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListCashWithdrawalsWithdrawalsListResponseMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListCashWithdrawalsWithdrawalsListResponseMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListCashWithdrawalsWithdrawalsListResponseMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListCashWithdrawalsWithdrawalsListResponseMeta) GetOrder() *ListCashWithdrawalsWithdrawalsListResponseMetaOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListCashWithdrawalsWithdrawalsListResponseMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListCashWithdrawalsWithdrawalsListResponseMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListCashWithdrawalsWithdrawalsListResponse - Withdrawals list
type ListCashWithdrawalsWithdrawalsListResponse struct {
	Data []ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal `json:"data"`
	Meta ListCashWithdrawalsWithdrawalsListResponseMeta                 `json:"meta"`
}

func (o *ListCashWithdrawalsWithdrawalsListResponse) GetData() []ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal {
	if o == nil {
		return []ListCashWithdrawalsWithdrawalsListResponsePaymentsWithdrawal{}
	}
	return o.Data
}

func (o *ListCashWithdrawalsWithdrawalsListResponse) GetMeta() ListCashWithdrawalsWithdrawalsListResponseMeta {
	if o == nil {
		return ListCashWithdrawalsWithdrawalsListResponseMeta{}
	}
	return o.Meta
}

type ListCashWithdrawalsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Withdrawals list
	WithdrawalsListResponse *ListCashWithdrawalsWithdrawalsListResponse
}

func (o *ListCashWithdrawalsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListCashWithdrawalsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListCashWithdrawalsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListCashWithdrawalsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListCashWithdrawalsResponse) GetWithdrawalsListResponse() *ListCashWithdrawalsWithdrawalsListResponse {
	if o == nil {
		return nil
	}
	return o.WithdrawalsListResponse
}
