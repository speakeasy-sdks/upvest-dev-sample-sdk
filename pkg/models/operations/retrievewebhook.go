// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveWebhookRequest struct {
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	// Webhook identifier
	WebhookID string `pathParam:"style=simple,explode=false,name=webhook_id"`
}

func (r RetrieveWebhookRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveWebhookRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveWebhookRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveWebhookRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveWebhookRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveWebhookRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *RetrieveWebhookRequest) GetWebhookID() string {
	if o == nil {
		return ""
	}
	return o.WebhookID
}

// RetrieveWebhookConfig - Configuration of webhook packages collection.
type RetrieveWebhookConfig struct {
	// Maximum time of package collection.
	Delay *string `json:"delay,omitempty"`
	// Maximum package size (bytes)
	MaxPackageSize *int64 `json:"max_package_size,omitempty"`
}

func (o *RetrieveWebhookConfig) GetDelay() *string {
	if o == nil {
		return nil
	}
	return o.Delay
}

func (o *RetrieveWebhookConfig) GetMaxPackageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxPackageSize
}

type RetrieveWebhookType string

const (
	RetrieveWebhookTypeAll                      RetrieveWebhookType = "ALL"
	RetrieveWebhookTypeUser                     RetrieveWebhookType = "USER"
	RetrieveWebhookTypeUserCheck                RetrieveWebhookType = "USER_CHECK"
	RetrieveWebhookTypeOrder                    RetrieveWebhookType = "ORDER"
	RetrieveWebhookTypeOrderCancellation        RetrieveWebhookType = "ORDER_CANCELLATION"
	RetrieveWebhookTypeExecution                RetrieveWebhookType = "EXECUTION"
	RetrieveWebhookTypePosition                 RetrieveWebhookType = "POSITION"
	RetrieveWebhookTypeCashBalance              RetrieveWebhookType = "CASH_BALANCE"
	RetrieveWebhookTypeAccount                  RetrieveWebhookType = "ACCOUNT"
	RetrieveWebhookTypeAccountGroup             RetrieveWebhookType = "ACCOUNT_GROUP"
	RetrieveWebhookTypeReport                   RetrieveWebhookType = "REPORT"
	RetrieveWebhookTypeTreasuryReport           RetrieveWebhookType = "TREASURY_REPORT"
	RetrieveWebhookTypeDirectDebit              RetrieveWebhookType = "DIRECT_DEBIT"
	RetrieveWebhookTypeWithdrawal               RetrieveWebhookType = "WITHDRAWAL"
	RetrieveWebhookTypePortfolio                RetrieveWebhookType = "PORTFOLIO"
	RetrieveWebhookTypePortfolioAllocation      RetrieveWebhookType = "PORTFOLIO_ALLOCATION"
	RetrieveWebhookTypePortfolioOrder           RetrieveWebhookType = "PORTFOLIO_ORDER"
	RetrieveWebhookTypeCorporateAction          RetrieveWebhookType = "CORPORATE_ACTION"
	RetrieveWebhookTypeAccountValuation         RetrieveWebhookType = "ACCOUNT_VALUATION"
	RetrieveWebhookTypeIntradayAccountValuation RetrieveWebhookType = "INTRADAY_ACCOUNT_VALUATION"
	RetrieveWebhookTypeCashTransaction          RetrieveWebhookType = "CASH_TRANSACTION"
	RetrieveWebhookTypeSecurityTransaction      RetrieveWebhookType = "SECURITY_TRANSACTION"
	RetrieveWebhookTypeAccountLiquidation       RetrieveWebhookType = "ACCOUNT_LIQUIDATION"
	RetrieveWebhookTypeAccountReturns           RetrieveWebhookType = "ACCOUNT_RETURNS"
	RetrieveWebhookTypeVirtualCashIncrease      RetrieveWebhookType = "VIRTUAL_CASH_INCREASE"
	RetrieveWebhookTypeVirtualCashDecrease      RetrieveWebhookType = "VIRTUAL_CASH_DECREASE"
	RetrieveWebhookTypeFeeCollection            RetrieveWebhookType = "FEE_COLLECTION"
)

func (e RetrieveWebhookType) ToPointer() *RetrieveWebhookType {
	return &e
}

func (e *RetrieveWebhookType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "USER":
		fallthrough
	case "USER_CHECK":
		fallthrough
	case "ORDER":
		fallthrough
	case "ORDER_CANCELLATION":
		fallthrough
	case "EXECUTION":
		fallthrough
	case "POSITION":
		fallthrough
	case "CASH_BALANCE":
		fallthrough
	case "ACCOUNT":
		fallthrough
	case "ACCOUNT_GROUP":
		fallthrough
	case "REPORT":
		fallthrough
	case "TREASURY_REPORT":
		fallthrough
	case "DIRECT_DEBIT":
		fallthrough
	case "WITHDRAWAL":
		fallthrough
	case "PORTFOLIO":
		fallthrough
	case "PORTFOLIO_ALLOCATION":
		fallthrough
	case "PORTFOLIO_ORDER":
		fallthrough
	case "CORPORATE_ACTION":
		fallthrough
	case "ACCOUNT_VALUATION":
		fallthrough
	case "INTRADAY_ACCOUNT_VALUATION":
		fallthrough
	case "CASH_TRANSACTION":
		fallthrough
	case "SECURITY_TRANSACTION":
		fallthrough
	case "ACCOUNT_LIQUIDATION":
		fallthrough
	case "ACCOUNT_RETURNS":
		fallthrough
	case "VIRTUAL_CASH_INCREASE":
		fallthrough
	case "VIRTUAL_CASH_DECREASE":
		fallthrough
	case "FEE_COLLECTION":
		*e = RetrieveWebhookType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveWebhookType: %v", v)
	}
}

// RetrieveWebhookWebhook - Returns a webhook subscription object if a valid webhook subscription object ID was provided.
type RetrieveWebhookWebhook struct {
	// Configuration of webhook packages collection.
	Config RetrieveWebhookConfig `json:"config"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Enable/disable webhook.
	Enabled bool `json:"enabled"`
	// Webhook unique identifier.
	ID string `json:"id"`
	// Title of the webhook for use on tenant side.
	Title string `json:"title"`
	// What kind of events to be sent by the webhook.
	Type []RetrieveWebhookType `json:"type"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// The callback URL to be called by the webhook.
	URL string `json:"url"`
}

func (r RetrieveWebhookWebhook) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveWebhookWebhook) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveWebhookWebhook) GetConfig() RetrieveWebhookConfig {
	if o == nil {
		return RetrieveWebhookConfig{}
	}
	return o.Config
}

func (o *RetrieveWebhookWebhook) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveWebhookWebhook) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *RetrieveWebhookWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveWebhookWebhook) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *RetrieveWebhookWebhook) GetType() []RetrieveWebhookType {
	if o == nil {
		return []RetrieveWebhookType{}
	}
	return o.Type
}

func (o *RetrieveWebhookWebhook) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *RetrieveWebhookWebhook) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type RetrieveWebhookResponse struct {
	// Returns a webhook subscription object if a valid webhook subscription object ID was provided.
	TwoHundredApplicationJSONWebhook *RetrieveWebhookWebhook
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *RetrieveWebhookResponse) GetTwoHundredApplicationJSONWebhook() *RetrieveWebhookWebhook {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONWebhook
}

func (o *RetrieveWebhookResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveWebhookResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *RetrieveWebhookResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveWebhookResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
