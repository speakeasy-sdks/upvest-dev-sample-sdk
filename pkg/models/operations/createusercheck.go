// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequestInstrumentSuitability struct {
	// Did the user go through a suitability assessment and the outcome indicated suitability.
	Suitability bool `json:"suitability"`
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequestInstrumentSuitability) GetSuitability() bool {
	if o == nil {
		return false
	}
	return o.Suitability
}

// CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest - Instrument fit check is completed by the client providing the user's answers to the instrument appropriateness or suitability questionnaire.
type CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest struct {
	// Completion date and time of the instrument fit check.
	CheckConfirmedAt      time.Time                                                                                     `json:"check_confirmed_at"`
	InstrumentSuitability CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequestInstrumentSuitability `json:"instrument_suitability"`
	// The type of check must be INSTRUMENT_FIT.
	Type *string `default:"INSTRUMENT_FIT" json:"type"`
}

func (c CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest) GetInstrumentSuitability() CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequestInstrumentSuitability {
	if o == nil {
		return CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequestInstrumentSuitability{}
	}
	return o.InstrumentSuitability
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType - The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
// * UTILITY_BILL -
// * TELEPHONE_BILL -
// * INTERNET_BILL -
// * BANK_STATEMENT -
// * REGISTRATION_CERT -
// * RESIDENCE_PERMIT -
// * ID_CARD -
type CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType string

const (
	CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentTypeUtilityBill      CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType = "UTILITY_BILL"
	CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentTypeTelephoneBill    CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType = "TELEPHONE_BILL"
	CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentTypeInternetBill     CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType = "INTERNET_BILL"
	CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentTypeBankStatement    CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType = "BANK_STATEMENT"
	CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentTypeRegistrationCert CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType = "REGISTRATION_CERT"
	CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentTypeResidencePermit  CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType = "RESIDENCE_PERMIT"
	CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentTypeIDCard           CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType = "ID_CARD"
)

func (e CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType) ToPointer() *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType {
	return &e
}

func (e *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTILITY_BILL":
		fallthrough
	case "TELEPHONE_BILL":
		fallthrough
	case "INTERNET_BILL":
		fallthrough
	case "BANK_STATEMENT":
		fallthrough
	case "REGISTRATION_CERT":
		fallthrough
	case "RESIDENCE_PERMIT":
		fallthrough
	case "ID_CARD":
		*e = CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType: %v", v)
	}
}

// CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest - The PoR (Proof of residency) check is completed by the client sharing a valid PoR document, if not fulfilled by the KYC check.
type CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest struct {
	// Completion date and time of the PoR check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress `json:"confirmed_address"`
	// Download link for the PoR evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
	// * UTILITY_BILL -
	// * TELEPHONE_BILL -
	// * INTERNET_BILL -
	// * BANK_STATEMENT -
	// * REGISTRATION_CERT -
	// * RESIDENCE_PERMIT -
	// * ID_CARD -
	DocumentType CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType `json:"document_type"`
	// Issuance date in YYYY-MM-DD format.
	IssuanceDate types.Date `json:"issuance_date"`
	// The type of check must be POR.
	Type *string `default:"POR" json:"type"`
}

func (c CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest) GetConfirmedAddress() CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress {
	if o == nil {
		return CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestAddress{}
	}
	return o.ConfirmedAddress
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest) GetDocumentType() CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType {
	if o == nil {
		return CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequestDocumentType("")
	}
	return o.DocumentType
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType - The type of document used in the KYC process.
// * PASSPORT - Passport
// * ID_CARD - National Identification document
// * RESIDENCE_PERMIT - Residence Permit
type CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType string

const (
	CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentTypePassport        CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType = "PASSPORT"
	CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentTypeIDCard          CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType = "ID_CARD"
	CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentTypeResidencePermit CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType = "RESIDENCE_PERMIT"
)

func (e CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType) ToPointer() *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType {
	return &e
}

func (e *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		fallthrough
	case "RESIDENCE_PERMIT":
		*e = CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType: %v", v)
	}
}

// CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod - Method used for AML compliant KYC process
// * VIDEO_ID - Video identification
// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
type CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod string

const (
	CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethodVideoID      CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod = "VIDEO_ID"
	CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethodInPersonID   CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod = "IN_PERSON_ID"
	CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethodElectronicID CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod = "ELECTRONIC_ID"
)

func (e CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod) ToPointer() *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod {
	return &e
}

func (e *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIDEO_ID":
		fallthrough
	case "IN_PERSON_ID":
		fallthrough
	case "ELECTRONIC_ID":
		*e = CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod: %v", v)
	}
}

// CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest - The KYC (Know your customer) check is completed by the client sharing the valid and relevant KYC data for the user.
type CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest struct {
	// Completion date and time of the KYC check. Must not be older than 24 months.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress `json:"confirmed_address,omitempty"`
	// Download link for the KYC evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// Expiration date of the document used in KYC process in YYYY-MM-DD format.
	DocumentExpirationDate types.Date `json:"document_expiration_date"`
	// The type of document used in the KYC process.
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	// * RESIDENCE_PERMIT - Residence Permit
	DocumentType CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType `json:"document_type"`
	// Marks this check as a KYC refresh/update as opposed to an initial record.
	KycUpdate *bool `json:"kyc_update,omitempty"`
	// Method used for AML compliant KYC process
	// * VIDEO_ID - Video identification
	// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
	// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
	Method CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod `json:"method"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationality string `json:"nationality"`
	// Provider that was used to perform the KYC check.
	Provider string `json:"provider"`
	// The type of check must be “KYC”.
	Type *string `default:"KYC" json:"type"`
}

func (c CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetConfirmedAddress() *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestAddress {
	if o == nil {
		return nil
	}
	return o.ConfirmedAddress
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetDocumentExpirationDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DocumentExpirationDate
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetDocumentType() CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType {
	if o == nil {
		return CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestDocumentType("")
	}
	return o.DocumentType
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetKycUpdate() *bool {
	if o == nil {
		return nil
	}
	return o.KycUpdate
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetMethod() CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod {
	if o == nil {
		return CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequestMethod("")
	}
	return o.Method
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetNationality() string {
	if o == nil {
		return ""
	}
	return o.Nationality
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetProvider() string {
	if o == nil {
		return ""
	}
	return o.Provider
}

func (o *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type CreateUserCheckUserCheckCreateRequestType string

const (
	CreateUserCheckUserCheckCreateRequestTypeCreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest CreateUserCheckUserCheckCreateRequestType = "create_user_check_User Check - Create - Request_User Check - Know your customer - Create - Request"
	CreateUserCheckUserCheckCreateRequestTypeCreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest CreateUserCheckUserCheckCreateRequestType = "create_user_check_User Check - Create - Request_User Check - Proof of Residency - Create - Request"
	CreateUserCheckUserCheckCreateRequestTypeCreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest    CreateUserCheckUserCheckCreateRequestType = "create_user_check_User Check - Create - Request_User Check - Instrument fit - Create - Request"
)

type CreateUserCheckUserCheckCreateRequest struct {
	CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest *CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest
	CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest *CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest
	CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest    *CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest

	Type CreateUserCheckUserCheckCreateRequestType
}

func CreateCreateUserCheckUserCheckCreateRequestCreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest(createUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest) CreateUserCheckUserCheckCreateRequest {
	typ := CreateUserCheckUserCheckCreateRequestTypeCreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest

	return CreateUserCheckUserCheckCreateRequest{
		CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest: &createUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest,
		Type: typ,
	}
}

func CreateCreateUserCheckUserCheckCreateRequestCreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest(createUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest) CreateUserCheckUserCheckCreateRequest {
	typ := CreateUserCheckUserCheckCreateRequestTypeCreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest

	return CreateUserCheckUserCheckCreateRequest{
		CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest: &createUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest,
		Type: typ,
	}
}

func CreateCreateUserCheckUserCheckCreateRequestCreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest(createUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest) CreateUserCheckUserCheckCreateRequest {
	typ := CreateUserCheckUserCheckCreateRequestTypeCreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest

	return CreateUserCheckUserCheckCreateRequest{
		CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest: &createUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest,
		Type: typ,
	}
}

func (u *CreateUserCheckUserCheckCreateRequest) UnmarshalJSON(data []byte) error {

	createUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest := CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest{}
	if err := utils.UnmarshalJSON(data, &createUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest, "", true, true); err == nil {
		u.CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest = &createUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest
		u.Type = CreateUserCheckUserCheckCreateRequestTypeCreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest
		return nil
	}

	createUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest := CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest{}
	if err := utils.UnmarshalJSON(data, &createUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest, "", true, true); err == nil {
		u.CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest = &createUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest
		u.Type = CreateUserCheckUserCheckCreateRequestTypeCreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest
		return nil
	}

	createUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest := CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest{}
	if err := utils.UnmarshalJSON(data, &createUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest, "", true, true); err == nil {
		u.CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest = &createUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest
		u.Type = CreateUserCheckUserCheckCreateRequestTypeCreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserCheckUserCheckCreateRequest) MarshalJSON() ([]byte, error) {
	if u.CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest != nil {
		return utils.MarshalJSON(u.CreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest, "", true)
	}

	if u.CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest != nil {
		return utils.MarshalJSON(u.CreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest, "", true)
	}

	if u.CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest != nil {
		return utils.MarshalJSON(u.CreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateUserCheckRequest struct {
	RequestBody *CreateUserCheckUserCheckCreateRequest `request:"mediaType=application/json"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (c CreateUserCheckRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserCheckRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserCheckRequest) GetRequestBody() *CreateUserCheckUserCheckCreateRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateUserCheckRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *CreateUserCheckRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *CreateUserCheckRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *CreateUserCheckRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *CreateUserCheckRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// CreateUserCheckUserCheckCreateResponse - The request has been successfully accepted.
type CreateUserCheckUserCheckCreateResponse struct {
	// User Check unique identifier.
	ID string `json:"id"`
}

func (o *CreateUserCheckUserCheckCreateResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CreateUserCheckResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The request has been successfully accepted.
	UserCheckCreateResponse *CreateUserCheckUserCheckCreateResponse
}

func (o *CreateUserCheckResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateUserCheckResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateUserCheckResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateUserCheckResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateUserCheckResponse) GetUserCheckCreateResponse() *CreateUserCheckUserCheckCreateResponse {
	if o == nil {
		return nil
	}
	return o.UserCheckCreateResponse
}
