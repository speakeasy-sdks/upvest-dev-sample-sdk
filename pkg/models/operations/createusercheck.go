// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type CreateUserCheckSecurity struct {
	OauthClientCredentials string `security:"scheme,type=oauth2,name=Authorization"`
}

func (o *CreateUserCheckSecurity) GetOauthClientCredentials() string {
	if o == nil {
		return ""
	}
	return o.OauthClientCredentials
}

type InstrumentSuitability struct {
	// Did the user go through a suitability assessment and the outcome indicated suitability.
	Suitability bool `json:"suitability"`
}

func (o *InstrumentSuitability) GetSuitability() bool {
	if o == nil {
		return false
	}
	return o.Suitability
}

// UserCheckInstrumentFitCreateRequest - Instrument fit check is completed by the client providing the user's answers to the instrument appropriateness or suitability questionnaire.
type UserCheckInstrumentFitCreateRequest struct {
	// Completion date and time of the instrument fit check.
	CheckConfirmedAt      time.Time             `json:"check_confirmed_at"`
	InstrumentSuitability InstrumentSuitability `json:"instrument_suitability"`
	// The type of check must be INSTRUMENT_FIT.
	Type *string `default:"INSTRUMENT_FIT" json:"type"`
}

func (u UserCheckInstrumentFitCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserCheckInstrumentFitCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserCheckInstrumentFitCreateRequest) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *UserCheckInstrumentFitCreateRequest) GetInstrumentSuitability() InstrumentSuitability {
	if o == nil {
		return InstrumentSuitability{}
	}
	return o.InstrumentSuitability
}

func (o *UserCheckInstrumentFitCreateRequest) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateUserCheckUsersAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserCheckUsersAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserCheckUsersAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserCheckUsersAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserCheckUsersAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserCheckUsersAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserCheckUsersAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserCheckUsersAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// CreateUserCheckDocumentType - The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
// * UTILITY_BILL -
// * TELEPHONE_BILL -
// * INTERNET_BILL -
// * BANK_STATEMENT -
// * REGISTRATION_CERT -
// * RESIDENCE_PERMIT -
// * ID_CARD -
type CreateUserCheckDocumentType string

const (
	CreateUserCheckDocumentTypeUtilityBill      CreateUserCheckDocumentType = "UTILITY_BILL"
	CreateUserCheckDocumentTypeTelephoneBill    CreateUserCheckDocumentType = "TELEPHONE_BILL"
	CreateUserCheckDocumentTypeInternetBill     CreateUserCheckDocumentType = "INTERNET_BILL"
	CreateUserCheckDocumentTypeBankStatement    CreateUserCheckDocumentType = "BANK_STATEMENT"
	CreateUserCheckDocumentTypeRegistrationCert CreateUserCheckDocumentType = "REGISTRATION_CERT"
	CreateUserCheckDocumentTypeResidencePermit  CreateUserCheckDocumentType = "RESIDENCE_PERMIT"
	CreateUserCheckDocumentTypeIDCard           CreateUserCheckDocumentType = "ID_CARD"
)

func (e CreateUserCheckDocumentType) ToPointer() *CreateUserCheckDocumentType {
	return &e
}

func (e *CreateUserCheckDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTILITY_BILL":
		fallthrough
	case "TELEPHONE_BILL":
		fallthrough
	case "INTERNET_BILL":
		fallthrough
	case "BANK_STATEMENT":
		fallthrough
	case "REGISTRATION_CERT":
		fallthrough
	case "RESIDENCE_PERMIT":
		fallthrough
	case "ID_CARD":
		*e = CreateUserCheckDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserCheckDocumentType: %v", v)
	}
}

// UserCheckProofOfResidencyCreateRequest - The PoR (Proof of residency) check is completed by the client sharing a valid PoR document, if not fulfilled by the KYC check.
type UserCheckProofOfResidencyCreateRequest struct {
	// Completion date and time of the PoR check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress CreateUserCheckUsersAddress `json:"confirmed_address"`
	// Download link for the PoR evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
	// * UTILITY_BILL -
	// * TELEPHONE_BILL -
	// * INTERNET_BILL -
	// * BANK_STATEMENT -
	// * REGISTRATION_CERT -
	// * RESIDENCE_PERMIT -
	// * ID_CARD -
	DocumentType CreateUserCheckDocumentType `json:"document_type"`
	// Issuance date in YYYY-MM-DD format.
	IssuanceDate types.Date `json:"issuance_date"`
	// The type of check must be POR.
	Type *string `default:"POR" json:"type"`
}

func (u UserCheckProofOfResidencyCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserCheckProofOfResidencyCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserCheckProofOfResidencyCreateRequest) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *UserCheckProofOfResidencyCreateRequest) GetConfirmedAddress() CreateUserCheckUsersAddress {
	if o == nil {
		return CreateUserCheckUsersAddress{}
	}
	return o.ConfirmedAddress
}

func (o *UserCheckProofOfResidencyCreateRequest) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *UserCheckProofOfResidencyCreateRequest) GetDocumentType() CreateUserCheckDocumentType {
	if o == nil {
		return CreateUserCheckDocumentType("")
	}
	return o.DocumentType
}

func (o *UserCheckProofOfResidencyCreateRequest) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *UserCheckProofOfResidencyCreateRequest) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateUserCheckAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserCheckAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserCheckAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserCheckAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserCheckAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserCheckAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserCheckAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserCheckAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// DocumentType - The type of document used in the KYC process.
// * PASSPORT - Passport
// * ID_CARD - National Identification document
// * RESIDENCE_PERMIT - Residence Permit
type DocumentType string

const (
	DocumentTypePassport        DocumentType = "PASSPORT"
	DocumentTypeIDCard          DocumentType = "ID_CARD"
	DocumentTypeResidencePermit DocumentType = "RESIDENCE_PERMIT"
)

func (e DocumentType) ToPointer() *DocumentType {
	return &e
}

func (e *DocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		fallthrough
	case "RESIDENCE_PERMIT":
		*e = DocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentType: %v", v)
	}
}

// Method used for AML compliant KYC process
// * VIDEO_ID - Video identification
// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
type Method string

const (
	MethodVideoID      Method = "VIDEO_ID"
	MethodInPersonID   Method = "IN_PERSON_ID"
	MethodElectronicID Method = "ELECTRONIC_ID"
)

func (e Method) ToPointer() *Method {
	return &e
}

func (e *Method) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIDEO_ID":
		fallthrough
	case "IN_PERSON_ID":
		fallthrough
	case "ELECTRONIC_ID":
		*e = Method(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Method: %v", v)
	}
}

// UserCheckKnowYourCustomerCreateRequest - The KYC (Know your customer) check is completed by the client sharing the valid and relevant KYC data for the user.
type UserCheckKnowYourCustomerCreateRequest struct {
	// Completion date and time of the KYC check. Must not be older than 24 months.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress *CreateUserCheckAddress `json:"confirmed_address,omitempty"`
	// Download link for the KYC evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// Expiration date of the document used in KYC process in YYYY-MM-DD format.
	DocumentExpirationDate types.Date `json:"document_expiration_date"`
	// The type of document used in the KYC process.
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	// * RESIDENCE_PERMIT - Residence Permit
	DocumentType DocumentType `json:"document_type"`
	// Marks this check as a KYC refresh/update as opposed to an initial record.
	KycUpdate *bool `json:"kyc_update,omitempty"`
	// Method used for AML compliant KYC process
	// * VIDEO_ID - Video identification
	// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
	// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
	Method Method `json:"method"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationality string `json:"nationality"`
	// Provider that was used to perform the KYC check.
	Provider string `json:"provider"`
	// The type of check must be “KYC”.
	Type *string `default:"KYC" json:"type"`
}

func (u UserCheckKnowYourCustomerCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserCheckKnowYourCustomerCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetConfirmedAddress() *CreateUserCheckAddress {
	if o == nil {
		return nil
	}
	return o.ConfirmedAddress
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetDocumentExpirationDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DocumentExpirationDate
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetDocumentType() DocumentType {
	if o == nil {
		return DocumentType("")
	}
	return o.DocumentType
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetKycUpdate() *bool {
	if o == nil {
		return nil
	}
	return o.KycUpdate
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetMethod() Method {
	if o == nil {
		return Method("")
	}
	return o.Method
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetNationality() string {
	if o == nil {
		return ""
	}
	return o.Nationality
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetProvider() string {
	if o == nil {
		return ""
	}
	return o.Provider
}

func (o *UserCheckKnowYourCustomerCreateRequest) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type CreateUserCheckUserCheckCreateRequestType string

const (
	CreateUserCheckUserCheckCreateRequestTypeUserCheckKnowYourCustomerCreateRequest CreateUserCheckUserCheckCreateRequestType = "User Check - Know your customer - Create - Request"
	CreateUserCheckUserCheckCreateRequestTypeUserCheckProofOfResidencyCreateRequest CreateUserCheckUserCheckCreateRequestType = "User Check - Proof of Residency - Create - Request"
	CreateUserCheckUserCheckCreateRequestTypeUserCheckInstrumentFitCreateRequest    CreateUserCheckUserCheckCreateRequestType = "User Check - Instrument fit - Create - Request"
)

type CreateUserCheckUserCheckCreateRequest struct {
	UserCheckKnowYourCustomerCreateRequest *UserCheckKnowYourCustomerCreateRequest
	UserCheckProofOfResidencyCreateRequest *UserCheckProofOfResidencyCreateRequest
	UserCheckInstrumentFitCreateRequest    *UserCheckInstrumentFitCreateRequest

	Type CreateUserCheckUserCheckCreateRequestType
}

func CreateCreateUserCheckUserCheckCreateRequestUserCheckKnowYourCustomerCreateRequest(userCheckKnowYourCustomerCreateRequest UserCheckKnowYourCustomerCreateRequest) CreateUserCheckUserCheckCreateRequest {
	typ := CreateUserCheckUserCheckCreateRequestTypeUserCheckKnowYourCustomerCreateRequest

	return CreateUserCheckUserCheckCreateRequest{
		UserCheckKnowYourCustomerCreateRequest: &userCheckKnowYourCustomerCreateRequest,
		Type:                                   typ,
	}
}

func CreateCreateUserCheckUserCheckCreateRequestUserCheckProofOfResidencyCreateRequest(userCheckProofOfResidencyCreateRequest UserCheckProofOfResidencyCreateRequest) CreateUserCheckUserCheckCreateRequest {
	typ := CreateUserCheckUserCheckCreateRequestTypeUserCheckProofOfResidencyCreateRequest

	return CreateUserCheckUserCheckCreateRequest{
		UserCheckProofOfResidencyCreateRequest: &userCheckProofOfResidencyCreateRequest,
		Type:                                   typ,
	}
}

func CreateCreateUserCheckUserCheckCreateRequestUserCheckInstrumentFitCreateRequest(userCheckInstrumentFitCreateRequest UserCheckInstrumentFitCreateRequest) CreateUserCheckUserCheckCreateRequest {
	typ := CreateUserCheckUserCheckCreateRequestTypeUserCheckInstrumentFitCreateRequest

	return CreateUserCheckUserCheckCreateRequest{
		UserCheckInstrumentFitCreateRequest: &userCheckInstrumentFitCreateRequest,
		Type:                                typ,
	}
}

func (u *CreateUserCheckUserCheckCreateRequest) UnmarshalJSON(data []byte) error {

	userCheckInstrumentFitCreateRequest := UserCheckInstrumentFitCreateRequest{}
	if err := utils.UnmarshalJSON(data, &userCheckInstrumentFitCreateRequest, "", true, true); err == nil {
		u.UserCheckInstrumentFitCreateRequest = &userCheckInstrumentFitCreateRequest
		u.Type = CreateUserCheckUserCheckCreateRequestTypeUserCheckInstrumentFitCreateRequest
		return nil
	}

	userCheckProofOfResidencyCreateRequest := UserCheckProofOfResidencyCreateRequest{}
	if err := utils.UnmarshalJSON(data, &userCheckProofOfResidencyCreateRequest, "", true, true); err == nil {
		u.UserCheckProofOfResidencyCreateRequest = &userCheckProofOfResidencyCreateRequest
		u.Type = CreateUserCheckUserCheckCreateRequestTypeUserCheckProofOfResidencyCreateRequest
		return nil
	}

	userCheckKnowYourCustomerCreateRequest := UserCheckKnowYourCustomerCreateRequest{}
	if err := utils.UnmarshalJSON(data, &userCheckKnowYourCustomerCreateRequest, "", true, true); err == nil {
		u.UserCheckKnowYourCustomerCreateRequest = &userCheckKnowYourCustomerCreateRequest
		u.Type = CreateUserCheckUserCheckCreateRequestTypeUserCheckKnowYourCustomerCreateRequest
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserCheckUserCheckCreateRequest) MarshalJSON() ([]byte, error) {
	if u.UserCheckKnowYourCustomerCreateRequest != nil {
		return utils.MarshalJSON(u.UserCheckKnowYourCustomerCreateRequest, "", true)
	}

	if u.UserCheckProofOfResidencyCreateRequest != nil {
		return utils.MarshalJSON(u.UserCheckProofOfResidencyCreateRequest, "", true)
	}

	if u.UserCheckInstrumentFitCreateRequest != nil {
		return utils.MarshalJSON(u.UserCheckInstrumentFitCreateRequest, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateUserCheckRequest struct {
	RequestBody *CreateUserCheckUserCheckCreateRequest `request:"mediaType=application/json"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (c CreateUserCheckRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserCheckRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserCheckRequest) GetRequestBody() *CreateUserCheckUserCheckCreateRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateUserCheckRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *CreateUserCheckRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *CreateUserCheckRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *CreateUserCheckRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *CreateUserCheckRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// CreateUserCheckUserCheckCreateResponse - The request has been successfully accepted.
type CreateUserCheckUserCheckCreateResponse struct {
	// User Check unique identifier.
	ID string `json:"id"`
}

func (o *CreateUserCheckUserCheckCreateResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CreateUserCheckResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The request has been successfully accepted.
	UserCheckCreateResponse *CreateUserCheckUserCheckCreateResponse
}

func (o *CreateUserCheckResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateUserCheckResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *CreateUserCheckResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateUserCheckResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateUserCheckResponse) GetUserCheckCreateResponse() *CreateUserCheckUserCheckCreateResponse {
	if o == nil {
		return nil
	}
	return o.UserCheckCreateResponse
}
