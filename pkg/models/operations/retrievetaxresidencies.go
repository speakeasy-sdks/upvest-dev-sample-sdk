// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveTaxResidenciesRequest struct {
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (r RetrieveTaxResidenciesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveTaxResidenciesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveTaxResidenciesRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveTaxResidenciesRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveTaxResidenciesRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveTaxResidenciesRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *RetrieveTaxResidenciesRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// RetrieveTaxResidenciesTaxResidencyRecordStatus - Tax residency status
// * PENDING - It indicates that the tax residency records are not yet processed by Upvest.
// * ACTIVE - It indicates that tax residency records are processed, and the tax residency record is the one in use.
type RetrieveTaxResidenciesTaxResidencyRecordStatus string

const (
	RetrieveTaxResidenciesTaxResidencyRecordStatusPending RetrieveTaxResidenciesTaxResidencyRecordStatus = "PENDING"
	RetrieveTaxResidenciesTaxResidencyRecordStatusActive  RetrieveTaxResidenciesTaxResidencyRecordStatus = "ACTIVE"
)

func (e RetrieveTaxResidenciesTaxResidencyRecordStatus) ToPointer() *RetrieveTaxResidenciesTaxResidencyRecordStatus {
	return &e
}

func (e *RetrieveTaxResidenciesTaxResidencyRecordStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "ACTIVE":
		*e = RetrieveTaxResidenciesTaxResidencyRecordStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveTaxResidenciesTaxResidencyRecordStatus: %v", v)
	}
}

// RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason - Reason why TIN is missing
// * TIN_NOT_YET_ASSIGNED - Indicates that the tax identification number has not yet been assigned by the tax authorities. A common example is, that a user has moved to a country and thus became taxable, but that the tax authorities have not yet assigned the TIN to this user.
// * COUNTRY_HAS_NO_TIN - Indicates that the specific country does not provide a TIN.
// * OTHER_REASONS - Applies in case of other reasons - i.e. when a user does not have the TIN at hand. Note this may cause additional inquiries by our customer service team.
type RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason string

const (
	RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReasonTinNotYetAssigned RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason = "TIN_NOT_YET_ASSIGNED"
	RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReasonCountryHasNoTin   RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason = "COUNTRY_HAS_NO_TIN"
	RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReasonOtherReasons      RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason = "OTHER_REASONS"
)

func (e RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason) ToPointer() *RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason {
	return &e
}

func (e *RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TIN_NOT_YET_ASSIGNED":
		fallthrough
	case "COUNTRY_HAS_NO_TIN":
		fallthrough
	case "OTHER_REASONS":
		*e = RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason: %v", v)
	}
}

type RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber struct {
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Reason why TIN is missing
	// * TIN_NOT_YET_ASSIGNED - Indicates that the tax identification number has not yet been assigned by the tax authorities. A common example is, that a user has moved to a country and thus became taxable, but that the tax authorities have not yet assigned the TIN to this user.
	// * COUNTRY_HAS_NO_TIN - Indicates that the specific country does not provide a TIN.
	// * OTHER_REASONS - Applies in case of other reasons - i.e. when a user does not have the TIN at hand. Note this may cause additional inquiries by our customer service team.
	MissingTinReason RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason `json:"missing_tin_reason"`
}

func (o *RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber) GetMissingTinReason() RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason {
	if o == nil {
		return RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason("")
	}
	return o.MissingTinReason
}

type RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber struct {
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Tax identifier number
	TaxIdentifierNumber string `json:"tax_identifier_number"`
}

func (o *RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber) GetTaxIdentifierNumber() string {
	if o == nil {
		return ""
	}
	return o.TaxIdentifierNumber
}

type RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyType string

const (
	RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyTypeRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber    RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyType = "retrieve_tax_residencies_Tax residency Record_Tax residency_With tax identifier number"
	RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyTypeRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyType = "retrieve_tax_residencies_Tax residency Record_Tax residency_Without tax identifier number"
)

type RetrieveTaxResidenciesTaxResidencyRecordTaxResidency struct {
	RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber    *RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber
	RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber *RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber

	Type RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyType
}

func CreateRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber(retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber) RetrieveTaxResidenciesTaxResidencyRecordTaxResidency {
	typ := RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyTypeRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber

	return RetrieveTaxResidenciesTaxResidencyRecordTaxResidency{
		RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber: &retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber,
		Type: typ,
	}
}

func CreateRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber(retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber) RetrieveTaxResidenciesTaxResidencyRecordTaxResidency {
	typ := RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyTypeRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber

	return RetrieveTaxResidenciesTaxResidencyRecordTaxResidency{
		RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber: &retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber,
		Type: typ,
	}
}

func (u *RetrieveTaxResidenciesTaxResidencyRecordTaxResidency) UnmarshalJSON(data []byte) error {

	retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber := new(RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber)
	if err := utils.UnmarshalJSON(data, &retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber, "", true, true); err == nil {
		u.RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber = retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber
		u.Type = RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyTypeRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber
		return nil
	}

	retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber := new(RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber)
	if err := utils.UnmarshalJSON(data, &retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber, "", true, true); err == nil {
		u.RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber = retrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber
		u.Type = RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyTypeRetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RetrieveTaxResidenciesTaxResidencyRecordTaxResidency) MarshalJSON() ([]byte, error) {
	if u.RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber != nil {
		return utils.MarshalJSON(u.RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber, "", true)
	}

	if u.RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber != nil {
		return utils.MarshalJSON(u.RetrieveTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// RetrieveTaxResidenciesTaxResidencyRecord - User tax residencies
type RetrieveTaxResidenciesTaxResidencyRecord struct {
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Tax residency status
	// * PENDING - It indicates that the tax residency records are not yet processed by Upvest.
	// * ACTIVE - It indicates that tax residency records are processed, and the tax residency record is the one in use.
	Status         RetrieveTaxResidenciesTaxResidencyRecordStatus         `json:"status"`
	TaxResidencies []RetrieveTaxResidenciesTaxResidencyRecordTaxResidency `json:"tax_residencies"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (r RetrieveTaxResidenciesTaxResidencyRecord) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveTaxResidenciesTaxResidencyRecord) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveTaxResidenciesTaxResidencyRecord) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveTaxResidenciesTaxResidencyRecord) GetStatus() RetrieveTaxResidenciesTaxResidencyRecordStatus {
	if o == nil {
		return RetrieveTaxResidenciesTaxResidencyRecordStatus("")
	}
	return o.Status
}

func (o *RetrieveTaxResidenciesTaxResidencyRecord) GetTaxResidencies() []RetrieveTaxResidenciesTaxResidencyRecordTaxResidency {
	if o == nil {
		return []RetrieveTaxResidenciesTaxResidencyRecordTaxResidency{}
	}
	return o.TaxResidencies
}

func (o *RetrieveTaxResidenciesTaxResidencyRecord) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type RetrieveTaxResidenciesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// User tax residencies
	TaxResidencyRecord *RetrieveTaxResidenciesTaxResidencyRecord
}

func (o *RetrieveTaxResidenciesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveTaxResidenciesResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *RetrieveTaxResidenciesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveTaxResidenciesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RetrieveTaxResidenciesResponse) GetTaxResidencyRecord() *RetrieveTaxResidenciesTaxResidencyRecord {
	if o == nil {
		return nil
	}
	return o.TaxResidencyRecord
}
