// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveDirectDebitSecurity struct {
	OauthClientCredentials string `security:"scheme,type=oauth2,name=Authorization"`
}

func (o *RetrieveDirectDebitSecurity) GetOauthClientCredentials() string {
	if o == nil {
		return ""
	}
	return o.OauthClientCredentials
}

type RetrieveDirectDebitRequest struct {
	DirectDebitID string `pathParam:"style=simple,explode=false,name=direct_debit_id"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (r RetrieveDirectDebitRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveDirectDebitRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveDirectDebitRequest) GetDirectDebitID() string {
	if o == nil {
		return ""
	}
	return o.DirectDebitID
}

func (o *RetrieveDirectDebitRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveDirectDebitRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveDirectDebitRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveDirectDebitRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// RetrieveDirectDebitCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type RetrieveDirectDebitCurrency string

const (
	RetrieveDirectDebitCurrencyEur RetrieveDirectDebitCurrency = "EUR"
)

func (e RetrieveDirectDebitCurrency) ToPointer() *RetrieveDirectDebitCurrency {
	return &e
}

func (e *RetrieveDirectDebitCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = RetrieveDirectDebitCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveDirectDebitCurrency: %v", v)
	}
}

// RetrieveDirectDebitStatus - Status of the direct debit
// * NEW - Direct debit is created but not started processing.
// * PROCESSING - Direct debit is in processing.
// * CONFIRMED - Direct debit was successfully processed.
// * CANCELLED - Direct debit was cancelled.
type RetrieveDirectDebitStatus string

const (
	RetrieveDirectDebitStatusNew        RetrieveDirectDebitStatus = "NEW"
	RetrieveDirectDebitStatusProcessing RetrieveDirectDebitStatus = "PROCESSING"
	RetrieveDirectDebitStatusConfirmed  RetrieveDirectDebitStatus = "CONFIRMED"
	RetrieveDirectDebitStatusCancelled  RetrieveDirectDebitStatus = "CANCELLED"
)

func (e RetrieveDirectDebitStatus) ToPointer() *RetrieveDirectDebitStatus {
	return &e
}

func (e *RetrieveDirectDebitStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "CANCELLED":
		*e = RetrieveDirectDebitStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveDirectDebitStatus: %v", v)
	}
}

// RetrieveDirectDebitResponseBody - Direct debit payment
type RetrieveDirectDebitResponseBody struct {
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	CashAmount     string `json:"cash_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *RetrieveDirectDebitCurrency `default:"EUR" json:"currency"`
	// Direct debit funding request unique identifier
	ID string `json:"id"`
	// Direct Debit Mandate unique identifier.
	MandateID string `json:"mandate_id"`
	// Payment reference the end user will see in their bank statement for the corresponding direct debit booking (“Verwendungszweck”)
	RemittanceInformation *string `json:"remittance_information,omitempty"`
	// Status of the direct debit
	// * NEW - Direct debit is created but not started processing.
	// * PROCESSING - Direct debit is in processing.
	// * CONFIRMED - Direct debit was successfully processed.
	// * CANCELLED - Direct debit was cancelled.
	Status *RetrieveDirectDebitStatus `json:"status,omitempty"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (r RetrieveDirectDebitResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveDirectDebitResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveDirectDebitResponseBody) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *RetrieveDirectDebitResponseBody) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *RetrieveDirectDebitResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveDirectDebitResponseBody) GetCurrency() *RetrieveDirectDebitCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *RetrieveDirectDebitResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveDirectDebitResponseBody) GetMandateID() string {
	if o == nil {
		return ""
	}
	return o.MandateID
}

func (o *RetrieveDirectDebitResponseBody) GetRemittanceInformation() *string {
	if o == nil {
		return nil
	}
	return o.RemittanceInformation
}

func (o *RetrieveDirectDebitResponseBody) GetStatus() *RetrieveDirectDebitStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *RetrieveDirectDebitResponseBody) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type RetrieveDirectDebitResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Direct debit payment
	Object *RetrieveDirectDebitResponseBody
}

func (o *RetrieveDirectDebitResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveDirectDebitResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *RetrieveDirectDebitResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveDirectDebitResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RetrieveDirectDebitResponse) GetObject() *RetrieveDirectDebitResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
