// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// UpdateWebhookWebhookUpdateRequestConfig - Configuration of webhook packages collection.
type UpdateWebhookWebhookUpdateRequestConfig struct {
	// Maximum time of package collection.
	Delay *string `json:"delay,omitempty"`
	// Maximum package size (bytes)
	MaxPackageSize *int64 `json:"max_package_size,omitempty"`
}

func (o *UpdateWebhookWebhookUpdateRequestConfig) GetDelay() *string {
	if o == nil {
		return nil
	}
	return o.Delay
}

func (o *UpdateWebhookWebhookUpdateRequestConfig) GetMaxPackageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxPackageSize
}

type UpdateWebhookWebhookUpdateRequestType string

const (
	UpdateWebhookWebhookUpdateRequestTypeAll                      UpdateWebhookWebhookUpdateRequestType = "ALL"
	UpdateWebhookWebhookUpdateRequestTypeUser                     UpdateWebhookWebhookUpdateRequestType = "USER"
	UpdateWebhookWebhookUpdateRequestTypeUserCheck                UpdateWebhookWebhookUpdateRequestType = "USER_CHECK"
	UpdateWebhookWebhookUpdateRequestTypeOrder                    UpdateWebhookWebhookUpdateRequestType = "ORDER"
	UpdateWebhookWebhookUpdateRequestTypeOrderCancellation        UpdateWebhookWebhookUpdateRequestType = "ORDER_CANCELLATION"
	UpdateWebhookWebhookUpdateRequestTypeExecution                UpdateWebhookWebhookUpdateRequestType = "EXECUTION"
	UpdateWebhookWebhookUpdateRequestTypePosition                 UpdateWebhookWebhookUpdateRequestType = "POSITION"
	UpdateWebhookWebhookUpdateRequestTypeCashBalance              UpdateWebhookWebhookUpdateRequestType = "CASH_BALANCE"
	UpdateWebhookWebhookUpdateRequestTypeAccount                  UpdateWebhookWebhookUpdateRequestType = "ACCOUNT"
	UpdateWebhookWebhookUpdateRequestTypeAccountGroup             UpdateWebhookWebhookUpdateRequestType = "ACCOUNT_GROUP"
	UpdateWebhookWebhookUpdateRequestTypeReport                   UpdateWebhookWebhookUpdateRequestType = "REPORT"
	UpdateWebhookWebhookUpdateRequestTypeTreasuryReport           UpdateWebhookWebhookUpdateRequestType = "TREASURY_REPORT"
	UpdateWebhookWebhookUpdateRequestTypeDirectDebit              UpdateWebhookWebhookUpdateRequestType = "DIRECT_DEBIT"
	UpdateWebhookWebhookUpdateRequestTypeWithdrawal               UpdateWebhookWebhookUpdateRequestType = "WITHDRAWAL"
	UpdateWebhookWebhookUpdateRequestTypePortfolio                UpdateWebhookWebhookUpdateRequestType = "PORTFOLIO"
	UpdateWebhookWebhookUpdateRequestTypePortfolioAllocation      UpdateWebhookWebhookUpdateRequestType = "PORTFOLIO_ALLOCATION"
	UpdateWebhookWebhookUpdateRequestTypePortfolioOrder           UpdateWebhookWebhookUpdateRequestType = "PORTFOLIO_ORDER"
	UpdateWebhookWebhookUpdateRequestTypeCorporateAction          UpdateWebhookWebhookUpdateRequestType = "CORPORATE_ACTION"
	UpdateWebhookWebhookUpdateRequestTypeAccountValuation         UpdateWebhookWebhookUpdateRequestType = "ACCOUNT_VALUATION"
	UpdateWebhookWebhookUpdateRequestTypeIntradayAccountValuation UpdateWebhookWebhookUpdateRequestType = "INTRADAY_ACCOUNT_VALUATION"
	UpdateWebhookWebhookUpdateRequestTypeCashTransaction          UpdateWebhookWebhookUpdateRequestType = "CASH_TRANSACTION"
	UpdateWebhookWebhookUpdateRequestTypeSecurityTransaction      UpdateWebhookWebhookUpdateRequestType = "SECURITY_TRANSACTION"
	UpdateWebhookWebhookUpdateRequestTypeAccountLiquidation       UpdateWebhookWebhookUpdateRequestType = "ACCOUNT_LIQUIDATION"
	UpdateWebhookWebhookUpdateRequestTypeAccountReturns           UpdateWebhookWebhookUpdateRequestType = "ACCOUNT_RETURNS"
	UpdateWebhookWebhookUpdateRequestTypeVirtualCashIncrease      UpdateWebhookWebhookUpdateRequestType = "VIRTUAL_CASH_INCREASE"
	UpdateWebhookWebhookUpdateRequestTypeVirtualCashDecrease      UpdateWebhookWebhookUpdateRequestType = "VIRTUAL_CASH_DECREASE"
	UpdateWebhookWebhookUpdateRequestTypeFeeCollection            UpdateWebhookWebhookUpdateRequestType = "FEE_COLLECTION"
)

func (e UpdateWebhookWebhookUpdateRequestType) ToPointer() *UpdateWebhookWebhookUpdateRequestType {
	return &e
}

func (e *UpdateWebhookWebhookUpdateRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "USER":
		fallthrough
	case "USER_CHECK":
		fallthrough
	case "ORDER":
		fallthrough
	case "ORDER_CANCELLATION":
		fallthrough
	case "EXECUTION":
		fallthrough
	case "POSITION":
		fallthrough
	case "CASH_BALANCE":
		fallthrough
	case "ACCOUNT":
		fallthrough
	case "ACCOUNT_GROUP":
		fallthrough
	case "REPORT":
		fallthrough
	case "TREASURY_REPORT":
		fallthrough
	case "DIRECT_DEBIT":
		fallthrough
	case "WITHDRAWAL":
		fallthrough
	case "PORTFOLIO":
		fallthrough
	case "PORTFOLIO_ALLOCATION":
		fallthrough
	case "PORTFOLIO_ORDER":
		fallthrough
	case "CORPORATE_ACTION":
		fallthrough
	case "ACCOUNT_VALUATION":
		fallthrough
	case "INTRADAY_ACCOUNT_VALUATION":
		fallthrough
	case "CASH_TRANSACTION":
		fallthrough
	case "SECURITY_TRANSACTION":
		fallthrough
	case "ACCOUNT_LIQUIDATION":
		fallthrough
	case "ACCOUNT_RETURNS":
		fallthrough
	case "VIRTUAL_CASH_INCREASE":
		fallthrough
	case "VIRTUAL_CASH_DECREASE":
		fallthrough
	case "FEE_COLLECTION":
		*e = UpdateWebhookWebhookUpdateRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWebhookWebhookUpdateRequestType: %v", v)
	}
}

type UpdateWebhookWebhookUpdateRequest struct {
	// Configuration of webhook packages collection.
	Config *UpdateWebhookWebhookUpdateRequestConfig `json:"config,omitempty"`
	// Enable/disable webhook.
	Enabled *bool `json:"enabled,omitempty"`
	// Title of the webhook for use on tenant side.
	Title *string `json:"title,omitempty"`
	// What kind of events to be sent by the webhook.
	Type []UpdateWebhookWebhookUpdateRequestType `json:"type,omitempty"`
	// The callback URL to be called by the webhook.
	URL *string `json:"url,omitempty"`
}

func (o *UpdateWebhookWebhookUpdateRequest) GetConfig() *UpdateWebhookWebhookUpdateRequestConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *UpdateWebhookWebhookUpdateRequest) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpdateWebhookWebhookUpdateRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdateWebhookWebhookUpdateRequest) GetType() []UpdateWebhookWebhookUpdateRequestType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateWebhookWebhookUpdateRequest) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type UpdateWebhookRequest struct {
	RequestBody *UpdateWebhookWebhookUpdateRequest `request:"mediaType=application/json"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	// Webhook identifier
	WebhookID string `pathParam:"style=simple,explode=false,name=webhook_id"`
}

func (u UpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateWebhookRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateWebhookRequest) GetRequestBody() *UpdateWebhookWebhookUpdateRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UpdateWebhookRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *UpdateWebhookRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *UpdateWebhookRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *UpdateWebhookRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *UpdateWebhookRequest) GetWebhookID() string {
	if o == nil {
		return ""
	}
	return o.WebhookID
}

// UpdateWebhookWebhookConfig - Configuration of webhook packages collection.
type UpdateWebhookWebhookConfig struct {
	// Maximum time of package collection.
	Delay *string `json:"delay,omitempty"`
	// Maximum package size (bytes)
	MaxPackageSize *int64 `json:"max_package_size,omitempty"`
}

func (o *UpdateWebhookWebhookConfig) GetDelay() *string {
	if o == nil {
		return nil
	}
	return o.Delay
}

func (o *UpdateWebhookWebhookConfig) GetMaxPackageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxPackageSize
}

type UpdateWebhookWebhookType string

const (
	UpdateWebhookWebhookTypeAll                      UpdateWebhookWebhookType = "ALL"
	UpdateWebhookWebhookTypeUser                     UpdateWebhookWebhookType = "USER"
	UpdateWebhookWebhookTypeUserCheck                UpdateWebhookWebhookType = "USER_CHECK"
	UpdateWebhookWebhookTypeOrder                    UpdateWebhookWebhookType = "ORDER"
	UpdateWebhookWebhookTypeOrderCancellation        UpdateWebhookWebhookType = "ORDER_CANCELLATION"
	UpdateWebhookWebhookTypeExecution                UpdateWebhookWebhookType = "EXECUTION"
	UpdateWebhookWebhookTypePosition                 UpdateWebhookWebhookType = "POSITION"
	UpdateWebhookWebhookTypeCashBalance              UpdateWebhookWebhookType = "CASH_BALANCE"
	UpdateWebhookWebhookTypeAccount                  UpdateWebhookWebhookType = "ACCOUNT"
	UpdateWebhookWebhookTypeAccountGroup             UpdateWebhookWebhookType = "ACCOUNT_GROUP"
	UpdateWebhookWebhookTypeReport                   UpdateWebhookWebhookType = "REPORT"
	UpdateWebhookWebhookTypeTreasuryReport           UpdateWebhookWebhookType = "TREASURY_REPORT"
	UpdateWebhookWebhookTypeDirectDebit              UpdateWebhookWebhookType = "DIRECT_DEBIT"
	UpdateWebhookWebhookTypeWithdrawal               UpdateWebhookWebhookType = "WITHDRAWAL"
	UpdateWebhookWebhookTypePortfolio                UpdateWebhookWebhookType = "PORTFOLIO"
	UpdateWebhookWebhookTypePortfolioAllocation      UpdateWebhookWebhookType = "PORTFOLIO_ALLOCATION"
	UpdateWebhookWebhookTypePortfolioOrder           UpdateWebhookWebhookType = "PORTFOLIO_ORDER"
	UpdateWebhookWebhookTypeCorporateAction          UpdateWebhookWebhookType = "CORPORATE_ACTION"
	UpdateWebhookWebhookTypeAccountValuation         UpdateWebhookWebhookType = "ACCOUNT_VALUATION"
	UpdateWebhookWebhookTypeIntradayAccountValuation UpdateWebhookWebhookType = "INTRADAY_ACCOUNT_VALUATION"
	UpdateWebhookWebhookTypeCashTransaction          UpdateWebhookWebhookType = "CASH_TRANSACTION"
	UpdateWebhookWebhookTypeSecurityTransaction      UpdateWebhookWebhookType = "SECURITY_TRANSACTION"
	UpdateWebhookWebhookTypeAccountLiquidation       UpdateWebhookWebhookType = "ACCOUNT_LIQUIDATION"
	UpdateWebhookWebhookTypeAccountReturns           UpdateWebhookWebhookType = "ACCOUNT_RETURNS"
	UpdateWebhookWebhookTypeVirtualCashIncrease      UpdateWebhookWebhookType = "VIRTUAL_CASH_INCREASE"
	UpdateWebhookWebhookTypeVirtualCashDecrease      UpdateWebhookWebhookType = "VIRTUAL_CASH_DECREASE"
	UpdateWebhookWebhookTypeFeeCollection            UpdateWebhookWebhookType = "FEE_COLLECTION"
)

func (e UpdateWebhookWebhookType) ToPointer() *UpdateWebhookWebhookType {
	return &e
}

func (e *UpdateWebhookWebhookType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "USER":
		fallthrough
	case "USER_CHECK":
		fallthrough
	case "ORDER":
		fallthrough
	case "ORDER_CANCELLATION":
		fallthrough
	case "EXECUTION":
		fallthrough
	case "POSITION":
		fallthrough
	case "CASH_BALANCE":
		fallthrough
	case "ACCOUNT":
		fallthrough
	case "ACCOUNT_GROUP":
		fallthrough
	case "REPORT":
		fallthrough
	case "TREASURY_REPORT":
		fallthrough
	case "DIRECT_DEBIT":
		fallthrough
	case "WITHDRAWAL":
		fallthrough
	case "PORTFOLIO":
		fallthrough
	case "PORTFOLIO_ALLOCATION":
		fallthrough
	case "PORTFOLIO_ORDER":
		fallthrough
	case "CORPORATE_ACTION":
		fallthrough
	case "ACCOUNT_VALUATION":
		fallthrough
	case "INTRADAY_ACCOUNT_VALUATION":
		fallthrough
	case "CASH_TRANSACTION":
		fallthrough
	case "SECURITY_TRANSACTION":
		fallthrough
	case "ACCOUNT_LIQUIDATION":
		fallthrough
	case "ACCOUNT_RETURNS":
		fallthrough
	case "VIRTUAL_CASH_INCREASE":
		fallthrough
	case "VIRTUAL_CASH_DECREASE":
		fallthrough
	case "FEE_COLLECTION":
		*e = UpdateWebhookWebhookType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWebhookWebhookType: %v", v)
	}
}

// UpdateWebhookWebhook - Returns a webhook subscription object if a valid webhook subscription object ID was provided.
type UpdateWebhookWebhook struct {
	// Configuration of webhook packages collection.
	Config UpdateWebhookWebhookConfig `json:"config"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Enable/disable webhook.
	Enabled bool `json:"enabled"`
	// Webhook unique identifier.
	ID string `json:"id"`
	// Title of the webhook for use on tenant side.
	Title string `json:"title"`
	// What kind of events to be sent by the webhook.
	Type []UpdateWebhookWebhookType `json:"type"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// The callback URL to be called by the webhook.
	URL string `json:"url"`
}

func (u UpdateWebhookWebhook) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateWebhookWebhook) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateWebhookWebhook) GetConfig() UpdateWebhookWebhookConfig {
	if o == nil {
		return UpdateWebhookWebhookConfig{}
	}
	return o.Config
}

func (o *UpdateWebhookWebhook) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UpdateWebhookWebhook) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *UpdateWebhookWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateWebhookWebhook) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateWebhookWebhook) GetType() []UpdateWebhookWebhookType {
	if o == nil {
		return []UpdateWebhookWebhookType{}
	}
	return o.Type
}

func (o *UpdateWebhookWebhook) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *UpdateWebhookWebhook) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateWebhookResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Returns a webhook subscription object if a valid webhook subscription object ID was provided.
	Webhook *UpdateWebhookWebhook
}

func (o *UpdateWebhookResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateWebhookResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *UpdateWebhookResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateWebhookResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateWebhookResponse) GetWebhook() *UpdateWebhookWebhook {
	if o == nil {
		return nil
	}
	return o.Webhook
}
