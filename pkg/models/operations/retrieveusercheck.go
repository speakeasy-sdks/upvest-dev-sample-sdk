// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveUserCheckRequest struct {
	CheckID string `pathParam:"style=simple,explode=false,name=check_id"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (r RetrieveUserCheckRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserCheckRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserCheckRequest) GetCheckID() string {
	if o == nil {
		return ""
	}
	return o.CheckID
}

func (o *RetrieveUserCheckRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveUserCheckRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveUserCheckRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveUserCheckRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *RetrieveUserCheckRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// RetrieveUserCheckUserCheckUserCheckComplianceStatus - Final status of the COMPLIANCE check.
// * IN_PROGRESS - Compliance check is in progress
// * PASSED - Compliance check passed
// * FAILED - Compliance check failed
type RetrieveUserCheckUserCheckUserCheckComplianceStatus string

const (
	RetrieveUserCheckUserCheckUserCheckComplianceStatusInProgress RetrieveUserCheckUserCheckUserCheckComplianceStatus = "IN_PROGRESS"
	RetrieveUserCheckUserCheckUserCheckComplianceStatusPassed     RetrieveUserCheckUserCheckUserCheckComplianceStatus = "PASSED"
	RetrieveUserCheckUserCheckUserCheckComplianceStatusFailed     RetrieveUserCheckUserCheckUserCheckComplianceStatus = "FAILED"
)

func (e RetrieveUserCheckUserCheckUserCheckComplianceStatus) ToPointer() *RetrieveUserCheckUserCheckUserCheckComplianceStatus {
	return &e
}

func (e *RetrieveUserCheckUserCheckUserCheckComplianceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = RetrieveUserCheckUserCheckUserCheckComplianceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUserCheckUserCheckComplianceStatus: %v", v)
	}
}

// RetrieveUserCheckUserCheckUserCheckCompliance - Compliance check
type RetrieveUserCheckUserCheckUserCheckCompliance struct {
	// Completion date and time of the COMPLIANCE check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Final status of the COMPLIANCE check.
	// * IN_PROGRESS - Compliance check is in progress
	// * PASSED - Compliance check passed
	// * FAILED - Compliance check failed
	Status *RetrieveUserCheckUserCheckUserCheckComplianceStatus `json:"status,omitempty"`
	// The type of check must be COMPLIANCE.
	Type *string `default:"COMPLIANCE" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (r RetrieveUserCheckUserCheckUserCheckCompliance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserCheckUserCheckUserCheckCompliance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserCheckUserCheckUserCheckCompliance) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *RetrieveUserCheckUserCheckUserCheckCompliance) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveUserCheckUserCheckUserCheckCompliance) GetStatus() *RetrieveUserCheckUserCheckUserCheckComplianceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *RetrieveUserCheckUserCheckUserCheckCompliance) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RetrieveUserCheckUserCheckUserCheckCompliance) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type RetrieveUserCheckUserCheckUserCheckInstrumentFitInstrumentSuitability struct {
	// Did the user go through a suitability assessment and the outcome indicated suitability.
	Suitability bool `json:"suitability"`
}

func (o *RetrieveUserCheckUserCheckUserCheckInstrumentFitInstrumentSuitability) GetSuitability() bool {
	if o == nil {
		return false
	}
	return o.Suitability
}

// RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus - Final status of the instrument fit check.
// * IN_PROGRESS - Instrument fit check is in progress
// * PASSED - Instrument fit check passed
// * FAILED - Instrument fit check failed
type RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus string

const (
	RetrieveUserCheckUserCheckUserCheckInstrumentFitStatusInProgress RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus = "IN_PROGRESS"
	RetrieveUserCheckUserCheckUserCheckInstrumentFitStatusPassed     RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus = "PASSED"
	RetrieveUserCheckUserCheckUserCheckInstrumentFitStatusFailed     RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus = "FAILED"
)

func (e RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus) ToPointer() *RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus {
	return &e
}

func (e *RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus: %v", v)
	}
}

// RetrieveUserCheckUserCheckUserCheckInstrumentFit - Instrument fit check is completed by the client providing the user's answers to the instrument appropriateness or suitability questionnaire.
type RetrieveUserCheckUserCheckUserCheckInstrumentFit struct {
	// Completion date and time of the instrument fit check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// User Check unique identifier.
	ID                    string                                                                `json:"id"`
	InstrumentSuitability RetrieveUserCheckUserCheckUserCheckInstrumentFitInstrumentSuitability `json:"instrument_suitability"`
	// Final status of the instrument fit check.
	// * IN_PROGRESS - Instrument fit check is in progress
	// * PASSED - Instrument fit check passed
	// * FAILED - Instrument fit check failed
	Status RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus `json:"status"`
	// The type of check must be INSTRUMENT_FIT.
	Type *string `default:"INSTRUMENT_FIT" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (r RetrieveUserCheckUserCheckUserCheckInstrumentFit) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserCheckUserCheckUserCheckInstrumentFit) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserCheckUserCheckUserCheckInstrumentFit) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *RetrieveUserCheckUserCheckUserCheckInstrumentFit) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveUserCheckUserCheckUserCheckInstrumentFit) GetInstrumentSuitability() RetrieveUserCheckUserCheckUserCheckInstrumentFitInstrumentSuitability {
	if o == nil {
		return RetrieveUserCheckUserCheckUserCheckInstrumentFitInstrumentSuitability{}
	}
	return o.InstrumentSuitability
}

func (o *RetrieveUserCheckUserCheckUserCheckInstrumentFit) GetStatus() RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus {
	if o == nil {
		return RetrieveUserCheckUserCheckUserCheckInstrumentFitStatus("")
	}
	return o.Status
}

func (o *RetrieveUserCheckUserCheckUserCheckInstrumentFit) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RetrieveUserCheckUserCheckUserCheckInstrumentFit) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress - Address. Must not be a P.O. box or c/o address.
type RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType - The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
// * UTILITY_BILL -
// * TELEPHONE_BILL -
// * INTERNET_BILL -
// * BANK_STATEMENT -
// * REGISTRATION_CERT -
// * RESIDENCE_PERMIT -
// * ID_CARD -
type RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType string

const (
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentTypeUtilityBill      RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType = "UTILITY_BILL"
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentTypeTelephoneBill    RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType = "TELEPHONE_BILL"
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentTypeInternetBill     RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType = "INTERNET_BILL"
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentTypeBankStatement    RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType = "BANK_STATEMENT"
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentTypeRegistrationCert RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType = "REGISTRATION_CERT"
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentTypeResidencePermit  RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType = "RESIDENCE_PERMIT"
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentTypeIDCard           RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType = "ID_CARD"
)

func (e RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType) ToPointer() *RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType {
	return &e
}

func (e *RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTILITY_BILL":
		fallthrough
	case "TELEPHONE_BILL":
		fallthrough
	case "INTERNET_BILL":
		fallthrough
	case "BANK_STATEMENT":
		fallthrough
	case "REGISTRATION_CERT":
		fallthrough
	case "RESIDENCE_PERMIT":
		fallthrough
	case "ID_CARD":
		*e = RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType: %v", v)
	}
}

// RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus - Final status of the PoR check.
// * IN_PROGRESS -
// * PASSED -
// * FAILED -
type RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus string

const (
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatusInProgress RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus = "IN_PROGRESS"
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatusPassed     RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus = "PASSED"
	RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatusFailed     RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus = "FAILED"
)

func (e RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus) ToPointer() *RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus {
	return &e
}

func (e *RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus: %v", v)
	}
}

// RetrieveUserCheckUserCheckUserCheckProofOfResidency - The PoR (Proof of residency) check is completed by the client sharing a valid PoR document, if not fulfilled by the KYC check.
type RetrieveUserCheckUserCheckUserCheckProofOfResidency struct {
	// Completion date and time of the PoR check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress `json:"confirmed_address"`
	// Download link for the PoR evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
	// * UTILITY_BILL -
	// * TELEPHONE_BILL -
	// * INTERNET_BILL -
	// * BANK_STATEMENT -
	// * REGISTRATION_CERT -
	// * RESIDENCE_PERMIT -
	// * ID_CARD -
	DocumentType RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType `json:"document_type"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Issuance date in YYYY-MM-DD format.
	IssuanceDate types.Date `json:"issuance_date"`
	// Final status of the PoR check.
	// * IN_PROGRESS -
	// * PASSED -
	// * FAILED -
	Status RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus `json:"status"`
	// The type of check must be POR.
	Type *string `default:"POR" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (r RetrieveUserCheckUserCheckUserCheckProofOfResidency) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserCheckUserCheckUserCheckProofOfResidency) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidency) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidency) GetConfirmedAddress() RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress {
	if o == nil {
		return RetrieveUserCheckUserCheckUserCheckProofOfResidencyAddress{}
	}
	return o.ConfirmedAddress
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidency) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidency) GetDocumentType() RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType {
	if o == nil {
		return RetrieveUserCheckUserCheckUserCheckProofOfResidencyDocumentType("")
	}
	return o.DocumentType
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidency) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidency) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidency) GetStatus() RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus {
	if o == nil {
		return RetrieveUserCheckUserCheckUserCheckProofOfResidencyStatus("")
	}
	return o.Status
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidency) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RetrieveUserCheckUserCheckUserCheckProofOfResidency) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress - Address. Must not be a P.O. box or c/o address.
type RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType - The type of document used in the KYC process.
// * PASSPORT - Passport
// * ID_CARD - National Identification document
// * RESIDENCE_PERMIT - Residence Permit
type RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType string

const (
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentTypePassport        RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType = "PASSPORT"
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentTypeIDCard          RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType = "ID_CARD"
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentTypeResidencePermit RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType = "RESIDENCE_PERMIT"
)

func (e RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType) ToPointer() *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType {
	return &e
}

func (e *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		fallthrough
	case "RESIDENCE_PERMIT":
		*e = RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType: %v", v)
	}
}

// RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod - Method used for AML compliant KYC process
// * VIDEO_ID - Video identification
// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
type RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod string

const (
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethodVideoID      RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod = "VIDEO_ID"
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethodInPersonID   RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod = "IN_PERSON_ID"
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethodElectronicID RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod = "ELECTRONIC_ID"
)

func (e RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod) ToPointer() *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod {
	return &e
}

func (e *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIDEO_ID":
		fallthrough
	case "IN_PERSON_ID":
		fallthrough
	case "ELECTRONIC_ID":
		*e = RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod: %v", v)
	}
}

// RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus - Final status of the KYC check.
// * IN_PROGRESS - KYC check is in progress
// * PASSED - KYC check passed
// * FAILED - KYC check failed
type RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus string

const (
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatusInProgress RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus = "IN_PROGRESS"
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatusPassed     RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus = "PASSED"
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatusFailed     RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus = "FAILED"
)

func (e RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus) ToPointer() *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus {
	return &e
}

func (e *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus: %v", v)
	}
}

// RetrieveUserCheckUserCheckUserCheckKnowYourCustomer - The KYC (Know your customer) check is completed by the client sharing the valid and relevant KYC data for the user.
type RetrieveUserCheckUserCheckUserCheckKnowYourCustomer struct {
	// Completion date and time of the KYC check. Must not be older than 24 months.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress `json:"confirmed_address,omitempty"`
	// Download link for the KYC evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// Expiration date of the document used in KYC process in YYYY-MM-DD format.
	DocumentExpirationDate types.Date `json:"document_expiration_date"`
	// The type of document used in the KYC process.
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	// * RESIDENCE_PERMIT - Residence Permit
	DocumentType RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType `json:"document_type"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Marks this check as a KYC refresh/update as opposed to an initial record.
	KycUpdate *bool `json:"kyc_update,omitempty"`
	// Method used for AML compliant KYC process
	// * VIDEO_ID - Video identification
	// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
	// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
	Method RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod `json:"method"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationality string `json:"nationality"`
	// Provider that was used to perform the KYC check.
	Provider string `json:"provider"`
	// Final status of the KYC check.
	// * IN_PROGRESS - KYC check is in progress
	// * PASSED - KYC check passed
	// * FAILED - KYC check failed
	Status RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus `json:"status"`
	// The type of check must be “KYC”.
	Type *string `default:"KYC" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (r RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetConfirmedAddress() *RetrieveUserCheckUserCheckUserCheckKnowYourCustomerAddress {
	if o == nil {
		return nil
	}
	return o.ConfirmedAddress
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetDocumentExpirationDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DocumentExpirationDate
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetDocumentType() RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType {
	if o == nil {
		return RetrieveUserCheckUserCheckUserCheckKnowYourCustomerDocumentType("")
	}
	return o.DocumentType
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetKycUpdate() *bool {
	if o == nil {
		return nil
	}
	return o.KycUpdate
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetMethod() RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod {
	if o == nil {
		return RetrieveUserCheckUserCheckUserCheckKnowYourCustomerMethod("")
	}
	return o.Method
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetNationality() string {
	if o == nil {
		return ""
	}
	return o.Nationality
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetProvider() string {
	if o == nil {
		return ""
	}
	return o.Provider
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetStatus() RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus {
	if o == nil {
		return RetrieveUserCheckUserCheckUserCheckKnowYourCustomerStatus("")
	}
	return o.Status
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type RetrieveUserCheckUserCheckType string

const (
	RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckKnowYourCustomer RetrieveUserCheckUserCheckType = "retrieve_user_check_User Check_User Check - Know your customer"
	RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckProofOfResidency RetrieveUserCheckUserCheckType = "retrieve_user_check_User Check_User Check - Proof of Residency"
	RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckInstrumentFit    RetrieveUserCheckUserCheckType = "retrieve_user_check_User Check_User Check - Instrument fit"
	RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckCompliance       RetrieveUserCheckUserCheckType = "retrieve_user_check_User Check_User Check - Compliance"
)

type RetrieveUserCheckUserCheck struct {
	RetrieveUserCheckUserCheckUserCheckKnowYourCustomer *RetrieveUserCheckUserCheckUserCheckKnowYourCustomer
	RetrieveUserCheckUserCheckUserCheckProofOfResidency *RetrieveUserCheckUserCheckUserCheckProofOfResidency
	RetrieveUserCheckUserCheckUserCheckInstrumentFit    *RetrieveUserCheckUserCheckUserCheckInstrumentFit
	RetrieveUserCheckUserCheckUserCheckCompliance       *RetrieveUserCheckUserCheckUserCheckCompliance

	Type RetrieveUserCheckUserCheckType
}

func CreateRetrieveUserCheckUserCheckRetrieveUserCheckUserCheckUserCheckKnowYourCustomer(retrieveUserCheckUserCheckUserCheckKnowYourCustomer RetrieveUserCheckUserCheckUserCheckKnowYourCustomer) RetrieveUserCheckUserCheck {
	typ := RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckKnowYourCustomer

	return RetrieveUserCheckUserCheck{
		RetrieveUserCheckUserCheckUserCheckKnowYourCustomer: &retrieveUserCheckUserCheckUserCheckKnowYourCustomer,
		Type: typ,
	}
}

func CreateRetrieveUserCheckUserCheckRetrieveUserCheckUserCheckUserCheckProofOfResidency(retrieveUserCheckUserCheckUserCheckProofOfResidency RetrieveUserCheckUserCheckUserCheckProofOfResidency) RetrieveUserCheckUserCheck {
	typ := RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckProofOfResidency

	return RetrieveUserCheckUserCheck{
		RetrieveUserCheckUserCheckUserCheckProofOfResidency: &retrieveUserCheckUserCheckUserCheckProofOfResidency,
		Type: typ,
	}
}

func CreateRetrieveUserCheckUserCheckRetrieveUserCheckUserCheckUserCheckInstrumentFit(retrieveUserCheckUserCheckUserCheckInstrumentFit RetrieveUserCheckUserCheckUserCheckInstrumentFit) RetrieveUserCheckUserCheck {
	typ := RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckInstrumentFit

	return RetrieveUserCheckUserCheck{
		RetrieveUserCheckUserCheckUserCheckInstrumentFit: &retrieveUserCheckUserCheckUserCheckInstrumentFit,
		Type: typ,
	}
}

func CreateRetrieveUserCheckUserCheckRetrieveUserCheckUserCheckUserCheckCompliance(retrieveUserCheckUserCheckUserCheckCompliance RetrieveUserCheckUserCheckUserCheckCompliance) RetrieveUserCheckUserCheck {
	typ := RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckCompliance

	return RetrieveUserCheckUserCheck{
		RetrieveUserCheckUserCheckUserCheckCompliance: &retrieveUserCheckUserCheckUserCheckCompliance,
		Type: typ,
	}
}

func (u *RetrieveUserCheckUserCheck) UnmarshalJSON(data []byte) error {

	retrieveUserCheckUserCheckUserCheckCompliance := new(RetrieveUserCheckUserCheckUserCheckCompliance)
	if err := utils.UnmarshalJSON(data, &retrieveUserCheckUserCheckUserCheckCompliance, "", true, true); err == nil {
		u.RetrieveUserCheckUserCheckUserCheckCompliance = retrieveUserCheckUserCheckUserCheckCompliance
		u.Type = RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckCompliance
		return nil
	}

	retrieveUserCheckUserCheckUserCheckInstrumentFit := new(RetrieveUserCheckUserCheckUserCheckInstrumentFit)
	if err := utils.UnmarshalJSON(data, &retrieveUserCheckUserCheckUserCheckInstrumentFit, "", true, true); err == nil {
		u.RetrieveUserCheckUserCheckUserCheckInstrumentFit = retrieveUserCheckUserCheckUserCheckInstrumentFit
		u.Type = RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckInstrumentFit
		return nil
	}

	retrieveUserCheckUserCheckUserCheckProofOfResidency := new(RetrieveUserCheckUserCheckUserCheckProofOfResidency)
	if err := utils.UnmarshalJSON(data, &retrieveUserCheckUserCheckUserCheckProofOfResidency, "", true, true); err == nil {
		u.RetrieveUserCheckUserCheckUserCheckProofOfResidency = retrieveUserCheckUserCheckUserCheckProofOfResidency
		u.Type = RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckProofOfResidency
		return nil
	}

	retrieveUserCheckUserCheckUserCheckKnowYourCustomer := new(RetrieveUserCheckUserCheckUserCheckKnowYourCustomer)
	if err := utils.UnmarshalJSON(data, &retrieveUserCheckUserCheckUserCheckKnowYourCustomer, "", true, true); err == nil {
		u.RetrieveUserCheckUserCheckUserCheckKnowYourCustomer = retrieveUserCheckUserCheckUserCheckKnowYourCustomer
		u.Type = RetrieveUserCheckUserCheckTypeRetrieveUserCheckUserCheckUserCheckKnowYourCustomer
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RetrieveUserCheckUserCheck) MarshalJSON() ([]byte, error) {
	if u.RetrieveUserCheckUserCheckUserCheckKnowYourCustomer != nil {
		return utils.MarshalJSON(u.RetrieveUserCheckUserCheckUserCheckKnowYourCustomer, "", true)
	}

	if u.RetrieveUserCheckUserCheckUserCheckProofOfResidency != nil {
		return utils.MarshalJSON(u.RetrieveUserCheckUserCheckUserCheckProofOfResidency, "", true)
	}

	if u.RetrieveUserCheckUserCheckUserCheckInstrumentFit != nil {
		return utils.MarshalJSON(u.RetrieveUserCheckUserCheckUserCheckInstrumentFit, "", true)
	}

	if u.RetrieveUserCheckUserCheckUserCheckCompliance != nil {
		return utils.MarshalJSON(u.RetrieveUserCheckUserCheckUserCheckCompliance, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RetrieveUserCheckResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	UserCheck *RetrieveUserCheckUserCheck
}

func (o *RetrieveUserCheckResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveUserCheckResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *RetrieveUserCheckResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveUserCheckResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RetrieveUserCheckResponse) GetUserCheck() *RetrieveUserCheckUserCheck {
	if o == nil {
		return nil
	}
	return o.UserCheck
}
