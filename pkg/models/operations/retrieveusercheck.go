// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveUserCheckSecurity struct {
	OauthClientCredentials string `security:"scheme,type=oauth2,name=Authorization"`
}

func (o *RetrieveUserCheckSecurity) GetOauthClientCredentials() string {
	if o == nil {
		return ""
	}
	return o.OauthClientCredentials
}

type RetrieveUserCheckRequest struct {
	CheckID string `pathParam:"style=simple,explode=false,name=check_id"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (r RetrieveUserCheckRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserCheckRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserCheckRequest) GetCheckID() string {
	if o == nil {
		return ""
	}
	return o.CheckID
}

func (o *RetrieveUserCheckRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveUserCheckRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveUserCheckRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveUserCheckRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *RetrieveUserCheckRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// RetrieveUserCheckUsersResponse200Status - Final status of the COMPLIANCE check.
// * IN_PROGRESS - Compliance check is in progress
// * PASSED - Compliance check passed
// * FAILED - Compliance check failed
type RetrieveUserCheckUsersResponse200Status string

const (
	RetrieveUserCheckUsersResponse200StatusInProgress RetrieveUserCheckUsersResponse200Status = "IN_PROGRESS"
	RetrieveUserCheckUsersResponse200StatusPassed     RetrieveUserCheckUsersResponse200Status = "PASSED"
	RetrieveUserCheckUsersResponse200StatusFailed     RetrieveUserCheckUsersResponse200Status = "FAILED"
)

func (e RetrieveUserCheckUsersResponse200Status) ToPointer() *RetrieveUserCheckUsersResponse200Status {
	return &e
}

func (e *RetrieveUserCheckUsersResponse200Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = RetrieveUserCheckUsersResponse200Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUsersResponse200Status: %v", v)
	}
}

// UserCheckCompliance - Compliance check
type UserCheckCompliance struct {
	// Completion date and time of the COMPLIANCE check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Final status of the COMPLIANCE check.
	// * IN_PROGRESS - Compliance check is in progress
	// * PASSED - Compliance check passed
	// * FAILED - Compliance check failed
	Status *RetrieveUserCheckUsersResponse200Status `json:"status,omitempty"`
	// The type of check must be COMPLIANCE.
	Type *string `default:"COMPLIANCE" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (u UserCheckCompliance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserCheckCompliance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserCheckCompliance) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *UserCheckCompliance) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserCheckCompliance) GetStatus() *RetrieveUserCheckUsersResponse200Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UserCheckCompliance) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UserCheckCompliance) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type RetrieveUserCheckInstrumentSuitability struct {
	// Did the user go through a suitability assessment and the outcome indicated suitability.
	Suitability bool `json:"suitability"`
}

func (o *RetrieveUserCheckInstrumentSuitability) GetSuitability() bool {
	if o == nil {
		return false
	}
	return o.Suitability
}

// RetrieveUserCheckUsersResponseStatus - Final status of the instrument fit check.
// * IN_PROGRESS - Instrument fit check is in progress
// * PASSED - Instrument fit check passed
// * FAILED - Instrument fit check failed
type RetrieveUserCheckUsersResponseStatus string

const (
	RetrieveUserCheckUsersResponseStatusInProgress RetrieveUserCheckUsersResponseStatus = "IN_PROGRESS"
	RetrieveUserCheckUsersResponseStatusPassed     RetrieveUserCheckUsersResponseStatus = "PASSED"
	RetrieveUserCheckUsersResponseStatusFailed     RetrieveUserCheckUsersResponseStatus = "FAILED"
)

func (e RetrieveUserCheckUsersResponseStatus) ToPointer() *RetrieveUserCheckUsersResponseStatus {
	return &e
}

func (e *RetrieveUserCheckUsersResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = RetrieveUserCheckUsersResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUsersResponseStatus: %v", v)
	}
}

// UserCheckInstrumentFit - Instrument fit check is completed by the client providing the user's answers to the instrument appropriateness or suitability questionnaire.
type UserCheckInstrumentFit struct {
	// Completion date and time of the instrument fit check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// User Check unique identifier.
	ID                    string                                 `json:"id"`
	InstrumentSuitability RetrieveUserCheckInstrumentSuitability `json:"instrument_suitability"`
	// Final status of the instrument fit check.
	// * IN_PROGRESS - Instrument fit check is in progress
	// * PASSED - Instrument fit check passed
	// * FAILED - Instrument fit check failed
	Status RetrieveUserCheckUsersResponseStatus `json:"status"`
	// The type of check must be INSTRUMENT_FIT.
	Type *string `default:"INSTRUMENT_FIT" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (u UserCheckInstrumentFit) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserCheckInstrumentFit) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserCheckInstrumentFit) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *UserCheckInstrumentFit) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserCheckInstrumentFit) GetInstrumentSuitability() RetrieveUserCheckInstrumentSuitability {
	if o == nil {
		return RetrieveUserCheckInstrumentSuitability{}
	}
	return o.InstrumentSuitability
}

func (o *UserCheckInstrumentFit) GetStatus() RetrieveUserCheckUsersResponseStatus {
	if o == nil {
		return RetrieveUserCheckUsersResponseStatus("")
	}
	return o.Status
}

func (o *UserCheckInstrumentFit) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UserCheckInstrumentFit) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// RetrieveUserCheckUsersAddress - Address. Must not be a P.O. box or c/o address.
type RetrieveUserCheckUsersAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserCheckUsersAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserCheckUsersAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserCheckUsersAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserCheckUsersAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserCheckUsersAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserCheckUsersAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// RetrieveUserCheckUsersDocumentType - The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
// * UTILITY_BILL -
// * TELEPHONE_BILL -
// * INTERNET_BILL -
// * BANK_STATEMENT -
// * REGISTRATION_CERT -
// * RESIDENCE_PERMIT -
// * ID_CARD -
type RetrieveUserCheckUsersDocumentType string

const (
	RetrieveUserCheckUsersDocumentTypeUtilityBill      RetrieveUserCheckUsersDocumentType = "UTILITY_BILL"
	RetrieveUserCheckUsersDocumentTypeTelephoneBill    RetrieveUserCheckUsersDocumentType = "TELEPHONE_BILL"
	RetrieveUserCheckUsersDocumentTypeInternetBill     RetrieveUserCheckUsersDocumentType = "INTERNET_BILL"
	RetrieveUserCheckUsersDocumentTypeBankStatement    RetrieveUserCheckUsersDocumentType = "BANK_STATEMENT"
	RetrieveUserCheckUsersDocumentTypeRegistrationCert RetrieveUserCheckUsersDocumentType = "REGISTRATION_CERT"
	RetrieveUserCheckUsersDocumentTypeResidencePermit  RetrieveUserCheckUsersDocumentType = "RESIDENCE_PERMIT"
	RetrieveUserCheckUsersDocumentTypeIDCard           RetrieveUserCheckUsersDocumentType = "ID_CARD"
)

func (e RetrieveUserCheckUsersDocumentType) ToPointer() *RetrieveUserCheckUsersDocumentType {
	return &e
}

func (e *RetrieveUserCheckUsersDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTILITY_BILL":
		fallthrough
	case "TELEPHONE_BILL":
		fallthrough
	case "INTERNET_BILL":
		fallthrough
	case "BANK_STATEMENT":
		fallthrough
	case "REGISTRATION_CERT":
		fallthrough
	case "RESIDENCE_PERMIT":
		fallthrough
	case "ID_CARD":
		*e = RetrieveUserCheckUsersDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUsersDocumentType: %v", v)
	}
}

// RetrieveUserCheckUsersStatus - Final status of the PoR check.
// * IN_PROGRESS -
// * PASSED -
// * FAILED -
type RetrieveUserCheckUsersStatus string

const (
	RetrieveUserCheckUsersStatusInProgress RetrieveUserCheckUsersStatus = "IN_PROGRESS"
	RetrieveUserCheckUsersStatusPassed     RetrieveUserCheckUsersStatus = "PASSED"
	RetrieveUserCheckUsersStatusFailed     RetrieveUserCheckUsersStatus = "FAILED"
)

func (e RetrieveUserCheckUsersStatus) ToPointer() *RetrieveUserCheckUsersStatus {
	return &e
}

func (e *RetrieveUserCheckUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = RetrieveUserCheckUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckUsersStatus: %v", v)
	}
}

// UserCheckProofOfResidency - The PoR (Proof of residency) check is completed by the client sharing a valid PoR document, if not fulfilled by the KYC check.
type UserCheckProofOfResidency struct {
	// Completion date and time of the PoR check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress RetrieveUserCheckUsersAddress `json:"confirmed_address"`
	// Download link for the PoR evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
	// * UTILITY_BILL -
	// * TELEPHONE_BILL -
	// * INTERNET_BILL -
	// * BANK_STATEMENT -
	// * REGISTRATION_CERT -
	// * RESIDENCE_PERMIT -
	// * ID_CARD -
	DocumentType RetrieveUserCheckUsersDocumentType `json:"document_type"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Issuance date in YYYY-MM-DD format.
	IssuanceDate types.Date `json:"issuance_date"`
	// Final status of the PoR check.
	// * IN_PROGRESS -
	// * PASSED -
	// * FAILED -
	Status RetrieveUserCheckUsersStatus `json:"status"`
	// The type of check must be POR.
	Type *string `default:"POR" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (u UserCheckProofOfResidency) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserCheckProofOfResidency) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserCheckProofOfResidency) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *UserCheckProofOfResidency) GetConfirmedAddress() RetrieveUserCheckUsersAddress {
	if o == nil {
		return RetrieveUserCheckUsersAddress{}
	}
	return o.ConfirmedAddress
}

func (o *UserCheckProofOfResidency) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *UserCheckProofOfResidency) GetDocumentType() RetrieveUserCheckUsersDocumentType {
	if o == nil {
		return RetrieveUserCheckUsersDocumentType("")
	}
	return o.DocumentType
}

func (o *UserCheckProofOfResidency) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserCheckProofOfResidency) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *UserCheckProofOfResidency) GetStatus() RetrieveUserCheckUsersStatus {
	if o == nil {
		return RetrieveUserCheckUsersStatus("")
	}
	return o.Status
}

func (o *UserCheckProofOfResidency) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UserCheckProofOfResidency) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// RetrieveUserCheckAddress - Address. Must not be a P.O. box or c/o address.
type RetrieveUserCheckAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserCheckAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserCheckAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserCheckAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserCheckAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserCheckAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserCheckAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// RetrieveUserCheckDocumentType - The type of document used in the KYC process.
// * PASSPORT - Passport
// * ID_CARD - National Identification document
// * RESIDENCE_PERMIT - Residence Permit
type RetrieveUserCheckDocumentType string

const (
	RetrieveUserCheckDocumentTypePassport        RetrieveUserCheckDocumentType = "PASSPORT"
	RetrieveUserCheckDocumentTypeIDCard          RetrieveUserCheckDocumentType = "ID_CARD"
	RetrieveUserCheckDocumentTypeResidencePermit RetrieveUserCheckDocumentType = "RESIDENCE_PERMIT"
)

func (e RetrieveUserCheckDocumentType) ToPointer() *RetrieveUserCheckDocumentType {
	return &e
}

func (e *RetrieveUserCheckDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		fallthrough
	case "RESIDENCE_PERMIT":
		*e = RetrieveUserCheckDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckDocumentType: %v", v)
	}
}

// RetrieveUserCheckMethod - Method used for AML compliant KYC process
// * VIDEO_ID - Video identification
// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
type RetrieveUserCheckMethod string

const (
	RetrieveUserCheckMethodVideoID      RetrieveUserCheckMethod = "VIDEO_ID"
	RetrieveUserCheckMethodInPersonID   RetrieveUserCheckMethod = "IN_PERSON_ID"
	RetrieveUserCheckMethodElectronicID RetrieveUserCheckMethod = "ELECTRONIC_ID"
)

func (e RetrieveUserCheckMethod) ToPointer() *RetrieveUserCheckMethod {
	return &e
}

func (e *RetrieveUserCheckMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIDEO_ID":
		fallthrough
	case "IN_PERSON_ID":
		fallthrough
	case "ELECTRONIC_ID":
		*e = RetrieveUserCheckMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckMethod: %v", v)
	}
}

// RetrieveUserCheckStatus - Final status of the KYC check.
// * IN_PROGRESS - KYC check is in progress
// * PASSED - KYC check passed
// * FAILED - KYC check failed
type RetrieveUserCheckStatus string

const (
	RetrieveUserCheckStatusInProgress RetrieveUserCheckStatus = "IN_PROGRESS"
	RetrieveUserCheckStatusPassed     RetrieveUserCheckStatus = "PASSED"
	RetrieveUserCheckStatusFailed     RetrieveUserCheckStatus = "FAILED"
)

func (e RetrieveUserCheckStatus) ToPointer() *RetrieveUserCheckStatus {
	return &e
}

func (e *RetrieveUserCheckStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = RetrieveUserCheckStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserCheckStatus: %v", v)
	}
}

// UserCheckKnowYourCustomer - The KYC (Know your customer) check is completed by the client sharing the valid and relevant KYC data for the user.
type UserCheckKnowYourCustomer struct {
	// Completion date and time of the KYC check. Must not be older than 24 months.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress *RetrieveUserCheckAddress `json:"confirmed_address,omitempty"`
	// Download link for the KYC evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// Expiration date of the document used in KYC process in YYYY-MM-DD format.
	DocumentExpirationDate types.Date `json:"document_expiration_date"`
	// The type of document used in the KYC process.
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	// * RESIDENCE_PERMIT - Residence Permit
	DocumentType RetrieveUserCheckDocumentType `json:"document_type"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Marks this check as a KYC refresh/update as opposed to an initial record.
	KycUpdate *bool `json:"kyc_update,omitempty"`
	// Method used for AML compliant KYC process
	// * VIDEO_ID - Video identification
	// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
	// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
	Method RetrieveUserCheckMethod `json:"method"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationality string `json:"nationality"`
	// Provider that was used to perform the KYC check.
	Provider string `json:"provider"`
	// Final status of the KYC check.
	// * IN_PROGRESS - KYC check is in progress
	// * PASSED - KYC check passed
	// * FAILED - KYC check failed
	Status RetrieveUserCheckStatus `json:"status"`
	// The type of check must be “KYC”.
	Type *string `default:"KYC" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (u UserCheckKnowYourCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserCheckKnowYourCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserCheckKnowYourCustomer) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *UserCheckKnowYourCustomer) GetConfirmedAddress() *RetrieveUserCheckAddress {
	if o == nil {
		return nil
	}
	return o.ConfirmedAddress
}

func (o *UserCheckKnowYourCustomer) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *UserCheckKnowYourCustomer) GetDocumentExpirationDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DocumentExpirationDate
}

func (o *UserCheckKnowYourCustomer) GetDocumentType() RetrieveUserCheckDocumentType {
	if o == nil {
		return RetrieveUserCheckDocumentType("")
	}
	return o.DocumentType
}

func (o *UserCheckKnowYourCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserCheckKnowYourCustomer) GetKycUpdate() *bool {
	if o == nil {
		return nil
	}
	return o.KycUpdate
}

func (o *UserCheckKnowYourCustomer) GetMethod() RetrieveUserCheckMethod {
	if o == nil {
		return RetrieveUserCheckMethod("")
	}
	return o.Method
}

func (o *UserCheckKnowYourCustomer) GetNationality() string {
	if o == nil {
		return ""
	}
	return o.Nationality
}

func (o *UserCheckKnowYourCustomer) GetProvider() string {
	if o == nil {
		return ""
	}
	return o.Provider
}

func (o *UserCheckKnowYourCustomer) GetStatus() RetrieveUserCheckStatus {
	if o == nil {
		return RetrieveUserCheckStatus("")
	}
	return o.Status
}

func (o *UserCheckKnowYourCustomer) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UserCheckKnowYourCustomer) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type RetrieveUserCheckUserCheckType string

const (
	RetrieveUserCheckUserCheckTypeUserCheckKnowYourCustomer RetrieveUserCheckUserCheckType = "User Check - Know your customer"
	RetrieveUserCheckUserCheckTypeUserCheckProofOfResidency RetrieveUserCheckUserCheckType = "User Check - Proof of Residency"
	RetrieveUserCheckUserCheckTypeUserCheckInstrumentFit    RetrieveUserCheckUserCheckType = "User Check - Instrument fit"
	RetrieveUserCheckUserCheckTypeUserCheckCompliance       RetrieveUserCheckUserCheckType = "User Check - Compliance"
)

// RetrieveUserCheckUserCheck - OK
type RetrieveUserCheckUserCheck struct {
	UserCheckKnowYourCustomer *UserCheckKnowYourCustomer
	UserCheckProofOfResidency *UserCheckProofOfResidency
	UserCheckInstrumentFit    *UserCheckInstrumentFit
	UserCheckCompliance       *UserCheckCompliance

	Type RetrieveUserCheckUserCheckType
}

func CreateRetrieveUserCheckUserCheckUserCheckKnowYourCustomer(userCheckKnowYourCustomer UserCheckKnowYourCustomer) RetrieveUserCheckUserCheck {
	typ := RetrieveUserCheckUserCheckTypeUserCheckKnowYourCustomer

	return RetrieveUserCheckUserCheck{
		UserCheckKnowYourCustomer: &userCheckKnowYourCustomer,
		Type:                      typ,
	}
}

func CreateRetrieveUserCheckUserCheckUserCheckProofOfResidency(userCheckProofOfResidency UserCheckProofOfResidency) RetrieveUserCheckUserCheck {
	typ := RetrieveUserCheckUserCheckTypeUserCheckProofOfResidency

	return RetrieveUserCheckUserCheck{
		UserCheckProofOfResidency: &userCheckProofOfResidency,
		Type:                      typ,
	}
}

func CreateRetrieveUserCheckUserCheckUserCheckInstrumentFit(userCheckInstrumentFit UserCheckInstrumentFit) RetrieveUserCheckUserCheck {
	typ := RetrieveUserCheckUserCheckTypeUserCheckInstrumentFit

	return RetrieveUserCheckUserCheck{
		UserCheckInstrumentFit: &userCheckInstrumentFit,
		Type:                   typ,
	}
}

func CreateRetrieveUserCheckUserCheckUserCheckCompliance(userCheckCompliance UserCheckCompliance) RetrieveUserCheckUserCheck {
	typ := RetrieveUserCheckUserCheckTypeUserCheckCompliance

	return RetrieveUserCheckUserCheck{
		UserCheckCompliance: &userCheckCompliance,
		Type:                typ,
	}
}

func (u *RetrieveUserCheckUserCheck) UnmarshalJSON(data []byte) error {

	userCheckCompliance := UserCheckCompliance{}
	if err := utils.UnmarshalJSON(data, &userCheckCompliance, "", true, true); err == nil {
		u.UserCheckCompliance = &userCheckCompliance
		u.Type = RetrieveUserCheckUserCheckTypeUserCheckCompliance
		return nil
	}

	userCheckInstrumentFit := UserCheckInstrumentFit{}
	if err := utils.UnmarshalJSON(data, &userCheckInstrumentFit, "", true, true); err == nil {
		u.UserCheckInstrumentFit = &userCheckInstrumentFit
		u.Type = RetrieveUserCheckUserCheckTypeUserCheckInstrumentFit
		return nil
	}

	userCheckProofOfResidency := UserCheckProofOfResidency{}
	if err := utils.UnmarshalJSON(data, &userCheckProofOfResidency, "", true, true); err == nil {
		u.UserCheckProofOfResidency = &userCheckProofOfResidency
		u.Type = RetrieveUserCheckUserCheckTypeUserCheckProofOfResidency
		return nil
	}

	userCheckKnowYourCustomer := UserCheckKnowYourCustomer{}
	if err := utils.UnmarshalJSON(data, &userCheckKnowYourCustomer, "", true, true); err == nil {
		u.UserCheckKnowYourCustomer = &userCheckKnowYourCustomer
		u.Type = RetrieveUserCheckUserCheckTypeUserCheckKnowYourCustomer
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RetrieveUserCheckUserCheck) MarshalJSON() ([]byte, error) {
	if u.UserCheckKnowYourCustomer != nil {
		return utils.MarshalJSON(u.UserCheckKnowYourCustomer, "", true)
	}

	if u.UserCheckProofOfResidency != nil {
		return utils.MarshalJSON(u.UserCheckProofOfResidency, "", true)
	}

	if u.UserCheckInstrumentFit != nil {
		return utils.MarshalJSON(u.UserCheckInstrumentFit, "", true)
	}

	if u.UserCheckCompliance != nil {
		return utils.MarshalJSON(u.UserCheckCompliance, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RetrieveUserCheckResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	UserCheck *RetrieveUserCheckUserCheck
}

func (o *RetrieveUserCheckResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveUserCheckResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *RetrieveUserCheckResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveUserCheckResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RetrieveUserCheckResponse) GetUserCheck() *RetrieveUserCheckUserCheck {
	if o == nil {
		return nil
	}
	return o.UserCheck
}
