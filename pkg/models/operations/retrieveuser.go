// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveUserRequest struct {
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (r RetrieveUserRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveUserRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveUserRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveUserRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *RetrieveUserRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// RetrieveUserUsersAddress - Address. Must not be a P.O. box or c/o address.
type RetrieveUserUsersAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserUsersAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserUsersAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserUsersAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserUsersAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserUsersAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserUsersAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type RetrieveUserDataPrivacyAndSharingAgreement struct {
	// Timestamp at which the user consented to the data sharing agreement. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (r RetrieveUserDataPrivacyAndSharingAgreement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserDataPrivacyAndSharingAgreement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserDataPrivacyAndSharingAgreement) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *RetrieveUserDataPrivacyAndSharingAgreement) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

type RetrieveUserFatca struct {
	// Timestamp at which the user confirmed their FATCA status. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// The userâ€™s FATCA status is true if the user is subject to paying taxes in the US, otherwise it can be set to false.
	Status bool `json:"status"`
}

func (r RetrieveUserFatca) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserFatca) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserFatca) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *RetrieveUserFatca) GetStatus() bool {
	if o == nil {
		return false
	}
	return o.Status
}

// RetrieveUserUsersResponseAddress - Address. Must not be a P.O. box or c/o address.
type RetrieveUserUsersResponseAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserUsersResponseAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserUsersResponseAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserUsersResponseAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserUsersResponseAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserUsersResponseAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserUsersResponseAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type RetrieveUserUsersPostalAddressType string

const (
	RetrieveUserUsersPostalAddressTypeRetrieveUserUsersResponseAddress RetrieveUserUsersPostalAddressType = "retrieve_user_Users_response_Address"
)

type RetrieveUserUsersPostalAddress struct {
	RetrieveUserUsersResponseAddress *RetrieveUserUsersResponseAddress

	Type RetrieveUserUsersPostalAddressType
}

func CreateRetrieveUserUsersPostalAddressRetrieveUserUsersResponseAddress(retrieveUserUsersResponseAddress RetrieveUserUsersResponseAddress) RetrieveUserUsersPostalAddress {
	typ := RetrieveUserUsersPostalAddressTypeRetrieveUserUsersResponseAddress

	return RetrieveUserUsersPostalAddress{
		RetrieveUserUsersResponseAddress: &retrieveUserUsersResponseAddress,
		Type:                             typ,
	}
}

func (u *RetrieveUserUsersPostalAddress) UnmarshalJSON(data []byte) error {

	retrieveUserUsersResponseAddress := RetrieveUserUsersResponseAddress{}
	if err := utils.UnmarshalJSON(data, &retrieveUserUsersResponseAddress, "", true, true); err == nil {
		u.RetrieveUserUsersResponseAddress = &retrieveUserUsersResponseAddress
		u.Type = RetrieveUserUsersPostalAddressTypeRetrieveUserUsersResponseAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RetrieveUserUsersPostalAddress) MarshalJSON() ([]byte, error) {
	if u.RetrieveUserUsersResponseAddress != nil {
		return utils.MarshalJSON(u.RetrieveUserUsersResponseAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// RetrieveUserUsersSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type RetrieveUserUsersSalutation string

const (
	RetrieveUserUsersSalutationUnknown                 RetrieveUserUsersSalutation = ""
	RetrieveUserUsersSalutationSalutationMale          RetrieveUserUsersSalutation = "SALUTATION_MALE"
	RetrieveUserUsersSalutationSalutationFemale        RetrieveUserUsersSalutation = "SALUTATION_FEMALE"
	RetrieveUserUsersSalutationSalutationFemaleMarried RetrieveUserUsersSalutation = "SALUTATION_FEMALE_MARRIED"
	RetrieveUserUsersSalutationSalutationDiverse       RetrieveUserUsersSalutation = "SALUTATION_DIVERSE"
)

func (e RetrieveUserUsersSalutation) ToPointer() *RetrieveUserUsersSalutation {
	return &e
}

func (e *RetrieveUserUsersSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = RetrieveUserUsersSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserUsersSalutation: %v", v)
	}
}

// RetrieveUserUsersStatus - Status of the user.
// * ACTIVE -
// * INACTIVE -
// * OFFBOARDING -
// * OFFBOARDED -
type RetrieveUserUsersStatus string

const (
	RetrieveUserUsersStatusActive      RetrieveUserUsersStatus = "ACTIVE"
	RetrieveUserUsersStatusInactive    RetrieveUserUsersStatus = "INACTIVE"
	RetrieveUserUsersStatusOffboarding RetrieveUserUsersStatus = "OFFBOARDING"
	RetrieveUserUsersStatusOffboarded  RetrieveUserUsersStatus = "OFFBOARDED"
)

func (e RetrieveUserUsersStatus) ToPointer() *RetrieveUserUsersStatus {
	return &e
}

func (e *RetrieveUserUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "OFFBOARDING":
		fallthrough
	case "OFFBOARDED":
		*e = RetrieveUserUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserUsersStatus: %v", v)
	}
}

type RetrieveUserTermsAndConditions struct {
	// Timestamp at which the user consented to the terms & conditions. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (r RetrieveUserTermsAndConditions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserTermsAndConditions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserTermsAndConditions) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *RetrieveUserTermsAndConditions) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

// RetrieveUserUsersTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type RetrieveUserUsersTitle string

const (
	RetrieveUserUsersTitleUnknown  RetrieveUserUsersTitle = ""
	RetrieveUserUsersTitleDr       RetrieveUserUsersTitle = "DR"
	RetrieveUserUsersTitleProf     RetrieveUserUsersTitle = "PROF"
	RetrieveUserUsersTitleProfDr   RetrieveUserUsersTitle = "PROF_DR"
	RetrieveUserUsersTitleDiplIng  RetrieveUserUsersTitle = "DIPL_ING"
	RetrieveUserUsersTitleMagister RetrieveUserUsersTitle = "MAGISTER"
)

func (e RetrieveUserUsersTitle) ToPointer() *RetrieveUserUsersTitle {
	return &e
}

func (e *RetrieveUserUsersTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = RetrieveUserUsersTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserUsersTitle: %v", v)
	}
}

type RetrieveUserUserTOL struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   RetrieveUserUsersAddress `json:"address"`
	BirthCity *string                  `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt                      time.Time                                   `json:"created_at"`
	DataPrivacyAndSharingAgreement *RetrieveUserDataPrivacyAndSharingAgreement `json:"data_privacy_and_sharing_agreement,omitempty"`
	// Email of the user. Must be a valid email address.
	Email *string            `json:"email,omitempty"`
	Fatca *RetrieveUserFatca `json:"fatca,omitempty"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// User unique identifier.
	ID string `json:"id"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// Phone number of the user. [Phone number E.164 format](https://en.wikipedia.org/wiki/E.164).
	PhoneNumber *string `json:"phone_number,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *RetrieveUserUsersPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *RetrieveUserUsersSalutation `default:"" json:"salutation"`
	// Status of the user.
	// * ACTIVE -
	// * INACTIVE -
	// * OFFBOARDING -
	// * OFFBOARDED -
	Status             RetrieveUserUsersStatus         `json:"status"`
	TermsAndConditions *RetrieveUserTermsAndConditions `json:"terms_and_conditions,omitempty"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *RetrieveUserUsersTitle `default:"" json:"title"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (r RetrieveUserUserTOL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserUserTOL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserUserTOL) GetAddress() RetrieveUserUsersAddress {
	if o == nil {
		return RetrieveUserUsersAddress{}
	}
	return o.Address
}

func (o *RetrieveUserUserTOL) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *RetrieveUserUserTOL) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *RetrieveUserUserTOL) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *RetrieveUserUserTOL) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *RetrieveUserUserTOL) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveUserUserTOL) GetDataPrivacyAndSharingAgreement() *RetrieveUserDataPrivacyAndSharingAgreement {
	if o == nil {
		return nil
	}
	return o.DataPrivacyAndSharingAgreement
}

func (o *RetrieveUserUserTOL) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *RetrieveUserUserTOL) GetFatca() *RetrieveUserFatca {
	if o == nil {
		return nil
	}
	return o.Fatca
}

func (o *RetrieveUserUserTOL) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *RetrieveUserUserTOL) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveUserUserTOL) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *RetrieveUserUserTOL) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *RetrieveUserUserTOL) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *RetrieveUserUserTOL) GetPostalAddress() *RetrieveUserUsersPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *RetrieveUserUserTOL) GetSalutation() *RetrieveUserUsersSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *RetrieveUserUserTOL) GetStatus() RetrieveUserUsersStatus {
	if o == nil {
		return RetrieveUserUsersStatus("")
	}
	return o.Status
}

func (o *RetrieveUserUserTOL) GetTermsAndConditions() *RetrieveUserTermsAndConditions {
	if o == nil {
		return nil
	}
	return o.TermsAndConditions
}

func (o *RetrieveUserUserTOL) GetTitle() *RetrieveUserUsersTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *RetrieveUserUserTOL) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// RetrieveUserAddress - Address. Must not be a P.O. box or c/o address.
type RetrieveUserAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// RetrieveUserUsersResponse200Address - Address. Must not be a P.O. box or c/o address.
type RetrieveUserUsersResponse200Address struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserUsersResponse200Address) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserUsersResponse200Address) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserUsersResponse200Address) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserUsersResponse200Address) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserUsersResponse200Address) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserUsersResponse200Address) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type RetrieveUserPostalAddressType string

const (
	RetrieveUserPostalAddressTypeRetrieveUserUsersResponse200Address RetrieveUserPostalAddressType = "retrieve_user_Users_response_200_Address"
)

type RetrieveUserPostalAddress struct {
	RetrieveUserUsersResponse200Address *RetrieveUserUsersResponse200Address

	Type RetrieveUserPostalAddressType
}

func CreateRetrieveUserPostalAddressRetrieveUserUsersResponse200Address(retrieveUserUsersResponse200Address RetrieveUserUsersResponse200Address) RetrieveUserPostalAddress {
	typ := RetrieveUserPostalAddressTypeRetrieveUserUsersResponse200Address

	return RetrieveUserPostalAddress{
		RetrieveUserUsersResponse200Address: &retrieveUserUsersResponse200Address,
		Type:                                typ,
	}
}

func (u *RetrieveUserPostalAddress) UnmarshalJSON(data []byte) error {

	retrieveUserUsersResponse200Address := RetrieveUserUsersResponse200Address{}
	if err := utils.UnmarshalJSON(data, &retrieveUserUsersResponse200Address, "", true, true); err == nil {
		u.RetrieveUserUsersResponse200Address = &retrieveUserUsersResponse200Address
		u.Type = RetrieveUserPostalAddressTypeRetrieveUserUsersResponse200Address
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RetrieveUserPostalAddress) MarshalJSON() ([]byte, error) {
	if u.RetrieveUserUsersResponse200Address != nil {
		return utils.MarshalJSON(u.RetrieveUserUsersResponse200Address, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// RetrieveUserSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type RetrieveUserSalutation string

const (
	RetrieveUserSalutationUnknown                 RetrieveUserSalutation = ""
	RetrieveUserSalutationSalutationMale          RetrieveUserSalutation = "SALUTATION_MALE"
	RetrieveUserSalutationSalutationFemale        RetrieveUserSalutation = "SALUTATION_FEMALE"
	RetrieveUserSalutationSalutationFemaleMarried RetrieveUserSalutation = "SALUTATION_FEMALE_MARRIED"
	RetrieveUserSalutationSalutationDiverse       RetrieveUserSalutation = "SALUTATION_DIVERSE"
)

func (e RetrieveUserSalutation) ToPointer() *RetrieveUserSalutation {
	return &e
}

func (e *RetrieveUserSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = RetrieveUserSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserSalutation: %v", v)
	}
}

// RetrieveUserStatus - Status of the user.
// * ACTIVE -
// * INACTIVE -
// * OFFBOARDING -
// * OFFBOARDED -
type RetrieveUserStatus string

const (
	RetrieveUserStatusActive      RetrieveUserStatus = "ACTIVE"
	RetrieveUserStatusInactive    RetrieveUserStatus = "INACTIVE"
	RetrieveUserStatusOffboarding RetrieveUserStatus = "OFFBOARDING"
	RetrieveUserStatusOffboarded  RetrieveUserStatus = "OFFBOARDED"
)

func (e RetrieveUserStatus) ToPointer() *RetrieveUserStatus {
	return &e
}

func (e *RetrieveUserStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "OFFBOARDING":
		fallthrough
	case "OFFBOARDED":
		*e = RetrieveUserStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserStatus: %v", v)
	}
}

// RetrieveUserTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type RetrieveUserTitle string

const (
	RetrieveUserTitleUnknown  RetrieveUserTitle = ""
	RetrieveUserTitleDr       RetrieveUserTitle = "DR"
	RetrieveUserTitleProf     RetrieveUserTitle = "PROF"
	RetrieveUserTitleProfDr   RetrieveUserTitle = "PROF_DR"
	RetrieveUserTitleDiplIng  RetrieveUserTitle = "DIPL_ING"
	RetrieveUserTitleMagister RetrieveUserTitle = "MAGISTER"
)

func (e RetrieveUserTitle) ToPointer() *RetrieveUserTitle {
	return &e
}

func (e *RetrieveUserTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = RetrieveUserTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserTitle: %v", v)
	}
}

type RetrieveUserUserBYOL struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   RetrieveUserAddress `json:"address"`
	BirthCity *string             `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// User unique identifier.
	ID string `json:"id"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *RetrieveUserPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *RetrieveUserSalutation `default:"" json:"salutation"`
	// Status of the user.
	// * ACTIVE -
	// * INACTIVE -
	// * OFFBOARDING -
	// * OFFBOARDED -
	Status RetrieveUserStatus `json:"status"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *RetrieveUserTitle `default:"" json:"title"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (r RetrieveUserUserBYOL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserUserBYOL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserUserBYOL) GetAddress() RetrieveUserAddress {
	if o == nil {
		return RetrieveUserAddress{}
	}
	return o.Address
}

func (o *RetrieveUserUserBYOL) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *RetrieveUserUserBYOL) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *RetrieveUserUserBYOL) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *RetrieveUserUserBYOL) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *RetrieveUserUserBYOL) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveUserUserBYOL) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *RetrieveUserUserBYOL) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveUserUserBYOL) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *RetrieveUserUserBYOL) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *RetrieveUserUserBYOL) GetPostalAddress() *RetrieveUserPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *RetrieveUserUserBYOL) GetSalutation() *RetrieveUserSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *RetrieveUserUserBYOL) GetStatus() RetrieveUserStatus {
	if o == nil {
		return RetrieveUserStatus("")
	}
	return o.Status
}

func (o *RetrieveUserUserBYOL) GetTitle() *RetrieveUserTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *RetrieveUserUserBYOL) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type RetrieveUserUserGetResponseType string

const (
	RetrieveUserUserGetResponseTypeRetrieveUserUserBYOL RetrieveUserUserGetResponseType = "retrieve_user_User (BYOL)"
	RetrieveUserUserGetResponseTypeRetrieveUserUserTOL  RetrieveUserUserGetResponseType = "retrieve_user_User (TOL)"
)

type RetrieveUserUserGetResponse struct {
	RetrieveUserUserBYOL *RetrieveUserUserBYOL
	RetrieveUserUserTOL  *RetrieveUserUserTOL

	Type RetrieveUserUserGetResponseType
}

func CreateRetrieveUserUserGetResponseRetrieveUserUserBYOL(retrieveUserUserBYOL RetrieveUserUserBYOL) RetrieveUserUserGetResponse {
	typ := RetrieveUserUserGetResponseTypeRetrieveUserUserBYOL

	return RetrieveUserUserGetResponse{
		RetrieveUserUserBYOL: &retrieveUserUserBYOL,
		Type:                 typ,
	}
}

func CreateRetrieveUserUserGetResponseRetrieveUserUserTOL(retrieveUserUserTOL RetrieveUserUserTOL) RetrieveUserUserGetResponse {
	typ := RetrieveUserUserGetResponseTypeRetrieveUserUserTOL

	return RetrieveUserUserGetResponse{
		RetrieveUserUserTOL: &retrieveUserUserTOL,
		Type:                typ,
	}
}

func (u *RetrieveUserUserGetResponse) UnmarshalJSON(data []byte) error {

	retrieveUserUserBYOL := RetrieveUserUserBYOL{}
	if err := utils.UnmarshalJSON(data, &retrieveUserUserBYOL, "", true, true); err == nil {
		u.RetrieveUserUserBYOL = &retrieveUserUserBYOL
		u.Type = RetrieveUserUserGetResponseTypeRetrieveUserUserBYOL
		return nil
	}

	retrieveUserUserTOL := RetrieveUserUserTOL{}
	if err := utils.UnmarshalJSON(data, &retrieveUserUserTOL, "", true, true); err == nil {
		u.RetrieveUserUserTOL = &retrieveUserUserTOL
		u.Type = RetrieveUserUserGetResponseTypeRetrieveUserUserTOL
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RetrieveUserUserGetResponse) MarshalJSON() ([]byte, error) {
	if u.RetrieveUserUserBYOL != nil {
		return utils.MarshalJSON(u.RetrieveUserUserBYOL, "", true)
	}

	if u.RetrieveUserUserTOL != nil {
		return utils.MarshalJSON(u.RetrieveUserUserTOL, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RetrieveUserResponse struct {
	// OK
	TwoHundredApplicationJSONUserGetResponse *RetrieveUserUserGetResponse
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *RetrieveUserResponse) GetTwoHundredApplicationJSONUserGetResponse() *RetrieveUserUserGetResponse {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONUserGetResponse
}

func (o *RetrieveUserResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveUserResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *RetrieveUserResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveUserResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
