// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveUserRequest struct {
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (r RetrieveUserRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveUserRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveUserRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveUserRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *RetrieveUserRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// RetrieveUserUserGetResponseUserTOLAddress - Address. Must not be a P.O. box or c/o address.
type RetrieveUserUserGetResponseUserTOLAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserUserGetResponseUserTOLAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserUserGetResponseUserTOLAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserUserGetResponseUserTOLAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserUserGetResponseUserTOLAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserUserGetResponseUserTOLAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserUserGetResponseUserTOLAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type RetrieveUserUserGetResponseUserTOLDataPrivacyAndSharingAgreement struct {
	// Timestamp at which the user consented to the data sharing agreement. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (r RetrieveUserUserGetResponseUserTOLDataPrivacyAndSharingAgreement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserUserGetResponseUserTOLDataPrivacyAndSharingAgreement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserUserGetResponseUserTOLDataPrivacyAndSharingAgreement) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *RetrieveUserUserGetResponseUserTOLDataPrivacyAndSharingAgreement) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

type RetrieveUserUserGetResponseUserTOLFatca struct {
	// Timestamp at which the user confirmed their FATCA status. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// The userâ€™s FATCA status is true if the user is subject to paying taxes in the US, otherwise it can be set to false.
	Status bool `json:"status"`
}

func (r RetrieveUserUserGetResponseUserTOLFatca) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserUserGetResponseUserTOLFatca) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserUserGetResponseUserTOLFatca) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *RetrieveUserUserGetResponseUserTOLFatca) GetStatus() bool {
	if o == nil {
		return false
	}
	return o.Status
}

// RetrieveUserUserGetResponseUserTOLSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type RetrieveUserUserGetResponseUserTOLSalutation string

const (
	RetrieveUserUserGetResponseUserTOLSalutationUnknown                 RetrieveUserUserGetResponseUserTOLSalutation = ""
	RetrieveUserUserGetResponseUserTOLSalutationSalutationMale          RetrieveUserUserGetResponseUserTOLSalutation = "SALUTATION_MALE"
	RetrieveUserUserGetResponseUserTOLSalutationSalutationFemale        RetrieveUserUserGetResponseUserTOLSalutation = "SALUTATION_FEMALE"
	RetrieveUserUserGetResponseUserTOLSalutationSalutationFemaleMarried RetrieveUserUserGetResponseUserTOLSalutation = "SALUTATION_FEMALE_MARRIED"
	RetrieveUserUserGetResponseUserTOLSalutationSalutationDiverse       RetrieveUserUserGetResponseUserTOLSalutation = "SALUTATION_DIVERSE"
)

func (e RetrieveUserUserGetResponseUserTOLSalutation) ToPointer() *RetrieveUserUserGetResponseUserTOLSalutation {
	return &e
}

func (e *RetrieveUserUserGetResponseUserTOLSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = RetrieveUserUserGetResponseUserTOLSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserUserGetResponseUserTOLSalutation: %v", v)
	}
}

// RetrieveUserUserGetResponseUserTOLStatus - Status of the user.
// * ACTIVE -
// * INACTIVE -
// * OFFBOARDING -
// * OFFBOARDED -
type RetrieveUserUserGetResponseUserTOLStatus string

const (
	RetrieveUserUserGetResponseUserTOLStatusActive      RetrieveUserUserGetResponseUserTOLStatus = "ACTIVE"
	RetrieveUserUserGetResponseUserTOLStatusInactive    RetrieveUserUserGetResponseUserTOLStatus = "INACTIVE"
	RetrieveUserUserGetResponseUserTOLStatusOffboarding RetrieveUserUserGetResponseUserTOLStatus = "OFFBOARDING"
	RetrieveUserUserGetResponseUserTOLStatusOffboarded  RetrieveUserUserGetResponseUserTOLStatus = "OFFBOARDED"
)

func (e RetrieveUserUserGetResponseUserTOLStatus) ToPointer() *RetrieveUserUserGetResponseUserTOLStatus {
	return &e
}

func (e *RetrieveUserUserGetResponseUserTOLStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "OFFBOARDING":
		fallthrough
	case "OFFBOARDED":
		*e = RetrieveUserUserGetResponseUserTOLStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserUserGetResponseUserTOLStatus: %v", v)
	}
}

type RetrieveUserUserGetResponseUserTOLTermsAndConditions struct {
	// Timestamp at which the user consented to the terms & conditions. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (r RetrieveUserUserGetResponseUserTOLTermsAndConditions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserUserGetResponseUserTOLTermsAndConditions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserUserGetResponseUserTOLTermsAndConditions) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *RetrieveUserUserGetResponseUserTOLTermsAndConditions) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

// RetrieveUserUserGetResponseUserTOLTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type RetrieveUserUserGetResponseUserTOLTitle string

const (
	RetrieveUserUserGetResponseUserTOLTitleUnknown  RetrieveUserUserGetResponseUserTOLTitle = ""
	RetrieveUserUserGetResponseUserTOLTitleDr       RetrieveUserUserGetResponseUserTOLTitle = "DR"
	RetrieveUserUserGetResponseUserTOLTitleProf     RetrieveUserUserGetResponseUserTOLTitle = "PROF"
	RetrieveUserUserGetResponseUserTOLTitleProfDr   RetrieveUserUserGetResponseUserTOLTitle = "PROF_DR"
	RetrieveUserUserGetResponseUserTOLTitleDiplIng  RetrieveUserUserGetResponseUserTOLTitle = "DIPL_ING"
	RetrieveUserUserGetResponseUserTOLTitleMagister RetrieveUserUserGetResponseUserTOLTitle = "MAGISTER"
)

func (e RetrieveUserUserGetResponseUserTOLTitle) ToPointer() *RetrieveUserUserGetResponseUserTOLTitle {
	return &e
}

func (e *RetrieveUserUserGetResponseUserTOLTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = RetrieveUserUserGetResponseUserTOLTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserUserGetResponseUserTOLTitle: %v", v)
	}
}

type RetrieveUserUserGetResponseUserTOL struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   RetrieveUserUserGetResponseUserTOLAddress `json:"address"`
	BirthCity *string                                   `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt                      time.Time                                                         `json:"created_at"`
	DataPrivacyAndSharingAgreement *RetrieveUserUserGetResponseUserTOLDataPrivacyAndSharingAgreement `json:"data_privacy_and_sharing_agreement,omitempty"`
	// Email of the user. Must be a valid email address.
	Email *string                                  `json:"email,omitempty"`
	Fatca *RetrieveUserUserGetResponseUserTOLFatca `json:"fatca,omitempty"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// User unique identifier.
	ID string `json:"id"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// Phone number of the user. [Phone number E.164 format](https://en.wikipedia.org/wiki/E.164).
	PhoneNumber *string `json:"phone_number,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *RetrieveUserUserGetResponseUserTOLAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *RetrieveUserUserGetResponseUserTOLSalutation `default:"" json:"salutation"`
	// Status of the user.
	// * ACTIVE -
	// * INACTIVE -
	// * OFFBOARDING -
	// * OFFBOARDED -
	Status             RetrieveUserUserGetResponseUserTOLStatus              `json:"status"`
	TermsAndConditions *RetrieveUserUserGetResponseUserTOLTermsAndConditions `json:"terms_and_conditions,omitempty"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *RetrieveUserUserGetResponseUserTOLTitle `default:"" json:"title"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (r RetrieveUserUserGetResponseUserTOL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserUserGetResponseUserTOL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserUserGetResponseUserTOL) GetAddress() RetrieveUserUserGetResponseUserTOLAddress {
	if o == nil {
		return RetrieveUserUserGetResponseUserTOLAddress{}
	}
	return o.Address
}

func (o *RetrieveUserUserGetResponseUserTOL) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *RetrieveUserUserGetResponseUserTOL) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *RetrieveUserUserGetResponseUserTOL) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *RetrieveUserUserGetResponseUserTOL) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *RetrieveUserUserGetResponseUserTOL) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveUserUserGetResponseUserTOL) GetDataPrivacyAndSharingAgreement() *RetrieveUserUserGetResponseUserTOLDataPrivacyAndSharingAgreement {
	if o == nil {
		return nil
	}
	return o.DataPrivacyAndSharingAgreement
}

func (o *RetrieveUserUserGetResponseUserTOL) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *RetrieveUserUserGetResponseUserTOL) GetFatca() *RetrieveUserUserGetResponseUserTOLFatca {
	if o == nil {
		return nil
	}
	return o.Fatca
}

func (o *RetrieveUserUserGetResponseUserTOL) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *RetrieveUserUserGetResponseUserTOL) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveUserUserGetResponseUserTOL) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *RetrieveUserUserGetResponseUserTOL) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *RetrieveUserUserGetResponseUserTOL) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *RetrieveUserUserGetResponseUserTOL) GetPostalAddress() *RetrieveUserUserGetResponseUserTOLAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *RetrieveUserUserGetResponseUserTOL) GetSalutation() *RetrieveUserUserGetResponseUserTOLSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *RetrieveUserUserGetResponseUserTOL) GetStatus() RetrieveUserUserGetResponseUserTOLStatus {
	if o == nil {
		return RetrieveUserUserGetResponseUserTOLStatus("")
	}
	return o.Status
}

func (o *RetrieveUserUserGetResponseUserTOL) GetTermsAndConditions() *RetrieveUserUserGetResponseUserTOLTermsAndConditions {
	if o == nil {
		return nil
	}
	return o.TermsAndConditions
}

func (o *RetrieveUserUserGetResponseUserTOL) GetTitle() *RetrieveUserUserGetResponseUserTOLTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *RetrieveUserUserGetResponseUserTOL) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// RetrieveUserUserGetResponseUserBYOLAddress - Address. Must not be a P.O. box or c/o address.
type RetrieveUserUserGetResponseUserBYOLAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *RetrieveUserUserGetResponseUserBYOLAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *RetrieveUserUserGetResponseUserBYOLAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *RetrieveUserUserGetResponseUserBYOLAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RetrieveUserUserGetResponseUserBYOLAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RetrieveUserUserGetResponseUserBYOLAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *RetrieveUserUserGetResponseUserBYOLAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// RetrieveUserUserGetResponseUserBYOLSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type RetrieveUserUserGetResponseUserBYOLSalutation string

const (
	RetrieveUserUserGetResponseUserBYOLSalutationUnknown                 RetrieveUserUserGetResponseUserBYOLSalutation = ""
	RetrieveUserUserGetResponseUserBYOLSalutationSalutationMale          RetrieveUserUserGetResponseUserBYOLSalutation = "SALUTATION_MALE"
	RetrieveUserUserGetResponseUserBYOLSalutationSalutationFemale        RetrieveUserUserGetResponseUserBYOLSalutation = "SALUTATION_FEMALE"
	RetrieveUserUserGetResponseUserBYOLSalutationSalutationFemaleMarried RetrieveUserUserGetResponseUserBYOLSalutation = "SALUTATION_FEMALE_MARRIED"
	RetrieveUserUserGetResponseUserBYOLSalutationSalutationDiverse       RetrieveUserUserGetResponseUserBYOLSalutation = "SALUTATION_DIVERSE"
)

func (e RetrieveUserUserGetResponseUserBYOLSalutation) ToPointer() *RetrieveUserUserGetResponseUserBYOLSalutation {
	return &e
}

func (e *RetrieveUserUserGetResponseUserBYOLSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = RetrieveUserUserGetResponseUserBYOLSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserUserGetResponseUserBYOLSalutation: %v", v)
	}
}

// RetrieveUserUserGetResponseUserBYOLStatus - Status of the user.
// * ACTIVE -
// * INACTIVE -
// * OFFBOARDING -
// * OFFBOARDED -
type RetrieveUserUserGetResponseUserBYOLStatus string

const (
	RetrieveUserUserGetResponseUserBYOLStatusActive      RetrieveUserUserGetResponseUserBYOLStatus = "ACTIVE"
	RetrieveUserUserGetResponseUserBYOLStatusInactive    RetrieveUserUserGetResponseUserBYOLStatus = "INACTIVE"
	RetrieveUserUserGetResponseUserBYOLStatusOffboarding RetrieveUserUserGetResponseUserBYOLStatus = "OFFBOARDING"
	RetrieveUserUserGetResponseUserBYOLStatusOffboarded  RetrieveUserUserGetResponseUserBYOLStatus = "OFFBOARDED"
)

func (e RetrieveUserUserGetResponseUserBYOLStatus) ToPointer() *RetrieveUserUserGetResponseUserBYOLStatus {
	return &e
}

func (e *RetrieveUserUserGetResponseUserBYOLStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "OFFBOARDING":
		fallthrough
	case "OFFBOARDED":
		*e = RetrieveUserUserGetResponseUserBYOLStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserUserGetResponseUserBYOLStatus: %v", v)
	}
}

// RetrieveUserUserGetResponseUserBYOLTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type RetrieveUserUserGetResponseUserBYOLTitle string

const (
	RetrieveUserUserGetResponseUserBYOLTitleUnknown  RetrieveUserUserGetResponseUserBYOLTitle = ""
	RetrieveUserUserGetResponseUserBYOLTitleDr       RetrieveUserUserGetResponseUserBYOLTitle = "DR"
	RetrieveUserUserGetResponseUserBYOLTitleProf     RetrieveUserUserGetResponseUserBYOLTitle = "PROF"
	RetrieveUserUserGetResponseUserBYOLTitleProfDr   RetrieveUserUserGetResponseUserBYOLTitle = "PROF_DR"
	RetrieveUserUserGetResponseUserBYOLTitleDiplIng  RetrieveUserUserGetResponseUserBYOLTitle = "DIPL_ING"
	RetrieveUserUserGetResponseUserBYOLTitleMagister RetrieveUserUserGetResponseUserBYOLTitle = "MAGISTER"
)

func (e RetrieveUserUserGetResponseUserBYOLTitle) ToPointer() *RetrieveUserUserGetResponseUserBYOLTitle {
	return &e
}

func (e *RetrieveUserUserGetResponseUserBYOLTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = RetrieveUserUserGetResponseUserBYOLTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveUserUserGetResponseUserBYOLTitle: %v", v)
	}
}

type RetrieveUserUserGetResponseUserBYOL struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   RetrieveUserUserGetResponseUserBYOLAddress `json:"address"`
	BirthCity *string                                    `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// User unique identifier.
	ID string `json:"id"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *RetrieveUserUserGetResponseUserBYOLAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *RetrieveUserUserGetResponseUserBYOLSalutation `default:"" json:"salutation"`
	// Status of the user.
	// * ACTIVE -
	// * INACTIVE -
	// * OFFBOARDING -
	// * OFFBOARDED -
	Status RetrieveUserUserGetResponseUserBYOLStatus `json:"status"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *RetrieveUserUserGetResponseUserBYOLTitle `default:"" json:"title"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (r RetrieveUserUserGetResponseUserBYOL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveUserUserGetResponseUserBYOL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetAddress() RetrieveUserUserGetResponseUserBYOLAddress {
	if o == nil {
		return RetrieveUserUserGetResponseUserBYOLAddress{}
	}
	return o.Address
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetPostalAddress() *RetrieveUserUserGetResponseUserBYOLAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetSalutation() *RetrieveUserUserGetResponseUserBYOLSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetStatus() RetrieveUserUserGetResponseUserBYOLStatus {
	if o == nil {
		return RetrieveUserUserGetResponseUserBYOLStatus("")
	}
	return o.Status
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetTitle() *RetrieveUserUserGetResponseUserBYOLTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *RetrieveUserUserGetResponseUserBYOL) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type RetrieveUserUserGetResponseType string

const (
	RetrieveUserUserGetResponseTypeRetrieveUserUserGetResponseUserBYOL RetrieveUserUserGetResponseType = "retrieve_user_User - Get - Response_User (BYOL)"
	RetrieveUserUserGetResponseTypeRetrieveUserUserGetResponseUserTOL  RetrieveUserUserGetResponseType = "retrieve_user_User - Get - Response_User (TOL)"
)

type RetrieveUserUserGetResponse struct {
	RetrieveUserUserGetResponseUserBYOL *RetrieveUserUserGetResponseUserBYOL
	RetrieveUserUserGetResponseUserTOL  *RetrieveUserUserGetResponseUserTOL

	Type RetrieveUserUserGetResponseType
}

func CreateRetrieveUserUserGetResponseRetrieveUserUserGetResponseUserBYOL(retrieveUserUserGetResponseUserBYOL RetrieveUserUserGetResponseUserBYOL) RetrieveUserUserGetResponse {
	typ := RetrieveUserUserGetResponseTypeRetrieveUserUserGetResponseUserBYOL

	return RetrieveUserUserGetResponse{
		RetrieveUserUserGetResponseUserBYOL: &retrieveUserUserGetResponseUserBYOL,
		Type:                                typ,
	}
}

func CreateRetrieveUserUserGetResponseRetrieveUserUserGetResponseUserTOL(retrieveUserUserGetResponseUserTOL RetrieveUserUserGetResponseUserTOL) RetrieveUserUserGetResponse {
	typ := RetrieveUserUserGetResponseTypeRetrieveUserUserGetResponseUserTOL

	return RetrieveUserUserGetResponse{
		RetrieveUserUserGetResponseUserTOL: &retrieveUserUserGetResponseUserTOL,
		Type:                               typ,
	}
}

func (u *RetrieveUserUserGetResponse) UnmarshalJSON(data []byte) error {

	retrieveUserUserGetResponseUserBYOL := new(RetrieveUserUserGetResponseUserBYOL)
	if err := utils.UnmarshalJSON(data, &retrieveUserUserGetResponseUserBYOL, "", true, true); err == nil {
		u.RetrieveUserUserGetResponseUserBYOL = retrieveUserUserGetResponseUserBYOL
		u.Type = RetrieveUserUserGetResponseTypeRetrieveUserUserGetResponseUserBYOL
		return nil
	}

	retrieveUserUserGetResponseUserTOL := new(RetrieveUserUserGetResponseUserTOL)
	if err := utils.UnmarshalJSON(data, &retrieveUserUserGetResponseUserTOL, "", true, true); err == nil {
		u.RetrieveUserUserGetResponseUserTOL = retrieveUserUserGetResponseUserTOL
		u.Type = RetrieveUserUserGetResponseTypeRetrieveUserUserGetResponseUserTOL
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RetrieveUserUserGetResponse) MarshalJSON() ([]byte, error) {
	if u.RetrieveUserUserGetResponseUserBYOL != nil {
		return utils.MarshalJSON(u.RetrieveUserUserGetResponseUserBYOL, "", true)
	}

	if u.RetrieveUserUserGetResponseUserTOL != nil {
		return utils.MarshalJSON(u.RetrieveUserUserGetResponseUserTOL, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RetrieveUserResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	UserGetResponse *RetrieveUserUserGetResponse
}

func (o *RetrieveUserResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveUserResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *RetrieveUserResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveUserResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RetrieveUserResponse) GetUserGetResponse() *RetrieveUserUserGetResponse {
	if o == nil {
		return nil
	}
	return o.UserGetResponse
}
