// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type ListPortfoliosAllocationsSecurity struct {
	OauthClientCredentials string `security:"scheme,type=oauth2,name=Authorization"`
}

func (o *ListPortfoliosAllocationsSecurity) GetOauthClientCredentials() string {
	if o == nil {
		return ""
	}
	return o.OauthClientCredentials
}

// ListPortfoliosAllocationsQueryParamSort - Sort the result by `id`.
type ListPortfoliosAllocationsQueryParamSort string

const (
	ListPortfoliosAllocationsQueryParamSortID ListPortfoliosAllocationsQueryParamSort = "id"
)

func (e ListPortfoliosAllocationsQueryParamSort) ToPointer() *ListPortfoliosAllocationsQueryParamSort {
	return &e
}

func (e *ListPortfoliosAllocationsQueryParamSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		*e = ListPortfoliosAllocationsQueryParamSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosAllocationsQueryParamSort: %v", v)
	}
}

type ListPortfoliosAllocationsRequest struct {
	// Returns portfolio allocations with dates up until this date (UTC)
	EndDate *string `queryParam:"style=form,explode=true,name=end_date"`
	// Filters portfolio allocations containing the instruments ID's
	InstrumentIds *string `queryParam:"style=form,explode=true,name=instrument_ids"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *shared.Order `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Sort the result by `id`.
	Sort *ListPortfoliosAllocationsQueryParamSort `default:"id" queryParam:"style=form,explode=true,name=sort"`
	// Returns portfolio allocations with dates starting from and including this date (UTC)
	StartDate *string `queryParam:"style=form,explode=true,name=start_date"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListPortfoliosAllocationsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPortfoliosAllocationsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListPortfoliosAllocationsRequest) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ListPortfoliosAllocationsRequest) GetInstrumentIds() *string {
	if o == nil {
		return nil
	}
	return o.InstrumentIds
}

func (o *ListPortfoliosAllocationsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListPortfoliosAllocationsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListPortfoliosAllocationsRequest) GetOrder() *shared.Order {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListPortfoliosAllocationsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListPortfoliosAllocationsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListPortfoliosAllocationsRequest) GetSort() *ListPortfoliosAllocationsQueryParamSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListPortfoliosAllocationsRequest) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ListPortfoliosAllocationsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListPortfoliosAllocationsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// ListPortfoliosAllocationsInstrumentIDType - The type of the ID used in the request.
// * ISIN - International Securities Identification Number
// * UPVEST - UPVEST's unique instrument identifier
type ListPortfoliosAllocationsInstrumentIDType string

const (
	ListPortfoliosAllocationsInstrumentIDTypeIsin   ListPortfoliosAllocationsInstrumentIDType = "ISIN"
	ListPortfoliosAllocationsInstrumentIDTypeUpvest ListPortfoliosAllocationsInstrumentIDType = "UPVEST"
)

func (e ListPortfoliosAllocationsInstrumentIDType) ToPointer() *ListPortfoliosAllocationsInstrumentIDType {
	return &e
}

func (e *ListPortfoliosAllocationsInstrumentIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ISIN":
		fallthrough
	case "UPVEST":
		*e = ListPortfoliosAllocationsInstrumentIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosAllocationsInstrumentIDType: %v", v)
	}
}

type ListPortfoliosAllocationsAllocation struct {
	InstrumentID string `json:"instrument_id"`
	// The type of the ID used in the request.
	// * ISIN - International Securities Identification Number
	// * UPVEST - UPVEST's unique instrument identifier
	InstrumentIDType *ListPortfoliosAllocationsInstrumentIDType `default:"ISIN" json:"instrument_id_type"`
	// Instrument allocation weight
	Weight string `json:"weight"`
}

func (l ListPortfoliosAllocationsAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPortfoliosAllocationsAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListPortfoliosAllocationsAllocation) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *ListPortfoliosAllocationsAllocation) GetInstrumentIDType() *ListPortfoliosAllocationsInstrumentIDType {
	if o == nil {
		return nil
	}
	return o.InstrumentIDType
}

func (o *ListPortfoliosAllocationsAllocation) GetWeight() string {
	if o == nil {
		return ""
	}
	return o.Weight
}

type PortfoliosAllocation struct {
	// List of portfolios allocations
	Allocation []ListPortfoliosAllocationsAllocation `json:"allocation"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	ID        string    `json:"id"`
	// Allocation name
	Name string `json:"name"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (p PortfoliosAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PortfoliosAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PortfoliosAllocation) GetAllocation() []ListPortfoliosAllocationsAllocation {
	if o == nil {
		return []ListPortfoliosAllocationsAllocation{}
	}
	return o.Allocation
}

func (o *PortfoliosAllocation) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *PortfoliosAllocation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PortfoliosAllocation) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PortfoliosAllocation) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// ListPortfoliosAllocationsOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListPortfoliosAllocationsOrder string

const (
	ListPortfoliosAllocationsOrderAsc  ListPortfoliosAllocationsOrder = "ASC"
	ListPortfoliosAllocationsOrderDesc ListPortfoliosAllocationsOrder = "DESC"
)

func (e ListPortfoliosAllocationsOrder) ToPointer() *ListPortfoliosAllocationsOrder {
	return &e
}

func (e *ListPortfoliosAllocationsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListPortfoliosAllocationsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosAllocationsOrder: %v", v)
	}
}

type ListPortfoliosAllocationsMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListPortfoliosAllocationsOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListPortfoliosAllocationsMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListPortfoliosAllocationsMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListPortfoliosAllocationsMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListPortfoliosAllocationsMeta) GetOrder() *ListPortfoliosAllocationsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListPortfoliosAllocationsMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListPortfoliosAllocationsMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListPortfoliosAllocationsPortfoliosAllocationsListResponse - Portfolios allocations
type ListPortfoliosAllocationsPortfoliosAllocationsListResponse struct {
	Data []PortfoliosAllocation        `json:"data"`
	Meta ListPortfoliosAllocationsMeta `json:"meta"`
}

func (o *ListPortfoliosAllocationsPortfoliosAllocationsListResponse) GetData() []PortfoliosAllocation {
	if o == nil {
		return []PortfoliosAllocation{}
	}
	return o.Data
}

func (o *ListPortfoliosAllocationsPortfoliosAllocationsListResponse) GetMeta() ListPortfoliosAllocationsMeta {
	if o == nil {
		return ListPortfoliosAllocationsMeta{}
	}
	return o.Meta
}

type ListPortfoliosAllocationsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Portfolios allocations
	PortfoliosAllocationsListResponse *ListPortfoliosAllocationsPortfoliosAllocationsListResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListPortfoliosAllocationsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListPortfoliosAllocationsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListPortfoliosAllocationsResponse) GetPortfoliosAllocationsListResponse() *ListPortfoliosAllocationsPortfoliosAllocationsListResponse {
	if o == nil {
		return nil
	}
	return o.PortfoliosAllocationsListResponse
}

func (o *ListPortfoliosAllocationsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListPortfoliosAllocationsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
