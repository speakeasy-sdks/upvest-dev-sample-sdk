// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
)

type GetJwksRequest struct {
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (g GetJwksRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetJwksRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetJwksRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *GetJwksRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *GetJwksRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *GetJwksRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// Crv - Elliptic curve family.
// * P-521 -
type Crv string

const (
	CrvP521 Crv = "P-521"
)

func (e Crv) ToPointer() *Crv {
	return &e
}

func (e *Crv) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "P-521":
		*e = Crv(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Crv: %v", v)
	}
}

// Kty - Cryptographic algorithm family used with the key.
// * EC -
type Kty string

const (
	KtyEc Kty = "EC"
)

func (e Kty) ToPointer() *Kty {
	return &e
}

func (e *Kty) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EC":
		*e = Kty(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kty: %v", v)
	}
}

type Keys struct {
	// Elliptic curve family.
	// * P-521 -
	Crv *Crv `default:"P-521" json:"crv"`
	// Key ID
	Kid *string `json:"kid,omitempty"`
	// Cryptographic algorithm family used with the key.
	// * EC -
	Kty *Kty `default:"EC" json:"kty"`
	// Curve parameter
	X *string `json:"x,omitempty"`
	// Curve parameter
	Y *string `json:"y,omitempty"`
}

func (k Keys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *Keys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Keys) GetCrv() *Crv {
	if o == nil {
		return nil
	}
	return o.Crv
}

func (o *Keys) GetKid() *string {
	if o == nil {
		return nil
	}
	return o.Kid
}

func (o *Keys) GetKty() *Kty {
	if o == nil {
		return nil
	}
	return o.Kty
}

func (o *Keys) GetX() *string {
	if o == nil {
		return nil
	}
	return o.X
}

func (o *Keys) GetY() *string {
	if o == nil {
		return nil
	}
	return o.Y
}

// GetJwksAuthVerificationKeys - Webhooks verification keys.
type GetJwksAuthVerificationKeys struct {
	// List of verification keys
	Keys []Keys `json:"keys"`
}

func (o *GetJwksAuthVerificationKeys) GetKeys() []Keys {
	if o == nil {
		return []Keys{}
	}
	return o.Keys
}

type GetJwksResponse struct {
	// JWKS signing public keys
	TwoHundredApplicationJSONAuthVerificationKeys *GetJwksAuthVerificationKeys
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetJwksResponse) GetTwoHundredApplicationJSONAuthVerificationKeys() *GetJwksAuthVerificationKeys {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONAuthVerificationKeys
}

func (o *GetJwksResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetJwksResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetJwksResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetJwksResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
