// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// PlaceOrderOrderPlaceRequestCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type PlaceOrderOrderPlaceRequestCurrency string

const (
	PlaceOrderOrderPlaceRequestCurrencyEur PlaceOrderOrderPlaceRequestCurrency = "EUR"
)

func (e PlaceOrderOrderPlaceRequestCurrency) ToPointer() *PlaceOrderOrderPlaceRequestCurrency {
	return &e
}

func (e *PlaceOrderOrderPlaceRequestCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = PlaceOrderOrderPlaceRequestCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderPlaceRequestCurrency: %v", v)
	}
}

// PlaceOrderOrderPlaceRequestExecutionFlow - Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
// * STRAIGHT_THROUGH -
// * BLOCK -
type PlaceOrderOrderPlaceRequestExecutionFlow string

const (
	PlaceOrderOrderPlaceRequestExecutionFlowStraightThrough PlaceOrderOrderPlaceRequestExecutionFlow = "STRAIGHT_THROUGH"
	PlaceOrderOrderPlaceRequestExecutionFlowBlock           PlaceOrderOrderPlaceRequestExecutionFlow = "BLOCK"
)

func (e PlaceOrderOrderPlaceRequestExecutionFlow) ToPointer() *PlaceOrderOrderPlaceRequestExecutionFlow {
	return &e
}

func (e *PlaceOrderOrderPlaceRequestExecutionFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STRAIGHT_THROUGH":
		fallthrough
	case "BLOCK":
		*e = PlaceOrderOrderPlaceRequestExecutionFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderPlaceRequestExecutionFlow: %v", v)
	}
}

// PlaceOrderOrderPlaceRequestInstrumentIDType - The type of the ID used in the request.
// * ISIN -
type PlaceOrderOrderPlaceRequestInstrumentIDType string

const (
	PlaceOrderOrderPlaceRequestInstrumentIDTypeIsin PlaceOrderOrderPlaceRequestInstrumentIDType = "ISIN"
)

func (e PlaceOrderOrderPlaceRequestInstrumentIDType) ToPointer() *PlaceOrderOrderPlaceRequestInstrumentIDType {
	return &e
}

func (e *PlaceOrderOrderPlaceRequestInstrumentIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ISIN":
		*e = PlaceOrderOrderPlaceRequestInstrumentIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderPlaceRequestInstrumentIDType: %v", v)
	}
}

// PlaceOrderOrderPlaceRequestOrderType - Type of the order.
// * MARKET -
// * LIMIT -
// * STOP -
type PlaceOrderOrderPlaceRequestOrderType string

const (
	PlaceOrderOrderPlaceRequestOrderTypeMarket PlaceOrderOrderPlaceRequestOrderType = "MARKET"
	PlaceOrderOrderPlaceRequestOrderTypeLimit  PlaceOrderOrderPlaceRequestOrderType = "LIMIT"
	PlaceOrderOrderPlaceRequestOrderTypeStop   PlaceOrderOrderPlaceRequestOrderType = "STOP"
)

func (e PlaceOrderOrderPlaceRequestOrderType) ToPointer() *PlaceOrderOrderPlaceRequestOrderType {
	return &e
}

func (e *PlaceOrderOrderPlaceRequestOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARKET":
		fallthrough
	case "LIMIT":
		fallthrough
	case "STOP":
		*e = PlaceOrderOrderPlaceRequestOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderPlaceRequestOrderType: %v", v)
	}
}

// PlaceOrderOrderPlaceRequestSide - Side of the order.
// * BUY -
// * SELL -
type PlaceOrderOrderPlaceRequestSide string

const (
	PlaceOrderOrderPlaceRequestSideBuy  PlaceOrderOrderPlaceRequestSide = "BUY"
	PlaceOrderOrderPlaceRequestSideSell PlaceOrderOrderPlaceRequestSide = "SELL"
)

func (e PlaceOrderOrderPlaceRequestSide) ToPointer() *PlaceOrderOrderPlaceRequestSide {
	return &e
}

func (e *PlaceOrderOrderPlaceRequestSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = PlaceOrderOrderPlaceRequestSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderPlaceRequestSide: %v", v)
	}
}

type PlaceOrderOrderPlaceRequest struct {
	// The ID of the account that owns the order
	AccountID  string  `json:"account_id"`
	CashAmount *string `json:"cash_amount,omitempty"`
	// An ID provided by the client
	ClientReference *string                              `json:"client_reference,omitempty"`
	Currency        *PlaceOrderOrderPlaceRequestCurrency `default:"EUR" json:"currency"`
	// Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
	// * STRAIGHT_THROUGH -
	// * BLOCK -
	ExecutionFlow *PlaceOrderOrderPlaceRequestExecutionFlow `json:"execution_flow,omitempty"`
	ExpiryDate    *string                                   `json:"expiry_date,omitempty"`
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	InstrumentID string `json:"instrument_id"`
	// The type of the ID used in the request.
	// * ISIN -
	InstrumentIDType *PlaceOrderOrderPlaceRequestInstrumentIDType `default:"ISIN" json:"instrument_id_type"`
	LimitPrice       *string                                      `json:"limit_price,omitempty"`
	// Type of the order.
	// * MARKET -
	// * LIMIT -
	// * STOP -
	OrderType *PlaceOrderOrderPlaceRequestOrderType `json:"order_type,omitempty"`
	Quantity  *string                               `json:"quantity,omitempty"`
	// Side of the order.
	// * BUY -
	// * SELL -
	Side      PlaceOrderOrderPlaceRequestSide `json:"side"`
	StopPrice *string                         `json:"stop_price,omitempty"`
	// The ID of the user
	UserID string `json:"user_id"`
	// Only applicable if the user has failed the instrument fit check for the instrument type being ordered. True if the user has acknowledged their willingness to trade.
	UserInstrumentFitAcknowledgement *bool `json:"user_instrument_fit_acknowledgement,omitempty"`
}

func (p PlaceOrderOrderPlaceRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaceOrderOrderPlaceRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaceOrderOrderPlaceRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *PlaceOrderOrderPlaceRequest) GetCashAmount() *string {
	if o == nil {
		return nil
	}
	return o.CashAmount
}

func (o *PlaceOrderOrderPlaceRequest) GetClientReference() *string {
	if o == nil {
		return nil
	}
	return o.ClientReference
}

func (o *PlaceOrderOrderPlaceRequest) GetCurrency() *PlaceOrderOrderPlaceRequestCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *PlaceOrderOrderPlaceRequest) GetExecutionFlow() *PlaceOrderOrderPlaceRequestExecutionFlow {
	if o == nil {
		return nil
	}
	return o.ExecutionFlow
}

func (o *PlaceOrderOrderPlaceRequest) GetExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.ExpiryDate
}

func (o *PlaceOrderOrderPlaceRequest) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *PlaceOrderOrderPlaceRequest) GetInstrumentIDType() *PlaceOrderOrderPlaceRequestInstrumentIDType {
	if o == nil {
		return nil
	}
	return o.InstrumentIDType
}

func (o *PlaceOrderOrderPlaceRequest) GetLimitPrice() *string {
	if o == nil {
		return nil
	}
	return o.LimitPrice
}

func (o *PlaceOrderOrderPlaceRequest) GetOrderType() *PlaceOrderOrderPlaceRequestOrderType {
	if o == nil {
		return nil
	}
	return o.OrderType
}

func (o *PlaceOrderOrderPlaceRequest) GetQuantity() *string {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *PlaceOrderOrderPlaceRequest) GetSide() PlaceOrderOrderPlaceRequestSide {
	if o == nil {
		return PlaceOrderOrderPlaceRequestSide("")
	}
	return o.Side
}

func (o *PlaceOrderOrderPlaceRequest) GetStopPrice() *string {
	if o == nil {
		return nil
	}
	return o.StopPrice
}

func (o *PlaceOrderOrderPlaceRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *PlaceOrderOrderPlaceRequest) GetUserInstrumentFitAcknowledgement() *bool {
	if o == nil {
		return nil
	}
	return o.UserInstrumentFitAcknowledgement
}

type PlaceOrderRequest struct {
	RequestBody *PlaceOrderOrderPlaceRequest `request:"mediaType=application/json"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (p PlaceOrderRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaceOrderRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaceOrderRequest) GetRequestBody() *PlaceOrderOrderPlaceRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *PlaceOrderRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *PlaceOrderRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *PlaceOrderRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *PlaceOrderRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *PlaceOrderRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// PlaceOrderOrderCancellationReason - Reason for Order cancellation. The field is present in case the Order has a status of CANCELLED.
// * CANCELLED_BY_CLIENT -
// * CANCELLED_BY_UPVEST_OPERATIONS -
// * CANCELLED_BY_TRADING_PARTNER -
// * CANCELLED_BY_UPVEST_PLATFORM -
type PlaceOrderOrderCancellationReason string

const (
	PlaceOrderOrderCancellationReasonCancelledByClient           PlaceOrderOrderCancellationReason = "CANCELLED_BY_CLIENT"
	PlaceOrderOrderCancellationReasonCancelledByUpvestOperations PlaceOrderOrderCancellationReason = "CANCELLED_BY_UPVEST_OPERATIONS"
	PlaceOrderOrderCancellationReasonCancelledByTradingPartner   PlaceOrderOrderCancellationReason = "CANCELLED_BY_TRADING_PARTNER"
	PlaceOrderOrderCancellationReasonCancelledByUpvestPlatform   PlaceOrderOrderCancellationReason = "CANCELLED_BY_UPVEST_PLATFORM"
)

func (e PlaceOrderOrderCancellationReason) ToPointer() *PlaceOrderOrderCancellationReason {
	return &e
}

func (e *PlaceOrderOrderCancellationReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CANCELLED_BY_CLIENT":
		fallthrough
	case "CANCELLED_BY_UPVEST_OPERATIONS":
		fallthrough
	case "CANCELLED_BY_TRADING_PARTNER":
		fallthrough
	case "CANCELLED_BY_UPVEST_PLATFORM":
		*e = PlaceOrderOrderCancellationReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderCancellationReason: %v", v)
	}
}

// PlaceOrderOrderCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type PlaceOrderOrderCurrency string

const (
	PlaceOrderOrderCurrencyEur PlaceOrderOrderCurrency = "EUR"
)

func (e PlaceOrderOrderCurrency) ToPointer() *PlaceOrderOrderCurrency {
	return &e
}

func (e *PlaceOrderOrderCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = PlaceOrderOrderCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderCurrency: %v", v)
	}
}

// PlaceOrderOrderExecutionFlow - Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
// * STRAIGHT_THROUGH -
// * BLOCK -
type PlaceOrderOrderExecutionFlow string

const (
	PlaceOrderOrderExecutionFlowStraightThrough PlaceOrderOrderExecutionFlow = "STRAIGHT_THROUGH"
	PlaceOrderOrderExecutionFlowBlock           PlaceOrderOrderExecutionFlow = "BLOCK"
)

func (e PlaceOrderOrderExecutionFlow) ToPointer() *PlaceOrderOrderExecutionFlow {
	return &e
}

func (e *PlaceOrderOrderExecutionFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STRAIGHT_THROUGH":
		fallthrough
	case "BLOCK":
		*e = PlaceOrderOrderExecutionFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderExecutionFlow: %v", v)
	}
}

// PlaceOrderOrderOrderExecutionCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type PlaceOrderOrderOrderExecutionCurrency string

const (
	PlaceOrderOrderOrderExecutionCurrencyEur PlaceOrderOrderOrderExecutionCurrency = "EUR"
)

func (e PlaceOrderOrderOrderExecutionCurrency) ToPointer() *PlaceOrderOrderOrderExecutionCurrency {
	return &e
}

func (e *PlaceOrderOrderOrderExecutionCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = PlaceOrderOrderOrderExecutionCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderOrderExecutionCurrency: %v", v)
	}
}

// PlaceOrderOrderOrderExecutionSide - Side of the execution.
// * BUY -
// * SELL -
type PlaceOrderOrderOrderExecutionSide string

const (
	PlaceOrderOrderOrderExecutionSideBuy  PlaceOrderOrderOrderExecutionSide = "BUY"
	PlaceOrderOrderOrderExecutionSideSell PlaceOrderOrderOrderExecutionSide = "SELL"
)

func (e PlaceOrderOrderOrderExecutionSide) ToPointer() *PlaceOrderOrderOrderExecutionSide {
	return &e
}

func (e *PlaceOrderOrderOrderExecutionSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = PlaceOrderOrderOrderExecutionSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderOrderExecutionSide: %v", v)
	}
}

// PlaceOrderOrderOrderExecutionStatus - Execution status of the Execution.
// * FILLED -
// * SETTLED -
// * CANCELLED -
type PlaceOrderOrderOrderExecutionStatus string

const (
	PlaceOrderOrderOrderExecutionStatusFilled    PlaceOrderOrderOrderExecutionStatus = "FILLED"
	PlaceOrderOrderOrderExecutionStatusSettled   PlaceOrderOrderOrderExecutionStatus = "SETTLED"
	PlaceOrderOrderOrderExecutionStatusCancelled PlaceOrderOrderOrderExecutionStatus = "CANCELLED"
)

func (e PlaceOrderOrderOrderExecutionStatus) ToPointer() *PlaceOrderOrderOrderExecutionStatus {
	return &e
}

func (e *PlaceOrderOrderOrderExecutionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FILLED":
		fallthrough
	case "SETTLED":
		fallthrough
	case "CANCELLED":
		*e = PlaceOrderOrderOrderExecutionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderOrderExecutionStatus: %v", v)
	}
}

// PlaceOrderOrderOrderExecutionTaxType - Tax type
// * TOTAL -
type PlaceOrderOrderOrderExecutionTaxType string

const (
	PlaceOrderOrderOrderExecutionTaxTypeTotal PlaceOrderOrderOrderExecutionTaxType = "TOTAL"
)

func (e PlaceOrderOrderOrderExecutionTaxType) ToPointer() *PlaceOrderOrderOrderExecutionTaxType {
	return &e
}

func (e *PlaceOrderOrderOrderExecutionTaxType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TOTAL":
		*e = PlaceOrderOrderOrderExecutionTaxType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderOrderExecutionTaxType: %v", v)
	}
}

type PlaceOrderOrderOrderExecutionTax struct {
	Amount string `json:"amount"`
	// Tax type
	// * TOTAL -
	Type *PlaceOrderOrderOrderExecutionTaxType `default:"TOTAL" json:"type"`
}

func (p PlaceOrderOrderOrderExecutionTax) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaceOrderOrderOrderExecutionTax) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaceOrderOrderOrderExecutionTax) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *PlaceOrderOrderOrderExecutionTax) GetType() *PlaceOrderOrderOrderExecutionTaxType {
	if o == nil {
		return nil
	}
	return o.Type
}

type PlaceOrderOrderOrderExecution struct {
	CashAmount string `json:"cash_amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency       *PlaceOrderOrderOrderExecutionCurrency `default:"EUR" json:"currency"`
	ID             string                                 `json:"id"`
	OrderID        string                                 `json:"order_id"`
	Price          string                                 `json:"price"`
	SettlementDate *string                                `json:"settlement_date,omitempty"`
	ShareQuantity  string                                 `json:"share_quantity"`
	// Side of the execution.
	// * BUY -
	// * SELL -
	Side PlaceOrderOrderOrderExecutionSide `json:"side"`
	// Execution status of the Execution.
	// * FILLED -
	// * SETTLED -
	// * CANCELLED -
	Status          PlaceOrderOrderOrderExecutionStatus `json:"status"`
	Taxes           []PlaceOrderOrderOrderExecutionTax  `json:"taxes"`
	TransactionTime time.Time                           `json:"transaction_time"`
}

func (p PlaceOrderOrderOrderExecution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaceOrderOrderOrderExecution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaceOrderOrderOrderExecution) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *PlaceOrderOrderOrderExecution) GetCurrency() *PlaceOrderOrderOrderExecutionCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *PlaceOrderOrderOrderExecution) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PlaceOrderOrderOrderExecution) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

func (o *PlaceOrderOrderOrderExecution) GetPrice() string {
	if o == nil {
		return ""
	}
	return o.Price
}

func (o *PlaceOrderOrderOrderExecution) GetSettlementDate() *string {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *PlaceOrderOrderOrderExecution) GetShareQuantity() string {
	if o == nil {
		return ""
	}
	return o.ShareQuantity
}

func (o *PlaceOrderOrderOrderExecution) GetSide() PlaceOrderOrderOrderExecutionSide {
	if o == nil {
		return PlaceOrderOrderOrderExecutionSide("")
	}
	return o.Side
}

func (o *PlaceOrderOrderOrderExecution) GetStatus() PlaceOrderOrderOrderExecutionStatus {
	if o == nil {
		return PlaceOrderOrderOrderExecutionStatus("")
	}
	return o.Status
}

func (o *PlaceOrderOrderOrderExecution) GetTaxes() []PlaceOrderOrderOrderExecutionTax {
	if o == nil {
		return []PlaceOrderOrderOrderExecutionTax{}
	}
	return o.Taxes
}

func (o *PlaceOrderOrderOrderExecution) GetTransactionTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TransactionTime
}

// PlaceOrderOrderInitiationFlow - Initiation flow used during order creation, i.e. what triggered the order.
// * API -
// * PORTFOLIO -
// * CASH_DIVIDEND_REINVESTMENT -
// * PORTFOLIO_REBALANCING -
// * SELL_TO_COVER_FEES -
// * SELL_TO_COVER_TAXES -
// * ACCOUNT_LIQUIDATION -
// * UPVEST_OPERATIONS -
type PlaceOrderOrderInitiationFlow string

const (
	PlaceOrderOrderInitiationFlowAPI                      PlaceOrderOrderInitiationFlow = "API"
	PlaceOrderOrderInitiationFlowPortfolio                PlaceOrderOrderInitiationFlow = "PORTFOLIO"
	PlaceOrderOrderInitiationFlowCashDividendReinvestment PlaceOrderOrderInitiationFlow = "CASH_DIVIDEND_REINVESTMENT"
	PlaceOrderOrderInitiationFlowPortfolioRebalancing     PlaceOrderOrderInitiationFlow = "PORTFOLIO_REBALANCING"
	PlaceOrderOrderInitiationFlowSellToCoverFees          PlaceOrderOrderInitiationFlow = "SELL_TO_COVER_FEES"
	PlaceOrderOrderInitiationFlowSellToCoverTaxes         PlaceOrderOrderInitiationFlow = "SELL_TO_COVER_TAXES"
	PlaceOrderOrderInitiationFlowAccountLiquidation       PlaceOrderOrderInitiationFlow = "ACCOUNT_LIQUIDATION"
	PlaceOrderOrderInitiationFlowUpvestOperations         PlaceOrderOrderInitiationFlow = "UPVEST_OPERATIONS"
)

func (e PlaceOrderOrderInitiationFlow) ToPointer() *PlaceOrderOrderInitiationFlow {
	return &e
}

func (e *PlaceOrderOrderInitiationFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API":
		fallthrough
	case "PORTFOLIO":
		fallthrough
	case "CASH_DIVIDEND_REINVESTMENT":
		fallthrough
	case "PORTFOLIO_REBALANCING":
		fallthrough
	case "SELL_TO_COVER_FEES":
		fallthrough
	case "SELL_TO_COVER_TAXES":
		fallthrough
	case "ACCOUNT_LIQUIDATION":
		fallthrough
	case "UPVEST_OPERATIONS":
		*e = PlaceOrderOrderInitiationFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderInitiationFlow: %v", v)
	}
}

// PlaceOrderOrderInstrumentIDType - The type of the ID used in the request.
// * ISIN -
type PlaceOrderOrderInstrumentIDType string

const (
	PlaceOrderOrderInstrumentIDTypeIsin PlaceOrderOrderInstrumentIDType = "ISIN"
)

func (e PlaceOrderOrderInstrumentIDType) ToPointer() *PlaceOrderOrderInstrumentIDType {
	return &e
}

func (e *PlaceOrderOrderInstrumentIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ISIN":
		*e = PlaceOrderOrderInstrumentIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderInstrumentIDType: %v", v)
	}
}

// PlaceOrderOrderOrderType - Type of the order.
// * MARKET -
// * LIMIT -
// * STOP -
type PlaceOrderOrderOrderType string

const (
	PlaceOrderOrderOrderTypeMarket PlaceOrderOrderOrderType = "MARKET"
	PlaceOrderOrderOrderTypeLimit  PlaceOrderOrderOrderType = "LIMIT"
	PlaceOrderOrderOrderTypeStop   PlaceOrderOrderOrderType = "STOP"
)

func (e PlaceOrderOrderOrderType) ToPointer() *PlaceOrderOrderOrderType {
	return &e
}

func (e *PlaceOrderOrderOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARKET":
		fallthrough
	case "LIMIT":
		fallthrough
	case "STOP":
		*e = PlaceOrderOrderOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderOrderType: %v", v)
	}
}

// PlaceOrderOrderSide - Side of the order.
// * BUY -
// * SELL -
type PlaceOrderOrderSide string

const (
	PlaceOrderOrderSideBuy  PlaceOrderOrderSide = "BUY"
	PlaceOrderOrderSideSell PlaceOrderOrderSide = "SELL"
)

func (e PlaceOrderOrderSide) ToPointer() *PlaceOrderOrderSide {
	return &e
}

func (e *PlaceOrderOrderSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = PlaceOrderOrderSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderSide: %v", v)
	}
}

// PlaceOrderOrderStatus - The execution status of the order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type PlaceOrderOrderStatus string

const (
	PlaceOrderOrderStatusNew        PlaceOrderOrderStatus = "NEW"
	PlaceOrderOrderStatusProcessing PlaceOrderOrderStatus = "PROCESSING"
	PlaceOrderOrderStatusFilled     PlaceOrderOrderStatus = "FILLED"
	PlaceOrderOrderStatusCancelled  PlaceOrderOrderStatus = "CANCELLED"
)

func (e PlaceOrderOrderStatus) ToPointer() *PlaceOrderOrderStatus {
	return &e
}

func (e *PlaceOrderOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = PlaceOrderOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderStatus: %v", v)
	}
}

// PlaceOrderOrder - The request for the order creation has been accepted for processing.
type PlaceOrderOrder struct {
	// The ID of the account that owns the order
	AccountID string `json:"account_id"`
	// Reason for Order cancellation. The field is present in case the Order has a status of CANCELLED.
	// * CANCELLED_BY_CLIENT -
	// * CANCELLED_BY_UPVEST_OPERATIONS -
	// * CANCELLED_BY_TRADING_PARTNER -
	// * CANCELLED_BY_UPVEST_PLATFORM -
	CancellationReason *PlaceOrderOrderCancellationReason `json:"cancellation_reason,omitempty"`
	CashAmount         string                             `json:"cash_amount"`
	// An ID provided by the client
	ClientReference string `json:"client_reference"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time                `json:"created_at"`
	Currency  *PlaceOrderOrderCurrency `default:"EUR" json:"currency"`
	// Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
	// * STRAIGHT_THROUGH -
	// * BLOCK -
	ExecutionFlow *PlaceOrderOrderExecutionFlow `json:"execution_flow,omitempty"`
	// Order executions associated with this order
	Executions []PlaceOrderOrderOrderExecution `json:"executions"`
	ExpiryDate *string                         `json:"expiry_date,omitempty"`
	Fee        string                          `json:"fee"`
	ID         string                          `json:"id"`
	// Initiation flow used during order creation, i.e. what triggered the order.
	// * API -
	// * PORTFOLIO -
	// * CASH_DIVIDEND_REINVESTMENT -
	// * PORTFOLIO_REBALANCING -
	// * SELL_TO_COVER_FEES -
	// * SELL_TO_COVER_TAXES -
	// * ACCOUNT_LIQUIDATION -
	// * UPVEST_OPERATIONS -
	InitiationFlow PlaceOrderOrderInitiationFlow `json:"initiation_flow"`
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	InstrumentID string `json:"instrument_id"`
	// The type of the ID used in the request.
	// * ISIN -
	InstrumentIDType *PlaceOrderOrderInstrumentIDType `default:"ISIN" json:"instrument_id_type"`
	LimitPrice       *string                          `json:"limit_price,omitempty"`
	// Type of the order.
	// * MARKET -
	// * LIMIT -
	// * STOP -
	OrderType PlaceOrderOrderOrderType `json:"order_type"`
	Quantity  string                   `json:"quantity"`
	// Side of the order.
	// * BUY -
	// * SELL -
	Side PlaceOrderOrderSide `json:"side"`
	// The execution status of the order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status    PlaceOrderOrderStatus `json:"status"`
	StopPrice *string               `json:"stop_price,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// The ID of the user
	UserID string `json:"user_id"`
	// Only applicable if the user has failed the instrument fit check for the instrument type being ordered. True if the user has acknowledged their willingness to trade.
	UserInstrumentFitAcknowledgement *bool `json:"user_instrument_fit_acknowledgement,omitempty"`
}

func (p PlaceOrderOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaceOrderOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaceOrderOrder) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *PlaceOrderOrder) GetCancellationReason() *PlaceOrderOrderCancellationReason {
	if o == nil {
		return nil
	}
	return o.CancellationReason
}

func (o *PlaceOrderOrder) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *PlaceOrderOrder) GetClientReference() string {
	if o == nil {
		return ""
	}
	return o.ClientReference
}

func (o *PlaceOrderOrder) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *PlaceOrderOrder) GetCurrency() *PlaceOrderOrderCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *PlaceOrderOrder) GetExecutionFlow() *PlaceOrderOrderExecutionFlow {
	if o == nil {
		return nil
	}
	return o.ExecutionFlow
}

func (o *PlaceOrderOrder) GetExecutions() []PlaceOrderOrderOrderExecution {
	if o == nil {
		return []PlaceOrderOrderOrderExecution{}
	}
	return o.Executions
}

func (o *PlaceOrderOrder) GetExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.ExpiryDate
}

func (o *PlaceOrderOrder) GetFee() string {
	if o == nil {
		return ""
	}
	return o.Fee
}

func (o *PlaceOrderOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PlaceOrderOrder) GetInitiationFlow() PlaceOrderOrderInitiationFlow {
	if o == nil {
		return PlaceOrderOrderInitiationFlow("")
	}
	return o.InitiationFlow
}

func (o *PlaceOrderOrder) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *PlaceOrderOrder) GetInstrumentIDType() *PlaceOrderOrderInstrumentIDType {
	if o == nil {
		return nil
	}
	return o.InstrumentIDType
}

func (o *PlaceOrderOrder) GetLimitPrice() *string {
	if o == nil {
		return nil
	}
	return o.LimitPrice
}

func (o *PlaceOrderOrder) GetOrderType() PlaceOrderOrderOrderType {
	if o == nil {
		return PlaceOrderOrderOrderType("")
	}
	return o.OrderType
}

func (o *PlaceOrderOrder) GetQuantity() string {
	if o == nil {
		return ""
	}
	return o.Quantity
}

func (o *PlaceOrderOrder) GetSide() PlaceOrderOrderSide {
	if o == nil {
		return PlaceOrderOrderSide("")
	}
	return o.Side
}

func (o *PlaceOrderOrder) GetStatus() PlaceOrderOrderStatus {
	if o == nil {
		return PlaceOrderOrderStatus("")
	}
	return o.Status
}

func (o *PlaceOrderOrder) GetStopPrice() *string {
	if o == nil {
		return nil
	}
	return o.StopPrice
}

func (o *PlaceOrderOrder) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *PlaceOrderOrder) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *PlaceOrderOrder) GetUserInstrumentFitAcknowledgement() *bool {
	if o == nil {
		return nil
	}
	return o.UserInstrumentFitAcknowledgement
}

type PlaceOrderResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// The request for the order creation has been accepted for processing.
	Order *PlaceOrderOrder
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PlaceOrderResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PlaceOrderResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *PlaceOrderResponse) GetOrder() *PlaceOrderOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PlaceOrderResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PlaceOrderResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
