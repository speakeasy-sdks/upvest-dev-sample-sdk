// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// PlaceOrderCurrency - The currency for the order.
type PlaceOrderCurrency string

const (
	PlaceOrderCurrencyEur PlaceOrderCurrency = "EUR"
)

func (e PlaceOrderCurrency) ToPointer() *PlaceOrderCurrency {
	return &e
}

func (e *PlaceOrderCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = PlaceOrderCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderCurrency: %v", v)
	}
}

// ExecutionFlow - Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
// * STRAIGHT_THROUGH -
// * BLOCK -
type ExecutionFlow string

const (
	ExecutionFlowStraightThrough ExecutionFlow = "STRAIGHT_THROUGH"
	ExecutionFlowBlock           ExecutionFlow = "BLOCK"
)

func (e ExecutionFlow) ToPointer() *ExecutionFlow {
	return &e
}

func (e *ExecutionFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STRAIGHT_THROUGH":
		fallthrough
	case "BLOCK":
		*e = ExecutionFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutionFlow: %v", v)
	}
}

// InstrumentIDType - The type of the ID used in the request.
// * ISIN -
type InstrumentIDType string

const (
	InstrumentIDTypeIsin InstrumentIDType = "ISIN"
)

func (e InstrumentIDType) ToPointer() *InstrumentIDType {
	return &e
}

func (e *InstrumentIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ISIN":
		*e = InstrumentIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InstrumentIDType: %v", v)
	}
}

// OrderType - Type of the order.
// * MARKET -
// * LIMIT -
// * STOP -
type OrderType string

const (
	OrderTypeMarket OrderType = "MARKET"
	OrderTypeLimit  OrderType = "LIMIT"
	OrderTypeStop   OrderType = "STOP"
)

func (e OrderType) ToPointer() *OrderType {
	return &e
}

func (e *OrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARKET":
		fallthrough
	case "LIMIT":
		fallthrough
	case "STOP":
		*e = OrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderType: %v", v)
	}
}

// Side of the order.
// * BUY -
// * SELL -
type Side string

const (
	SideBuy  Side = "BUY"
	SideSell Side = "SELL"
)

func (e Side) ToPointer() *Side {
	return &e
}

func (e *Side) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = Side(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Side: %v", v)
	}
}

type PlaceOrderOrderPlaceRequest struct {
	// The ID of the account that owns the order
	AccountID  string  `json:"account_id"`
	CashAmount *string `json:"cash_amount,omitempty"`
	// An ID provided by the client
	ClientReference *string             `json:"client_reference,omitempty"`
	Currency        *PlaceOrderCurrency `default:"EUR" json:"currency"`
	// Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
	// * STRAIGHT_THROUGH -
	// * BLOCK -
	ExecutionFlow *ExecutionFlow `json:"execution_flow,omitempty"`
	ExpiryDate    *string        `json:"expiry_date,omitempty"`
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	InstrumentID string `json:"instrument_id"`
	// The type of the ID used in the request.
	// * ISIN -
	InstrumentIDType *InstrumentIDType `default:"ISIN" json:"instrument_id_type"`
	LimitPrice       *string           `json:"limit_price,omitempty"`
	// Type of the order.
	// * MARKET -
	// * LIMIT -
	// * STOP -
	OrderType *OrderType `json:"order_type,omitempty"`
	Quantity  *string    `json:"quantity,omitempty"`
	// Side of the order.
	// * BUY -
	// * SELL -
	Side      Side    `json:"side"`
	StopPrice *string `json:"stop_price,omitempty"`
	// The ID of the user
	UserID string `json:"user_id"`
	// Only applicable if the user has failed the instrument fit check for the instrument type being ordered. True if the user has acknowledged their willingness to trade.
	UserInstrumentFitAcknowledgement *bool `json:"user_instrument_fit_acknowledgement,omitempty"`
}

func (p PlaceOrderOrderPlaceRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaceOrderOrderPlaceRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaceOrderOrderPlaceRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *PlaceOrderOrderPlaceRequest) GetCashAmount() *string {
	if o == nil {
		return nil
	}
	return o.CashAmount
}

func (o *PlaceOrderOrderPlaceRequest) GetClientReference() *string {
	if o == nil {
		return nil
	}
	return o.ClientReference
}

func (o *PlaceOrderOrderPlaceRequest) GetCurrency() *PlaceOrderCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *PlaceOrderOrderPlaceRequest) GetExecutionFlow() *ExecutionFlow {
	if o == nil {
		return nil
	}
	return o.ExecutionFlow
}

func (o *PlaceOrderOrderPlaceRequest) GetExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.ExpiryDate
}

func (o *PlaceOrderOrderPlaceRequest) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *PlaceOrderOrderPlaceRequest) GetInstrumentIDType() *InstrumentIDType {
	if o == nil {
		return nil
	}
	return o.InstrumentIDType
}

func (o *PlaceOrderOrderPlaceRequest) GetLimitPrice() *string {
	if o == nil {
		return nil
	}
	return o.LimitPrice
}

func (o *PlaceOrderOrderPlaceRequest) GetOrderType() *OrderType {
	if o == nil {
		return nil
	}
	return o.OrderType
}

func (o *PlaceOrderOrderPlaceRequest) GetQuantity() *string {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *PlaceOrderOrderPlaceRequest) GetSide() Side {
	if o == nil {
		return Side("")
	}
	return o.Side
}

func (o *PlaceOrderOrderPlaceRequest) GetStopPrice() *string {
	if o == nil {
		return nil
	}
	return o.StopPrice
}

func (o *PlaceOrderOrderPlaceRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *PlaceOrderOrderPlaceRequest) GetUserInstrumentFitAcknowledgement() *bool {
	if o == nil {
		return nil
	}
	return o.UserInstrumentFitAcknowledgement
}

type PlaceOrderRequest struct {
	RequestBody *PlaceOrderOrderPlaceRequest `request:"mediaType=application/json"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (p PlaceOrderRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaceOrderRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaceOrderRequest) GetRequestBody() *PlaceOrderOrderPlaceRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *PlaceOrderRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *PlaceOrderRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *PlaceOrderRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *PlaceOrderRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *PlaceOrderRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// CancellationReason - Reason for Order cancellation. The field is present in case the Order has a status of CANCELLED.
// * CANCELLED_BY_CLIENT -
// * CANCELLED_BY_UPVEST_OPERATIONS -
// * CANCELLED_BY_TRADING_PARTNER -
// * CANCELLED_BY_UPVEST_PLATFORM -
type CancellationReason string

const (
	CancellationReasonCancelledByClient           CancellationReason = "CANCELLED_BY_CLIENT"
	CancellationReasonCancelledByUpvestOperations CancellationReason = "CANCELLED_BY_UPVEST_OPERATIONS"
	CancellationReasonCancelledByTradingPartner   CancellationReason = "CANCELLED_BY_TRADING_PARTNER"
	CancellationReasonCancelledByUpvestPlatform   CancellationReason = "CANCELLED_BY_UPVEST_PLATFORM"
)

func (e CancellationReason) ToPointer() *CancellationReason {
	return &e
}

func (e *CancellationReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CANCELLED_BY_CLIENT":
		fallthrough
	case "CANCELLED_BY_UPVEST_OPERATIONS":
		fallthrough
	case "CANCELLED_BY_TRADING_PARTNER":
		fallthrough
	case "CANCELLED_BY_UPVEST_PLATFORM":
		*e = CancellationReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancellationReason: %v", v)
	}
}

// PlaceOrderOrdersCurrency - The currency for the order.
type PlaceOrderOrdersCurrency string

const (
	PlaceOrderOrdersCurrencyEur PlaceOrderOrdersCurrency = "EUR"
)

func (e PlaceOrderOrdersCurrency) ToPointer() *PlaceOrderOrdersCurrency {
	return &e
}

func (e *PlaceOrderOrdersCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = PlaceOrderOrdersCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrdersCurrency: %v", v)
	}
}

// PlaceOrderExecutionFlow - Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
// * STRAIGHT_THROUGH -
// * BLOCK -
type PlaceOrderExecutionFlow string

const (
	PlaceOrderExecutionFlowStraightThrough PlaceOrderExecutionFlow = "STRAIGHT_THROUGH"
	PlaceOrderExecutionFlowBlock           PlaceOrderExecutionFlow = "BLOCK"
)

func (e PlaceOrderExecutionFlow) ToPointer() *PlaceOrderExecutionFlow {
	return &e
}

func (e *PlaceOrderExecutionFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STRAIGHT_THROUGH":
		fallthrough
	case "BLOCK":
		*e = PlaceOrderExecutionFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderExecutionFlow: %v", v)
	}
}

// PlaceOrderOrdersResponseCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type PlaceOrderOrdersResponseCurrency string

const (
	PlaceOrderOrdersResponseCurrencyEur PlaceOrderOrdersResponseCurrency = "EUR"
)

func (e PlaceOrderOrdersResponseCurrency) ToPointer() *PlaceOrderOrdersResponseCurrency {
	return &e
}

func (e *PlaceOrderOrdersResponseCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = PlaceOrderOrdersResponseCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrdersResponseCurrency: %v", v)
	}
}

// PlaceOrderOrdersSide - Side of the execution.
// * BUY -
// * SELL -
type PlaceOrderOrdersSide string

const (
	PlaceOrderOrdersSideBuy  PlaceOrderOrdersSide = "BUY"
	PlaceOrderOrdersSideSell PlaceOrderOrdersSide = "SELL"
)

func (e PlaceOrderOrdersSide) ToPointer() *PlaceOrderOrdersSide {
	return &e
}

func (e *PlaceOrderOrdersSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = PlaceOrderOrdersSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrdersSide: %v", v)
	}
}

// PlaceOrderOrdersStatus - Execution status of the Execution.
// * FILLED -
// * SETTLED -
// * CANCELLED -
type PlaceOrderOrdersStatus string

const (
	PlaceOrderOrdersStatusFilled    PlaceOrderOrdersStatus = "FILLED"
	PlaceOrderOrdersStatusSettled   PlaceOrderOrdersStatus = "SETTLED"
	PlaceOrderOrdersStatusCancelled PlaceOrderOrdersStatus = "CANCELLED"
)

func (e PlaceOrderOrdersStatus) ToPointer() *PlaceOrderOrdersStatus {
	return &e
}

func (e *PlaceOrderOrdersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FILLED":
		fallthrough
	case "SETTLED":
		fallthrough
	case "CANCELLED":
		*e = PlaceOrderOrdersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrdersStatus: %v", v)
	}
}

// PlaceOrderType - Tax type
// * TOTAL -
type PlaceOrderType string

const (
	PlaceOrderTypeTotal PlaceOrderType = "TOTAL"
)

func (e PlaceOrderType) ToPointer() *PlaceOrderType {
	return &e
}

func (e *PlaceOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TOTAL":
		*e = PlaceOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderType: %v", v)
	}
}

type PlaceOrderTax struct {
	Amount string `json:"amount"`
	// Tax type
	// * TOTAL -
	Type *PlaceOrderType `default:"TOTAL" json:"type"`
}

func (p PlaceOrderTax) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaceOrderTax) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaceOrderTax) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *PlaceOrderTax) GetType() *PlaceOrderType {
	if o == nil {
		return nil
	}
	return o.Type
}

type OrderExecution struct {
	CashAmount string `json:"cash_amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency       *PlaceOrderOrdersResponseCurrency `default:"EUR" json:"currency"`
	ID             string                            `json:"id"`
	OrderID        string                            `json:"order_id"`
	Price          string                            `json:"price"`
	SettlementDate *string                           `json:"settlement_date,omitempty"`
	ShareQuantity  string                            `json:"share_quantity"`
	// Side of the execution.
	// * BUY -
	// * SELL -
	Side PlaceOrderOrdersSide `json:"side"`
	// Execution status of the Execution.
	// * FILLED -
	// * SETTLED -
	// * CANCELLED -
	Status          PlaceOrderOrdersStatus `json:"status"`
	Taxes           []PlaceOrderTax        `json:"taxes"`
	TransactionTime time.Time              `json:"transaction_time"`
}

func (o OrderExecution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderExecution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderExecution) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *OrderExecution) GetCurrency() *PlaceOrderOrdersResponseCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *OrderExecution) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OrderExecution) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

func (o *OrderExecution) GetPrice() string {
	if o == nil {
		return ""
	}
	return o.Price
}

func (o *OrderExecution) GetSettlementDate() *string {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *OrderExecution) GetShareQuantity() string {
	if o == nil {
		return ""
	}
	return o.ShareQuantity
}

func (o *OrderExecution) GetSide() PlaceOrderOrdersSide {
	if o == nil {
		return PlaceOrderOrdersSide("")
	}
	return o.Side
}

func (o *OrderExecution) GetStatus() PlaceOrderOrdersStatus {
	if o == nil {
		return PlaceOrderOrdersStatus("")
	}
	return o.Status
}

func (o *OrderExecution) GetTaxes() []PlaceOrderTax {
	if o == nil {
		return []PlaceOrderTax{}
	}
	return o.Taxes
}

func (o *OrderExecution) GetTransactionTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TransactionTime
}

// InitiationFlow - Initiation flow used during order creation, i.e. what triggered the order.
// * API -
// * PORTFOLIO -
// * CASH_DIVIDEND_REINVESTMENT -
// * PORTFOLIO_REBALANCING -
// * SELL_TO_COVER_FEES -
// * SELL_TO_COVER_TAXES -
// * ACCOUNT_LIQUIDATION -
// * UPVEST_OPERATIONS -
type InitiationFlow string

const (
	InitiationFlowAPI                      InitiationFlow = "API"
	InitiationFlowPortfolio                InitiationFlow = "PORTFOLIO"
	InitiationFlowCashDividendReinvestment InitiationFlow = "CASH_DIVIDEND_REINVESTMENT"
	InitiationFlowPortfolioRebalancing     InitiationFlow = "PORTFOLIO_REBALANCING"
	InitiationFlowSellToCoverFees          InitiationFlow = "SELL_TO_COVER_FEES"
	InitiationFlowSellToCoverTaxes         InitiationFlow = "SELL_TO_COVER_TAXES"
	InitiationFlowAccountLiquidation       InitiationFlow = "ACCOUNT_LIQUIDATION"
	InitiationFlowUpvestOperations         InitiationFlow = "UPVEST_OPERATIONS"
)

func (e InitiationFlow) ToPointer() *InitiationFlow {
	return &e
}

func (e *InitiationFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API":
		fallthrough
	case "PORTFOLIO":
		fallthrough
	case "CASH_DIVIDEND_REINVESTMENT":
		fallthrough
	case "PORTFOLIO_REBALANCING":
		fallthrough
	case "SELL_TO_COVER_FEES":
		fallthrough
	case "SELL_TO_COVER_TAXES":
		fallthrough
	case "ACCOUNT_LIQUIDATION":
		fallthrough
	case "UPVEST_OPERATIONS":
		*e = InitiationFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InitiationFlow: %v", v)
	}
}

// PlaceOrderInstrumentIDType - The type of the ID used in the request.
// * ISIN -
type PlaceOrderInstrumentIDType string

const (
	PlaceOrderInstrumentIDTypeIsin PlaceOrderInstrumentIDType = "ISIN"
)

func (e PlaceOrderInstrumentIDType) ToPointer() *PlaceOrderInstrumentIDType {
	return &e
}

func (e *PlaceOrderInstrumentIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ISIN":
		*e = PlaceOrderInstrumentIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderInstrumentIDType: %v", v)
	}
}

// PlaceOrderOrderType - Type of the order.
// * MARKET -
// * LIMIT -
// * STOP -
type PlaceOrderOrderType string

const (
	PlaceOrderOrderTypeMarket PlaceOrderOrderType = "MARKET"
	PlaceOrderOrderTypeLimit  PlaceOrderOrderType = "LIMIT"
	PlaceOrderOrderTypeStop   PlaceOrderOrderType = "STOP"
)

func (e PlaceOrderOrderType) ToPointer() *PlaceOrderOrderType {
	return &e
}

func (e *PlaceOrderOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARKET":
		fallthrough
	case "LIMIT":
		fallthrough
	case "STOP":
		*e = PlaceOrderOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderOrderType: %v", v)
	}
}

// PlaceOrderSide - Side of the order.
// * BUY -
// * SELL -
type PlaceOrderSide string

const (
	PlaceOrderSideBuy  PlaceOrderSide = "BUY"
	PlaceOrderSideSell PlaceOrderSide = "SELL"
)

func (e PlaceOrderSide) ToPointer() *PlaceOrderSide {
	return &e
}

func (e *PlaceOrderSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = PlaceOrderSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderSide: %v", v)
	}
}

// PlaceOrderStatus - The execution status of the order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type PlaceOrderStatus string

const (
	PlaceOrderStatusNew        PlaceOrderStatus = "NEW"
	PlaceOrderStatusProcessing PlaceOrderStatus = "PROCESSING"
	PlaceOrderStatusFilled     PlaceOrderStatus = "FILLED"
	PlaceOrderStatusCancelled  PlaceOrderStatus = "CANCELLED"
)

func (e PlaceOrderStatus) ToPointer() *PlaceOrderStatus {
	return &e
}

func (e *PlaceOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = PlaceOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceOrderStatus: %v", v)
	}
}

// PlaceOrderOrder - The request for the order creation has been accepted for processing.
type PlaceOrderOrder struct {
	// The ID of the account that owns the order
	AccountID string `json:"account_id"`
	// Reason for Order cancellation. The field is present in case the Order has a status of CANCELLED.
	// * CANCELLED_BY_CLIENT -
	// * CANCELLED_BY_UPVEST_OPERATIONS -
	// * CANCELLED_BY_TRADING_PARTNER -
	// * CANCELLED_BY_UPVEST_PLATFORM -
	CancellationReason *CancellationReason `json:"cancellation_reason,omitempty"`
	CashAmount         string              `json:"cash_amount"`
	// An ID provided by the client
	ClientReference string `json:"client_reference"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time                 `json:"created_at"`
	Currency  *PlaceOrderOrdersCurrency `default:"EUR" json:"currency"`
	// Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
	// * STRAIGHT_THROUGH -
	// * BLOCK -
	ExecutionFlow *PlaceOrderExecutionFlow `json:"execution_flow,omitempty"`
	// Order executions associated with this order
	Executions []OrderExecution `json:"executions"`
	ExpiryDate *string          `json:"expiry_date,omitempty"`
	Fee        string           `json:"fee"`
	ID         string           `json:"id"`
	// Initiation flow used during order creation, i.e. what triggered the order.
	// * API -
	// * PORTFOLIO -
	// * CASH_DIVIDEND_REINVESTMENT -
	// * PORTFOLIO_REBALANCING -
	// * SELL_TO_COVER_FEES -
	// * SELL_TO_COVER_TAXES -
	// * ACCOUNT_LIQUIDATION -
	// * UPVEST_OPERATIONS -
	InitiationFlow InitiationFlow `json:"initiation_flow"`
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	InstrumentID string `json:"instrument_id"`
	// The type of the ID used in the request.
	// * ISIN -
	InstrumentIDType *PlaceOrderInstrumentIDType `default:"ISIN" json:"instrument_id_type"`
	LimitPrice       *string                     `json:"limit_price,omitempty"`
	// Type of the order.
	// * MARKET -
	// * LIMIT -
	// * STOP -
	OrderType PlaceOrderOrderType `json:"order_type"`
	Quantity  string              `json:"quantity"`
	// Side of the order.
	// * BUY -
	// * SELL -
	Side PlaceOrderSide `json:"side"`
	// The execution status of the order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status    PlaceOrderStatus `json:"status"`
	StopPrice *string          `json:"stop_price,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// The ID of the user
	UserID string `json:"user_id"`
	// Only applicable if the user has failed the instrument fit check for the instrument type being ordered. True if the user has acknowledged their willingness to trade.
	UserInstrumentFitAcknowledgement *bool `json:"user_instrument_fit_acknowledgement,omitempty"`
}

func (p PlaceOrderOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaceOrderOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaceOrderOrder) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *PlaceOrderOrder) GetCancellationReason() *CancellationReason {
	if o == nil {
		return nil
	}
	return o.CancellationReason
}

func (o *PlaceOrderOrder) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *PlaceOrderOrder) GetClientReference() string {
	if o == nil {
		return ""
	}
	return o.ClientReference
}

func (o *PlaceOrderOrder) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *PlaceOrderOrder) GetCurrency() *PlaceOrderOrdersCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *PlaceOrderOrder) GetExecutionFlow() *PlaceOrderExecutionFlow {
	if o == nil {
		return nil
	}
	return o.ExecutionFlow
}

func (o *PlaceOrderOrder) GetExecutions() []OrderExecution {
	if o == nil {
		return []OrderExecution{}
	}
	return o.Executions
}

func (o *PlaceOrderOrder) GetExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.ExpiryDate
}

func (o *PlaceOrderOrder) GetFee() string {
	if o == nil {
		return ""
	}
	return o.Fee
}

func (o *PlaceOrderOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PlaceOrderOrder) GetInitiationFlow() InitiationFlow {
	if o == nil {
		return InitiationFlow("")
	}
	return o.InitiationFlow
}

func (o *PlaceOrderOrder) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *PlaceOrderOrder) GetInstrumentIDType() *PlaceOrderInstrumentIDType {
	if o == nil {
		return nil
	}
	return o.InstrumentIDType
}

func (o *PlaceOrderOrder) GetLimitPrice() *string {
	if o == nil {
		return nil
	}
	return o.LimitPrice
}

func (o *PlaceOrderOrder) GetOrderType() PlaceOrderOrderType {
	if o == nil {
		return PlaceOrderOrderType("")
	}
	return o.OrderType
}

func (o *PlaceOrderOrder) GetQuantity() string {
	if o == nil {
		return ""
	}
	return o.Quantity
}

func (o *PlaceOrderOrder) GetSide() PlaceOrderSide {
	if o == nil {
		return PlaceOrderSide("")
	}
	return o.Side
}

func (o *PlaceOrderOrder) GetStatus() PlaceOrderStatus {
	if o == nil {
		return PlaceOrderStatus("")
	}
	return o.Status
}

func (o *PlaceOrderOrder) GetStopPrice() *string {
	if o == nil {
		return nil
	}
	return o.StopPrice
}

func (o *PlaceOrderOrder) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *PlaceOrderOrder) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *PlaceOrderOrder) GetUserInstrumentFitAcknowledgement() *bool {
	if o == nil {
		return nil
	}
	return o.UserInstrumentFitAcknowledgement
}

type PlaceOrderResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// The request for the order creation has been accepted for processing.
	Order *PlaceOrderOrder
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PlaceOrderResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PlaceOrderResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *PlaceOrderResponse) GetOrder() *PlaceOrderOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PlaceOrderResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PlaceOrderResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
