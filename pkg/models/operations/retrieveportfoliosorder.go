// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrievePortfoliosOrderSecurity struct {
	OauthClientCredentials string `security:"scheme,type=oauth2,name=Authorization"`
}

func (o *RetrievePortfoliosOrderSecurity) GetOauthClientCredentials() string {
	if o == nil {
		return ""
	}
	return o.OauthClientCredentials
}

type RetrievePortfoliosOrderRequest struct {
	PortfolioOrderID string `pathParam:"style=simple,explode=false,name=portfolio_order_id"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (r RetrievePortfoliosOrderRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrievePortfoliosOrderRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrievePortfoliosOrderRequest) GetPortfolioOrderID() string {
	if o == nil {
		return ""
	}
	return o.PortfolioOrderID
}

func (o *RetrievePortfoliosOrderRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrievePortfoliosOrderRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrievePortfoliosOrderRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrievePortfoliosOrderRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// RetrievePortfoliosOrderCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type RetrievePortfoliosOrderCurrency string

const (
	RetrievePortfoliosOrderCurrencyEur RetrievePortfoliosOrderCurrency = "EUR"
)

func (e RetrievePortfoliosOrderCurrency) ToPointer() *RetrievePortfoliosOrderCurrency {
	return &e
}

func (e *RetrievePortfoliosOrderCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = RetrievePortfoliosOrderCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePortfoliosOrderCurrency: %v", v)
	}
}

// RetrievePortfoliosOrderSide - Side of the portfolio order.
// * BUY -
// * SELL -
type RetrievePortfoliosOrderSide string

const (
	RetrievePortfoliosOrderSideBuy  RetrievePortfoliosOrderSide = "BUY"
	RetrievePortfoliosOrderSideSell RetrievePortfoliosOrderSide = "SELL"
)

func (e RetrievePortfoliosOrderSide) ToPointer() *RetrievePortfoliosOrderSide {
	return &e
}

func (e *RetrievePortfoliosOrderSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = RetrievePortfoliosOrderSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePortfoliosOrderSide: %v", v)
	}
}

// RetrievePortfoliosOrderPortfoliosStatus - The execution status of the order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type RetrievePortfoliosOrderPortfoliosStatus string

const (
	RetrievePortfoliosOrderPortfoliosStatusNew        RetrievePortfoliosOrderPortfoliosStatus = "NEW"
	RetrievePortfoliosOrderPortfoliosStatusProcessing RetrievePortfoliosOrderPortfoliosStatus = "PROCESSING"
	RetrievePortfoliosOrderPortfoliosStatusFilled     RetrievePortfoliosOrderPortfoliosStatus = "FILLED"
	RetrievePortfoliosOrderPortfoliosStatusCancelled  RetrievePortfoliosOrderPortfoliosStatus = "CANCELLED"
)

func (e RetrievePortfoliosOrderPortfoliosStatus) ToPointer() *RetrievePortfoliosOrderPortfoliosStatus {
	return &e
}

func (e *RetrievePortfoliosOrderPortfoliosStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = RetrievePortfoliosOrderPortfoliosStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePortfoliosOrderPortfoliosStatus: %v", v)
	}
}

type RetrievePortfoliosOrderPortfoliosPortfoliosOrder struct {
	ID string `json:"id"`
	// Side of the portfolio order.
	// * BUY -
	// * SELL -
	Side RetrievePortfoliosOrderSide `json:"side"`
	// The execution status of the order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status RetrievePortfoliosOrderPortfoliosStatus `json:"status"`
}

func (o *RetrievePortfoliosOrderPortfoliosPortfoliosOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrievePortfoliosOrderPortfoliosPortfoliosOrder) GetSide() RetrievePortfoliosOrderSide {
	if o == nil {
		return RetrievePortfoliosOrderSide("")
	}
	return o.Side
}

func (o *RetrievePortfoliosOrderPortfoliosPortfoliosOrder) GetStatus() RetrievePortfoliosOrderPortfoliosStatus {
	if o == nil {
		return RetrievePortfoliosOrderPortfoliosStatus("")
	}
	return o.Status
}

// RetrievePortfoliosOrderStatus - Execution status of the Portfolio Order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * SETTLED -
// * CANCELLED -
type RetrievePortfoliosOrderStatus string

const (
	RetrievePortfoliosOrderStatusNew        RetrievePortfoliosOrderStatus = "NEW"
	RetrievePortfoliosOrderStatusProcessing RetrievePortfoliosOrderStatus = "PROCESSING"
	RetrievePortfoliosOrderStatusFilled     RetrievePortfoliosOrderStatus = "FILLED"
	RetrievePortfoliosOrderStatusSettled    RetrievePortfoliosOrderStatus = "SETTLED"
	RetrievePortfoliosOrderStatusCancelled  RetrievePortfoliosOrderStatus = "CANCELLED"
)

func (e RetrievePortfoliosOrderStatus) ToPointer() *RetrievePortfoliosOrderStatus {
	return &e
}

func (e *RetrievePortfoliosOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "SETTLED":
		fallthrough
	case "CANCELLED":
		*e = RetrievePortfoliosOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePortfoliosOrderStatus: %v", v)
	}
}

// RetrievePortfoliosOrderType - Type of the Portfolio Order.
// * BUY -
// * SELL -
// * REBALANCING -
type RetrievePortfoliosOrderType string

const (
	RetrievePortfoliosOrderTypeBuy         RetrievePortfoliosOrderType = "BUY"
	RetrievePortfoliosOrderTypeSell        RetrievePortfoliosOrderType = "SELL"
	RetrievePortfoliosOrderTypeRebalancing RetrievePortfoliosOrderType = "REBALANCING"
)

func (e RetrievePortfoliosOrderType) ToPointer() *RetrievePortfoliosOrderType {
	return &e
}

func (e *RetrievePortfoliosOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		fallthrough
	case "REBALANCING":
		*e = RetrievePortfoliosOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePortfoliosOrderType: %v", v)
	}
}

// RetrievePortfoliosOrderPortfoliosOrder - Portfolios order
type RetrievePortfoliosOrderPortfoliosOrder struct {
	// Account unique identifier.
	AccountID    string  `json:"account_id"`
	AllocationID *string `json:"allocation_id,omitempty"`
	CashAmount   string  `json:"cash_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *RetrievePortfoliosOrderCurrency `default:"EUR" json:"currency"`
	ID       string                           `json:"id"`
	// Orders associated with this portfolio order
	Orders []RetrievePortfoliosOrderPortfoliosPortfoliosOrder `json:"orders"`
	// Cash amount is post-tax value
	PostTax *bool `default:"false" json:"post_tax"`
	// Execution status of the Portfolio Order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * SETTLED -
	// * CANCELLED -
	Status RetrievePortfoliosOrderStatus `json:"status"`
	// Type of the Portfolio Order.
	// * BUY -
	// * SELL -
	// * REBALANCING -
	Type *RetrievePortfoliosOrderType `json:"type,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// User unique identifier.
	UserID *string `json:"user_id,omitempty"`
}

func (r RetrievePortfoliosOrderPortfoliosOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrievePortfoliosOrderPortfoliosOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.AllocationID
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetCurrency() *RetrievePortfoliosOrderCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetOrders() []RetrievePortfoliosOrderPortfoliosPortfoliosOrder {
	if o == nil {
		return []RetrievePortfoliosOrderPortfoliosPortfoliosOrder{}
	}
	return o.Orders
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetPostTax() *bool {
	if o == nil {
		return nil
	}
	return o.PostTax
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetStatus() RetrievePortfoliosOrderStatus {
	if o == nil {
		return RetrievePortfoliosOrderStatus("")
	}
	return o.Status
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetType() *RetrievePortfoliosOrderType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *RetrievePortfoliosOrderPortfoliosOrder) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type RetrievePortfoliosOrderResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Portfolios order
	PortfoliosOrder *RetrievePortfoliosOrderPortfoliosOrder
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *RetrievePortfoliosOrderResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrievePortfoliosOrderResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *RetrievePortfoliosOrderResponse) GetPortfoliosOrder() *RetrievePortfoliosOrderPortfoliosOrder {
	if o == nil {
		return nil
	}
	return o.PortfoliosOrder
}

func (o *RetrievePortfoliosOrderResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrievePortfoliosOrderResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
