// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListAccountsSort - Sort the result by `created_at`.
type ListAccountsSort string

const (
	ListAccountsSortCreatedAt ListAccountsSort = "created_at"
)

func (e ListAccountsSort) ToPointer() *ListAccountsSort {
	return &e
}

func (e *ListAccountsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = ListAccountsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsSort: %v", v)
	}
}

type ListAccountsRequest struct {
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *shared.Order `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Sort the result by `created_at`.
	Sort *ListAccountsSort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListAccountsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAccountsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListAccountsRequest) GetOrder() *shared.Order {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListAccountsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListAccountsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListAccountsRequest) GetSort() *ListAccountsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListAccountsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListAccountsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// ListAccountsAccountsListResponseAccountStatus - The status of the account
// * PENDING_APPROVAL - Account approval is pending - the account is visible through our API but cannot be acted on.
// * ACTIVE - Account is active - full functionality of the Investment API is accessible.
// * CLOSING - Account is closing - only sell orders or the transfer of positions out are permissible before the account is closed.
// * CLOSED - Account is closed with zero balance successfully.
// * LOCKED - Account is locked for all actions.
type ListAccountsAccountsListResponseAccountStatus string

const (
	ListAccountsAccountsListResponseAccountStatusPendingApproval ListAccountsAccountsListResponseAccountStatus = "PENDING_APPROVAL"
	ListAccountsAccountsListResponseAccountStatusActive          ListAccountsAccountsListResponseAccountStatus = "ACTIVE"
	ListAccountsAccountsListResponseAccountStatusClosing         ListAccountsAccountsListResponseAccountStatus = "CLOSING"
	ListAccountsAccountsListResponseAccountStatusClosed          ListAccountsAccountsListResponseAccountStatus = "CLOSED"
	ListAccountsAccountsListResponseAccountStatusLocked          ListAccountsAccountsListResponseAccountStatus = "LOCKED"
)

func (e ListAccountsAccountsListResponseAccountStatus) ToPointer() *ListAccountsAccountsListResponseAccountStatus {
	return &e
}

func (e *ListAccountsAccountsListResponseAccountStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING_APPROVAL":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "CLOSING":
		fallthrough
	case "CLOSED":
		fallthrough
	case "LOCKED":
		*e = ListAccountsAccountsListResponseAccountStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsAccountsListResponseAccountStatus: %v", v)
	}
}

// ListAccountsAccountsListResponseAccountType - Account type.
// * TRADING - Orders in accounts of this type are created on a specific instrument basis.
// * PORTFOLIO - Orders in accounts of this type are created on a portfolio basis and additional portfolio functionality is available.
type ListAccountsAccountsListResponseAccountType string

const (
	ListAccountsAccountsListResponseAccountTypeTrading   ListAccountsAccountsListResponseAccountType = "TRADING"
	ListAccountsAccountsListResponseAccountTypePortfolio ListAccountsAccountsListResponseAccountType = "PORTFOLIO"
)

func (e ListAccountsAccountsListResponseAccountType) ToPointer() *ListAccountsAccountsListResponseAccountType {
	return &e
}

func (e *ListAccountsAccountsListResponseAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRADING":
		fallthrough
	case "PORTFOLIO":
		*e = ListAccountsAccountsListResponseAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsAccountsListResponseAccountType: %v", v)
	}
}

// ListAccountsAccountsListResponseAccountUsersType - Relation type
// * OWNER -
type ListAccountsAccountsListResponseAccountUsersType string

const (
	ListAccountsAccountsListResponseAccountUsersTypeOwner ListAccountsAccountsListResponseAccountUsersType = "OWNER"
)

func (e ListAccountsAccountsListResponseAccountUsersType) ToPointer() *ListAccountsAccountsListResponseAccountUsersType {
	return &e
}

func (e *ListAccountsAccountsListResponseAccountUsersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		*e = ListAccountsAccountsListResponseAccountUsersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsAccountsListResponseAccountUsersType: %v", v)
	}
}

type ListAccountsAccountsListResponseAccountUsers struct {
	// User unique identifier.
	ID *string `json:"id,omitempty"`
	// Relation type
	// * OWNER -
	Type *ListAccountsAccountsListResponseAccountUsersType `default:"OWNER" json:"type"`
}

func (l ListAccountsAccountsListResponseAccountUsers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountsAccountsListResponseAccountUsers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountsAccountsListResponseAccountUsers) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ListAccountsAccountsListResponseAccountUsers) GetType() *ListAccountsAccountsListResponseAccountUsersType {
	if o == nil {
		return nil
	}
	return o.Type
}

type ListAccountsAccountsListResponseAccount struct {
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	// The serial account number of the account in the account group.
	AccountNumber int64 `json:"account_number"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Account unique identifier.
	ID string `json:"id"`
	// The name of the account.
	Name string `json:"name"`
	// The status of the account
	// * PENDING_APPROVAL - Account approval is pending - the account is visible through our API but cannot be acted on.
	// * ACTIVE - Account is active - full functionality of the Investment API is accessible.
	// * CLOSING - Account is closing - only sell orders or the transfer of positions out are permissible before the account is closed.
	// * CLOSED - Account is closed with zero balance successfully.
	// * LOCKED - Account is locked for all actions.
	Status ListAccountsAccountsListResponseAccountStatus `json:"status"`
	// Account type.
	// * TRADING - Orders in accounts of this type are created on a specific instrument basis.
	// * PORTFOLIO - Orders in accounts of this type are created on a portfolio basis and additional portfolio functionality is available.
	Type ListAccountsAccountsListResponseAccountType `json:"type"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time                                      `json:"updated_at"`
	Users     []ListAccountsAccountsListResponseAccountUsers `json:"users"`
}

func (l ListAccountsAccountsListResponseAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountsAccountsListResponseAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountsAccountsListResponseAccount) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *ListAccountsAccountsListResponseAccount) GetAccountNumber() int64 {
	if o == nil {
		return 0
	}
	return o.AccountNumber
}

func (o *ListAccountsAccountsListResponseAccount) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListAccountsAccountsListResponseAccount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListAccountsAccountsListResponseAccount) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListAccountsAccountsListResponseAccount) GetStatus() ListAccountsAccountsListResponseAccountStatus {
	if o == nil {
		return ListAccountsAccountsListResponseAccountStatus("")
	}
	return o.Status
}

func (o *ListAccountsAccountsListResponseAccount) GetType() ListAccountsAccountsListResponseAccountType {
	if o == nil {
		return ListAccountsAccountsListResponseAccountType("")
	}
	return o.Type
}

func (o *ListAccountsAccountsListResponseAccount) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ListAccountsAccountsListResponseAccount) GetUsers() []ListAccountsAccountsListResponseAccountUsers {
	if o == nil {
		return []ListAccountsAccountsListResponseAccountUsers{}
	}
	return o.Users
}

// ListAccountsAccountsListResponseMetaOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListAccountsAccountsListResponseMetaOrder string

const (
	ListAccountsAccountsListResponseMetaOrderAsc  ListAccountsAccountsListResponseMetaOrder = "ASC"
	ListAccountsAccountsListResponseMetaOrderDesc ListAccountsAccountsListResponseMetaOrder = "DESC"
)

func (e ListAccountsAccountsListResponseMetaOrder) ToPointer() *ListAccountsAccountsListResponseMetaOrder {
	return &e
}

func (e *ListAccountsAccountsListResponseMetaOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListAccountsAccountsListResponseMetaOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsAccountsListResponseMetaOrder: %v", v)
	}
}

type ListAccountsAccountsListResponseMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListAccountsAccountsListResponseMetaOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListAccountsAccountsListResponseMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListAccountsAccountsListResponseMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListAccountsAccountsListResponseMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListAccountsAccountsListResponseMeta) GetOrder() *ListAccountsAccountsListResponseMetaOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListAccountsAccountsListResponseMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListAccountsAccountsListResponseMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListAccountsAccountsListResponse - OK
type ListAccountsAccountsListResponse struct {
	Data []ListAccountsAccountsListResponseAccount `json:"data"`
	Meta ListAccountsAccountsListResponseMeta      `json:"meta"`
}

func (o *ListAccountsAccountsListResponse) GetData() []ListAccountsAccountsListResponseAccount {
	if o == nil {
		return []ListAccountsAccountsListResponseAccount{}
	}
	return o.Data
}

func (o *ListAccountsAccountsListResponse) GetMeta() ListAccountsAccountsListResponseMeta {
	if o == nil {
		return ListAccountsAccountsListResponseMeta{}
	}
	return o.Meta
}

type ListAccountsResponse struct {
	// OK
	AccountsListResponse *ListAccountsAccountsListResponse
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListAccountsResponse) GetAccountsListResponse() *ListAccountsAccountsListResponse {
	if o == nil {
		return nil
	}
	return o.AccountsListResponse
}

func (o *ListAccountsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListAccountsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListAccountsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListAccountsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
