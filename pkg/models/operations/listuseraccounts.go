// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListUserAccountsQueryParamSort - Sort the result by `created_at`.
type ListUserAccountsQueryParamSort string

const (
	ListUserAccountsQueryParamSortCreatedAt ListUserAccountsQueryParamSort = "created_at"
)

func (e ListUserAccountsQueryParamSort) ToPointer() *ListUserAccountsQueryParamSort {
	return &e
}

func (e *ListUserAccountsQueryParamSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = ListUserAccountsQueryParamSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserAccountsQueryParamSort: %v", v)
	}
}

type ListUserAccountsRequest struct {
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *shared.Order `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Sort the result by `created_at`.
	Sort *ListUserAccountsQueryParamSort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (l ListUserAccountsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserAccountsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListUserAccountsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListUserAccountsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListUserAccountsRequest) GetOrder() *shared.Order {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListUserAccountsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListUserAccountsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListUserAccountsRequest) GetSort() *ListUserAccountsQueryParamSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListUserAccountsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListUserAccountsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *ListUserAccountsRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListUserAccountsStatus - The status of the account
// * PENDING_APPROVAL - Account approval is pending - the account is visible through our API but cannot be acted on.
// * ACTIVE - Account is active - full functionality of the Investment API is accessible.
// * CLOSING - Account is closing - only sell orders or the transfer of positions out are permissible before the account is closed.
// * CLOSED - Account is closed with zero balance successfully.
// * LOCKED - Account is locked for all actions.
type ListUserAccountsStatus string

const (
	ListUserAccountsStatusPendingApproval ListUserAccountsStatus = "PENDING_APPROVAL"
	ListUserAccountsStatusActive          ListUserAccountsStatus = "ACTIVE"
	ListUserAccountsStatusClosing         ListUserAccountsStatus = "CLOSING"
	ListUserAccountsStatusClosed          ListUserAccountsStatus = "CLOSED"
	ListUserAccountsStatusLocked          ListUserAccountsStatus = "LOCKED"
)

func (e ListUserAccountsStatus) ToPointer() *ListUserAccountsStatus {
	return &e
}

func (e *ListUserAccountsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING_APPROVAL":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "CLOSING":
		fallthrough
	case "CLOSED":
		fallthrough
	case "LOCKED":
		*e = ListUserAccountsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserAccountsStatus: %v", v)
	}
}

// ListUserAccountsType - Account type.
// * TRADING - Orders in accounts of this type are created on a specific instrument basis.
// * PORTFOLIO - Orders in accounts of this type are created on a portfolio basis and additional portfolio functionality is available.
type ListUserAccountsType string

const (
	ListUserAccountsTypeTrading   ListUserAccountsType = "TRADING"
	ListUserAccountsTypePortfolio ListUserAccountsType = "PORTFOLIO"
)

func (e ListUserAccountsType) ToPointer() *ListUserAccountsType {
	return &e
}

func (e *ListUserAccountsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRADING":
		fallthrough
	case "PORTFOLIO":
		*e = ListUserAccountsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserAccountsType: %v", v)
	}
}

// ListUserAccountsUsersType - Relation type
// * OWNER -
type ListUserAccountsUsersType string

const (
	ListUserAccountsUsersTypeOwner ListUserAccountsUsersType = "OWNER"
)

func (e ListUserAccountsUsersType) ToPointer() *ListUserAccountsUsersType {
	return &e
}

func (e *ListUserAccountsUsersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		*e = ListUserAccountsUsersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserAccountsUsersType: %v", v)
	}
}

type ListUserAccountsUsers struct {
	// User unique identifier.
	ID *string `json:"id,omitempty"`
	// Relation type
	// * OWNER -
	Type *ListUserAccountsUsersType `default:"OWNER" json:"type"`
}

func (l ListUserAccountsUsers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserAccountsUsers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListUserAccountsUsers) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ListUserAccountsUsers) GetType() *ListUserAccountsUsersType {
	if o == nil {
		return nil
	}
	return o.Type
}

type ListUserAccountsAccount struct {
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	// The serial account number of the account in the account group.
	AccountNumber int64 `json:"account_number"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Account unique identifier.
	ID string `json:"id"`
	// The name of the account.
	Name string `json:"name"`
	// The status of the account
	// * PENDING_APPROVAL - Account approval is pending - the account is visible through our API but cannot be acted on.
	// * ACTIVE - Account is active - full functionality of the Investment API is accessible.
	// * CLOSING - Account is closing - only sell orders or the transfer of positions out are permissible before the account is closed.
	// * CLOSED - Account is closed with zero balance successfully.
	// * LOCKED - Account is locked for all actions.
	Status ListUserAccountsStatus `json:"status"`
	// Account type.
	// * TRADING - Orders in accounts of this type are created on a specific instrument basis.
	// * PORTFOLIO - Orders in accounts of this type are created on a portfolio basis and additional portfolio functionality is available.
	Type ListUserAccountsType `json:"type"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time               `json:"updated_at"`
	Users     []ListUserAccountsUsers `json:"users"`
}

func (l ListUserAccountsAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserAccountsAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListUserAccountsAccount) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *ListUserAccountsAccount) GetAccountNumber() int64 {
	if o == nil {
		return 0
	}
	return o.AccountNumber
}

func (o *ListUserAccountsAccount) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListUserAccountsAccount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserAccountsAccount) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListUserAccountsAccount) GetStatus() ListUserAccountsStatus {
	if o == nil {
		return ListUserAccountsStatus("")
	}
	return o.Status
}

func (o *ListUserAccountsAccount) GetType() ListUserAccountsType {
	if o == nil {
		return ListUserAccountsType("")
	}
	return o.Type
}

func (o *ListUserAccountsAccount) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ListUserAccountsAccount) GetUsers() []ListUserAccountsUsers {
	if o == nil {
		return []ListUserAccountsUsers{}
	}
	return o.Users
}

// ListUserAccountsOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListUserAccountsOrder string

const (
	ListUserAccountsOrderAsc  ListUserAccountsOrder = "ASC"
	ListUserAccountsOrderDesc ListUserAccountsOrder = "DESC"
)

func (e ListUserAccountsOrder) ToPointer() *ListUserAccountsOrder {
	return &e
}

func (e *ListUserAccountsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListUserAccountsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserAccountsOrder: %v", v)
	}
}

type ListUserAccountsMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListUserAccountsOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListUserAccountsMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListUserAccountsMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListUserAccountsMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListUserAccountsMeta) GetOrder() *ListUserAccountsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListUserAccountsMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListUserAccountsMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListUserAccountsAccountsListResponse - OK
type ListUserAccountsAccountsListResponse struct {
	Data []ListUserAccountsAccount `json:"data"`
	Meta ListUserAccountsMeta      `json:"meta"`
}

func (o *ListUserAccountsAccountsListResponse) GetData() []ListUserAccountsAccount {
	if o == nil {
		return []ListUserAccountsAccount{}
	}
	return o.Data
}

func (o *ListUserAccountsAccountsListResponse) GetMeta() ListUserAccountsMeta {
	if o == nil {
		return ListUserAccountsMeta{}
	}
	return o.Meta
}

type ListUserAccountsResponse struct {
	// OK
	AccountsListResponse *ListUserAccountsAccountsListResponse
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListUserAccountsResponse) GetAccountsListResponse() *ListUserAccountsAccountsListResponse {
	if o == nil {
		return nil
	}
	return o.AccountsListResponse
}

func (o *ListUserAccountsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListUserAccountsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListUserAccountsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListUserAccountsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
