// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListAccountsLiquidationsSort - Sort the result by `id`.
type ListAccountsLiquidationsSort string

const (
	ListAccountsLiquidationsSortID ListAccountsLiquidationsSort = "id"
)

func (e ListAccountsLiquidationsSort) ToPointer() *ListAccountsLiquidationsSort {
	return &e
}

func (e *ListAccountsLiquidationsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		*e = ListAccountsLiquidationsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsLiquidationsSort: %v", v)
	}
}

type ListAccountsLiquidationsRequest struct {
	AccountID string `pathParam:"style=simple,explode=false,name=account_id"`
	// Returns accounts liquidations created up until this date (UTC)
	EndDate *string `queryParam:"style=form,explode=true,name=end_date"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *shared.Order `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Sort the result by `id`.
	Sort *ListAccountsLiquidationsSort `default:"id" queryParam:"style=form,explode=true,name=sort"`
	// Returns accounts liquidations created starting from and including this date (UTC)
	StartDate *string `queryParam:"style=form,explode=true,name=start_date"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListAccountsLiquidationsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountsLiquidationsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountsLiquidationsRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListAccountsLiquidationsRequest) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ListAccountsLiquidationsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAccountsLiquidationsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListAccountsLiquidationsRequest) GetOrder() *shared.Order {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListAccountsLiquidationsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListAccountsLiquidationsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListAccountsLiquidationsRequest) GetSort() *ListAccountsLiquidationsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListAccountsLiquidationsRequest) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ListAccountsLiquidationsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListAccountsLiquidationsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency string

const (
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrencyEur ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency = "EUR"
)

func (e ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency) ToPointer() *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency {
	return &e
}

func (e *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency: %v", v)
	}
}

// ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus - Execution status of the Account liquidation order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus string

const (
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatusNew        ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus = "NEW"
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatusProcessing ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus = "PROCESSING"
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatusFilled     ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus = "FILLED"
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatusCancelled  ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus = "CANCELLED"
)

func (e ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus) ToPointer() *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus {
	return &e
}

func (e *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus: %v", v)
	}
}

type ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidation struct {
	ID string `json:"id"`
	// Side of the order.
	// * SELL -
	Side *string `default:"SELL" json:"side"`
	// Execution status of the Account liquidation order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus `json:"status"`
}

func (l ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidation) GetSide() *string {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidation) GetStatus() ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus {
	if o == nil {
		return ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidationStatus("")
	}
	return o.Status
}

// ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus - Execution status of the Account liquidation.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
// * SETTLED -
type ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus string

const (
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatusNew        ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus = "NEW"
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatusProcessing ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus = "PROCESSING"
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatusFilled     ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus = "FILLED"
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatusCancelled  ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus = "CANCELLED"
	ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatusSettled    ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus = "SETTLED"
)

func (e ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus) ToPointer() *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus {
	return &e
}

func (e *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "SETTLED":
		*e = ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus: %v", v)
	}
}

type ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation struct {
	// Account unique identifier.
	AccountID  string `json:"account_id"`
	CashAmount string `json:"cash_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency `default:"EUR" json:"currency"`
	ID       string                                                                          `json:"id"`
	// Position liquidation orders associated with this account liquidation
	Orders []ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidation `json:"orders"`
	// Execution status of the Account liquidation.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	// * SETTLED -
	Status ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus `json:"status"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// User unique identifier.
	UserID *string `json:"user_id,omitempty"`
}

func (l ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) GetCurrency() *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) GetOrders() []ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidation {
	if o == nil {
		return []ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationAccountLiquidation{}
	}
	return o.Orders
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) GetStatus() ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus {
	if o == nil {
		return ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidationStatus("")
	}
	return o.Status
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

// ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder string

const (
	ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrderAsc  ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder = "ASC"
	ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrderDesc ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder = "DESC"
)

func (e ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder) ToPointer() *ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder {
	return &e
}

func (e *ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder: %v", v)
	}
}

type ListAccountsLiquidationsPortfoliosOrdersListResponseMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseMeta) GetOrder() *ListAccountsLiquidationsPortfoliosOrdersListResponseMetaOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponseMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListAccountsLiquidationsPortfoliosOrdersListResponse - Accounts liquidations
type ListAccountsLiquidationsPortfoliosOrdersListResponse struct {
	Data []ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation `json:"data"`
	Meta ListAccountsLiquidationsPortfoliosOrdersListResponseMeta                 `json:"meta"`
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponse) GetData() []ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation {
	if o == nil {
		return []ListAccountsLiquidationsPortfoliosOrdersListResponseAccountLiquidation{}
	}
	return o.Data
}

func (o *ListAccountsLiquidationsPortfoliosOrdersListResponse) GetMeta() ListAccountsLiquidationsPortfoliosOrdersListResponseMeta {
	if o == nil {
		return ListAccountsLiquidationsPortfoliosOrdersListResponseMeta{}
	}
	return o.Meta
}

type ListAccountsLiquidationsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Accounts liquidations
	PortfoliosOrdersListResponse *ListAccountsLiquidationsPortfoliosOrdersListResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListAccountsLiquidationsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListAccountsLiquidationsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListAccountsLiquidationsResponse) GetPortfoliosOrdersListResponse() *ListAccountsLiquidationsPortfoliosOrdersListResponse {
	if o == nil {
		return nil
	}
	return o.PortfoliosOrdersListResponse
}

func (o *ListAccountsLiquidationsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListAccountsLiquidationsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
