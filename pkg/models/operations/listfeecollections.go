// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type ListFeeCollectionsRequest struct {
	AccountGroupID string `queryParam:"style=form,explode=true,name=account_group_id"`
	AccountID      string `queryParam:"style=form,explode=true,name=account_id"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *shared.Order `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListFeeCollectionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListFeeCollectionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListFeeCollectionsRequest) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *ListFeeCollectionsRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListFeeCollectionsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListFeeCollectionsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListFeeCollectionsRequest) GetOrder() *shared.Order {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListFeeCollectionsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListFeeCollectionsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListFeeCollectionsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListFeeCollectionsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency string

const (
	ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrencyEur ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency = "EUR"
)

func (e ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency) ToPointer() *ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency {
	return &e
}

func (e *ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency: %v", v)
	}
}

type ListFeeCollectionsFeeCollectionListResponseFeeCollectionProcessedAmount struct {
	CashBalance *string `json:"cash_balance,omitempty"`
	SellToCover *string `json:"sell_to_cover,omitempty"`
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollectionProcessedAmount) GetCashBalance() *string {
	if o == nil {
		return nil
	}
	return o.CashBalance
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollectionProcessedAmount) GetSellToCover() *string {
	if o == nil {
		return nil
	}
	return o.SellToCover
}

// ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus - Status of the fee collection
// * PROCESSING - Fee collection is in progress.
// * FINALISED - Fees have been collected from the account and the funds has been transferred to the client.
// * CANCELLED - Fee collection has been cancelled.
type ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus string

const (
	ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatusProcessing ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus = "PROCESSING"
	ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatusFinalised  ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus = "FINALISED"
	ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatusCancelled  ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus = "CANCELLED"
)

func (e ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus) ToPointer() *ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus {
	return &e
}

func (e *ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCESSING":
		fallthrough
	case "FINALISED":
		fallthrough
	case "CANCELLED":
		*e = ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus: %v", v)
	}
}

// ListFeeCollectionsFeeCollectionListResponseFeeCollectionType - Type of the fee collection
// * SERVICE_FEE - Service fee intake in a pre-defined cadence (e.g. monthly)
// * SERVICE_FEE_LIQUIDATION - Service fee intake as a result of a Portfolio liquidation
type ListFeeCollectionsFeeCollectionListResponseFeeCollectionType string

const (
	ListFeeCollectionsFeeCollectionListResponseFeeCollectionTypeServiceFee            ListFeeCollectionsFeeCollectionListResponseFeeCollectionType = "SERVICE_FEE"
	ListFeeCollectionsFeeCollectionListResponseFeeCollectionTypeServiceFeeLiquidation ListFeeCollectionsFeeCollectionListResponseFeeCollectionType = "SERVICE_FEE_LIQUIDATION"
)

func (e ListFeeCollectionsFeeCollectionListResponseFeeCollectionType) ToPointer() *ListFeeCollectionsFeeCollectionListResponseFeeCollectionType {
	return &e
}

func (e *ListFeeCollectionsFeeCollectionListResponseFeeCollectionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SERVICE_FEE":
		fallthrough
	case "SERVICE_FEE_LIQUIDATION":
		*e = ListFeeCollectionsFeeCollectionListResponseFeeCollectionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListFeeCollectionsFeeCollectionListResponseFeeCollectionType: %v", v)
	}
}

type ListFeeCollectionsFeeCollectionListResponseFeeCollection struct {
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	// Account unique identifier.
	AccountID        string `json:"account_id"`
	CollectionAmount string `json:"collection_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency `default:"EUR" json:"currency"`
	// Fee collection unique identifier.
	ID string `json:"id"`
	// End date of the fee collection period in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339) RFC 3339
	PeriodEnd types.Date `json:"period_end"`
	// Start date of the fee collection period in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339) RFC 3339
	PeriodStart     types.Date                                                              `json:"period_start"`
	ProcessedAmount ListFeeCollectionsFeeCollectionListResponseFeeCollectionProcessedAmount `json:"processed_amount"`
	// Status of the fee collection
	// * PROCESSING - Fee collection is in progress.
	// * FINALISED - Fees have been collected from the account and the funds has been transferred to the client.
	// * CANCELLED - Fee collection has been cancelled.
	Status ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus `json:"status"`
	// Type of the fee collection
	// * SERVICE_FEE - Service fee intake in a pre-defined cadence (e.g. monthly)
	// * SERVICE_FEE_LIQUIDATION - Service fee intake as a result of a Portfolio liquidation
	Type ListFeeCollectionsFeeCollectionListResponseFeeCollectionType `json:"type"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (l ListFeeCollectionsFeeCollectionListResponseFeeCollection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListFeeCollectionsFeeCollectionListResponseFeeCollection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetCollectionAmount() string {
	if o == nil {
		return ""
	}
	return o.CollectionAmount
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetCurrency() *ListFeeCollectionsFeeCollectionListResponseFeeCollectionCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetPeriodEnd() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.PeriodEnd
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetPeriodStart() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.PeriodStart
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetProcessedAmount() ListFeeCollectionsFeeCollectionListResponseFeeCollectionProcessedAmount {
	if o == nil {
		return ListFeeCollectionsFeeCollectionListResponseFeeCollectionProcessedAmount{}
	}
	return o.ProcessedAmount
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetStatus() ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus {
	if o == nil {
		return ListFeeCollectionsFeeCollectionListResponseFeeCollectionStatus("")
	}
	return o.Status
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetType() ListFeeCollectionsFeeCollectionListResponseFeeCollectionType {
	if o == nil {
		return ListFeeCollectionsFeeCollectionListResponseFeeCollectionType("")
	}
	return o.Type
}

func (o *ListFeeCollectionsFeeCollectionListResponseFeeCollection) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// ListFeeCollectionsFeeCollectionListResponseMetaOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListFeeCollectionsFeeCollectionListResponseMetaOrder string

const (
	ListFeeCollectionsFeeCollectionListResponseMetaOrderAsc  ListFeeCollectionsFeeCollectionListResponseMetaOrder = "ASC"
	ListFeeCollectionsFeeCollectionListResponseMetaOrderDesc ListFeeCollectionsFeeCollectionListResponseMetaOrder = "DESC"
)

func (e ListFeeCollectionsFeeCollectionListResponseMetaOrder) ToPointer() *ListFeeCollectionsFeeCollectionListResponseMetaOrder {
	return &e
}

func (e *ListFeeCollectionsFeeCollectionListResponseMetaOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListFeeCollectionsFeeCollectionListResponseMetaOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListFeeCollectionsFeeCollectionListResponseMetaOrder: %v", v)
	}
}

type ListFeeCollectionsFeeCollectionListResponseMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListFeeCollectionsFeeCollectionListResponseMetaOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListFeeCollectionsFeeCollectionListResponseMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListFeeCollectionsFeeCollectionListResponseMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListFeeCollectionsFeeCollectionListResponseMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListFeeCollectionsFeeCollectionListResponseMeta) GetOrder() *ListFeeCollectionsFeeCollectionListResponseMetaOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListFeeCollectionsFeeCollectionListResponseMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListFeeCollectionsFeeCollectionListResponseMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListFeeCollectionsFeeCollectionListResponse - OK
type ListFeeCollectionsFeeCollectionListResponse struct {
	Data []ListFeeCollectionsFeeCollectionListResponseFeeCollection `json:"data"`
	Meta ListFeeCollectionsFeeCollectionListResponseMeta            `json:"meta"`
}

func (o *ListFeeCollectionsFeeCollectionListResponse) GetData() []ListFeeCollectionsFeeCollectionListResponseFeeCollection {
	if o == nil {
		return []ListFeeCollectionsFeeCollectionListResponseFeeCollection{}
	}
	return o.Data
}

func (o *ListFeeCollectionsFeeCollectionListResponse) GetMeta() ListFeeCollectionsFeeCollectionListResponseMeta {
	if o == nil {
		return ListFeeCollectionsFeeCollectionListResponseMeta{}
	}
	return o.Meta
}

type ListFeeCollectionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// OK
	FeeCollectionListResponse *ListFeeCollectionsFeeCollectionListResponse
	Headers                   map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListFeeCollectionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListFeeCollectionsResponse) GetFeeCollectionListResponse() *ListFeeCollectionsFeeCollectionListResponse {
	if o == nil {
		return nil
	}
	return o.FeeCollectionListResponse
}

func (o *ListFeeCollectionsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListFeeCollectionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListFeeCollectionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
