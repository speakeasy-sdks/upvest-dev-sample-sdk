// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// QueryParamOrder - Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
type QueryParamOrder string

const (
	QueryParamOrderAsc  QueryParamOrder = "ASC"
	QueryParamOrderDesc QueryParamOrder = "DESC"
)

func (e QueryParamOrder) ToPointer() *QueryParamOrder {
	return &e
}

func (e *QueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = QueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamOrder: %v", v)
	}
}

// ListMandatesQueryParamSort - Field of resource to sort by
type ListMandatesQueryParamSort string

const (
	ListMandatesQueryParamSortID        ListMandatesQueryParamSort = "id"
	ListMandatesQueryParamSortCreatedAt ListMandatesQueryParamSort = "created_at"
)

func (e ListMandatesQueryParamSort) ToPointer() *ListMandatesQueryParamSort {
	return &e
}

func (e *ListMandatesQueryParamSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "created_at":
		*e = ListMandatesQueryParamSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMandatesQueryParamSort: %v", v)
	}
}

type ListMandatesRequest struct {
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *QueryParamOrder `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Field of resource to sort by
	Sort *ListMandatesQueryParamSort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (l ListMandatesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListMandatesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListMandatesRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListMandatesRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListMandatesRequest) GetOrder() *QueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListMandatesRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListMandatesRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListMandatesRequest) GetSort() *ListMandatesQueryParamSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListMandatesRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListMandatesRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *ListMandatesRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListMandatesAddress - Address. Must not be a P.O. box or c/o address.
type ListMandatesAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *ListMandatesAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *ListMandatesAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *ListMandatesAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *ListMandatesAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *ListMandatesAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *ListMandatesAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// ListMandatesType - Type of mandate.
// * RECURRENT -
type ListMandatesType string

const (
	ListMandatesTypeRecurrent ListMandatesType = "RECURRENT"
)

func (e ListMandatesType) ToPointer() *ListMandatesType {
	return &e
}

func (e *ListMandatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RECURRENT":
		*e = ListMandatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMandatesType: %v", v)
	}
}

type DirectDebitMandate struct {
	// Business Identifier Code (also known as SWIFT-BIC, BIC, SWIFT ID or SWIFT code) [ISO 9362](https://en.wikipedia.org/wiki/ISO_9362).
	Bic string `json:"bic"`
	// Timestamp of when user validated the mandate
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Address. Must not be a P.O. box or c/o address.
	CreditorAddress ListMandatesAddress `json:"creditor_address"`
	// Banking identifier of the creditor.
	CreditorID string `json:"creditor_id"`
	// Name of the creditor on the mandate.
	CreditorName string `json:"creditor_name"`
	// International Bank Account Number [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number).
	Iban string `json:"iban"`
	// Direct Debit Mandate unique identifier.
	ID string `json:"id"`
	// Type of mandate.
	// * RECURRENT -
	Type *ListMandatesType `default:"RECURRENT" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (d DirectDebitMandate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DirectDebitMandate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DirectDebitMandate) GetBic() string {
	if o == nil {
		return ""
	}
	return o.Bic
}

func (o *DirectDebitMandate) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *DirectDebitMandate) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DirectDebitMandate) GetCreditorAddress() ListMandatesAddress {
	if o == nil {
		return ListMandatesAddress{}
	}
	return o.CreditorAddress
}

func (o *DirectDebitMandate) GetCreditorID() string {
	if o == nil {
		return ""
	}
	return o.CreditorID
}

func (o *DirectDebitMandate) GetCreditorName() string {
	if o == nil {
		return ""
	}
	return o.CreditorName
}

func (o *DirectDebitMandate) GetIban() string {
	if o == nil {
		return ""
	}
	return o.Iban
}

func (o *DirectDebitMandate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DirectDebitMandate) GetType() *ListMandatesType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *DirectDebitMandate) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListMandatesOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListMandatesOrder string

const (
	ListMandatesOrderAsc  ListMandatesOrder = "ASC"
	ListMandatesOrderDesc ListMandatesOrder = "DESC"
)

func (e ListMandatesOrder) ToPointer() *ListMandatesOrder {
	return &e
}

func (e *ListMandatesOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListMandatesOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMandatesOrder: %v", v)
	}
}

type ListMandatesMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListMandatesOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListMandatesMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListMandatesMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListMandatesMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListMandatesMeta) GetOrder() *ListMandatesOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListMandatesMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListMandatesMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListMandatesMandatesListResponse - Mandates list
type ListMandatesMandatesListResponse struct {
	Data []DirectDebitMandate `json:"data"`
	Meta ListMandatesMeta     `json:"meta"`
}

func (o *ListMandatesMandatesListResponse) GetData() []DirectDebitMandate {
	if o == nil {
		return []DirectDebitMandate{}
	}
	return o.Data
}

func (o *ListMandatesMandatesListResponse) GetMeta() ListMandatesMeta {
	if o == nil {
		return ListMandatesMeta{}
	}
	return o.Meta
}

type ListMandatesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Mandates list
	MandatesListResponse *ListMandatesMandatesListResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListMandatesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListMandatesResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListMandatesResponse) GetMandatesListResponse() *ListMandatesMandatesListResponse {
	if o == nil {
		return nil
	}
	return o.MandatesListResponse
}

func (o *ListMandatesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListMandatesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
