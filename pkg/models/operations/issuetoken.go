// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
)

// IssueTokenRequestAuthRequestAccessToken - Schema for access token request.
type IssueTokenRequestAuthRequestAccessToken struct {
	// Client ID given during onboarding.
	ClientID string `form:"name=client_id"`
	// Client Secret given during onboarding.
	ClientSecret string `form:"name=client_secret"`
	// This must always be `client_credentials`.
	GrantType *string `default:"client_credentials" form:"name=grant_type"`
	// List of space delimited scopes to request for this access token.
	Scope string `form:"name=scope"`
}

func (i IssueTokenRequestAuthRequestAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IssueTokenRequestAuthRequestAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IssueTokenRequestAuthRequestAccessToken) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *IssueTokenRequestAuthRequestAccessToken) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *IssueTokenRequestAuthRequestAccessToken) GetGrantType() *string {
	if o == nil {
		return nil
	}
	return o.GrantType
}

func (o *IssueTokenRequestAuthRequestAccessToken) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

type IssueTokenRequest struct {
	RequestBody *IssueTokenRequestAuthRequestAccessToken `request:"mediaType=application/x-www-form-urlencoded"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (i IssueTokenRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IssueTokenRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IssueTokenRequest) GetRequestBody() *IssueTokenRequestAuthRequestAccessToken {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *IssueTokenRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *IssueTokenRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *IssueTokenRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *IssueTokenRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// IssueTokenAuthAccessToken - Schema for an access token response.
type IssueTokenAuthAccessToken struct {
	// The generated access token.
	AccessToken string `json:"access_token"`
	// How many seconds the access token is valid for.
	ExpiresIn int64 `json:"expires_in"`
	// List of space delimited scopes requested for this access token.
	Scope string `json:"scope"`
	// This is always 'bearer'.
	TokenType *string `default:"bearer" json:"token_type"`
}

func (i IssueTokenAuthAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IssueTokenAuthAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IssueTokenAuthAccessToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *IssueTokenAuthAccessToken) GetExpiresIn() int64 {
	if o == nil {
		return 0
	}
	return o.ExpiresIn
}

func (o *IssueTokenAuthAccessToken) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *IssueTokenAuthAccessToken) GetTokenType() *string {
	if o == nil {
		return nil
	}
	return o.TokenType
}

type IssueTokenResponse struct {
	// Access token successfully generated.
	TwoHundredApplicationJSONAuthAccessToken *IssueTokenAuthAccessToken
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *IssueTokenResponse) GetTwoHundredApplicationJSONAuthAccessToken() *IssueTokenAuthAccessToken {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONAuthAccessToken
}

func (o *IssueTokenResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *IssueTokenResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *IssueTokenResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *IssueTokenResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
