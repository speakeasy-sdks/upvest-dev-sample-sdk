// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// GetAccountValuationPriceQuality - Defines the quality of the price used in the valuation.
type GetAccountValuationPriceQuality string

const (
	GetAccountValuationPriceQualityEod GetAccountValuationPriceQuality = "EOD"
)

func (e GetAccountValuationPriceQuality) ToPointer() *GetAccountValuationPriceQuality {
	return &e
}

func (e *GetAccountValuationPriceQuality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EOD":
		*e = GetAccountValuationPriceQuality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountValuationPriceQuality: %v", v)
	}
}

type GetAccountValuationRequest struct {
	AccountID string `pathParam:"style=simple,explode=false,name=account_id"`
	// Defines the quality of the price used in the valuation.
	PriceQuality GetAccountValuationPriceQuality `queryParam:"style=form,explode=true,name=price_quality"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (g GetAccountValuationRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAccountValuationRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAccountValuationRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *GetAccountValuationRequest) GetPriceQuality() GetAccountValuationPriceQuality {
	if o == nil {
		return GetAccountValuationPriceQuality("")
	}
	return o.PriceQuality
}

func (o *GetAccountValuationRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *GetAccountValuationRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *GetAccountValuationRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *GetAccountValuationRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// GetAccountValuationAccountValuationPriceQuality - Price quality used for the calculation of the account valuation.
// * EOD - end of day price
type GetAccountValuationAccountValuationPriceQuality string

const (
	GetAccountValuationAccountValuationPriceQualityEod GetAccountValuationAccountValuationPriceQuality = "EOD"
)

func (e GetAccountValuationAccountValuationPriceQuality) ToPointer() *GetAccountValuationAccountValuationPriceQuality {
	return &e
}

func (e *GetAccountValuationAccountValuationPriceQuality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EOD":
		*e = GetAccountValuationAccountValuationPriceQuality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountValuationAccountValuationPriceQuality: %v", v)
	}
}

// GetAccountValuationAccountValuationAccountValuationSecurityPositionInstrument - Entity representing the financial instrument.
type GetAccountValuationAccountValuationAccountValuationSecurityPositionInstrument struct {
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	Isin *string `json:"isin,omitempty"`
	// String representing the instrument internal identifier.
	UUID string `json:"uuid"`
}

func (o *GetAccountValuationAccountValuationAccountValuationSecurityPositionInstrument) GetIsin() *string {
	if o == nil {
		return nil
	}
	return o.Isin
}

func (o *GetAccountValuationAccountValuationAccountValuationSecurityPositionInstrument) GetUUID() string {
	if o == nil {
		return ""
	}
	return o.UUID
}

// GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency string

const (
	GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrencyEur GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency = "EUR"
)

func (e GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency) ToPointer() *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency {
	return &e
}

func (e *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency: %v", v)
	}
}

// GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValue - Entity representing the monetary value by amount and currency, and the time of the price used.
type GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValue struct {
	Amount string `json:"amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency `default:"EUR" json:"currency"`
	// The date and time of the price used for the calculation. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	PriceTime time.Time `json:"price_time"`
}

func (g GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValue) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValue) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValue) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValue) GetCurrency() *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValueCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValue) GetPriceTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.PriceTime
}

type GetAccountValuationAccountValuationAccountValuationSecurityPosition struct {
	// Entity representing the financial instrument.
	Instrument GetAccountValuationAccountValuationAccountValuationSecurityPositionInstrument             `json:"instrument"`
	Quantity   string                                                                                    `json:"quantity"`
	Value      *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValue `json:"value"`
	Weight     *string                                                                                   `json:"weight"`
}

func (o *GetAccountValuationAccountValuationAccountValuationSecurityPosition) GetInstrument() GetAccountValuationAccountValuationAccountValuationSecurityPositionInstrument {
	if o == nil {
		return GetAccountValuationAccountValuationAccountValuationSecurityPositionInstrument{}
	}
	return o.Instrument
}

func (o *GetAccountValuationAccountValuationAccountValuationSecurityPosition) GetQuantity() string {
	if o == nil {
		return ""
	}
	return o.Quantity
}

func (o *GetAccountValuationAccountValuationAccountValuationSecurityPosition) GetValue() *GetAccountValuationAccountValuationAccountValuationSecurityPositionSecurityPositionValue {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetAccountValuationAccountValuationAccountValuationSecurityPosition) GetWeight() *string {
	if o == nil {
		return nil
	}
	return o.Weight
}

// GetAccountValuationAccountValuationTotalSecurityValueCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type GetAccountValuationAccountValuationTotalSecurityValueCurrency string

const (
	GetAccountValuationAccountValuationTotalSecurityValueCurrencyEur GetAccountValuationAccountValuationTotalSecurityValueCurrency = "EUR"
)

func (e GetAccountValuationAccountValuationTotalSecurityValueCurrency) ToPointer() *GetAccountValuationAccountValuationTotalSecurityValueCurrency {
	return &e
}

func (e *GetAccountValuationAccountValuationTotalSecurityValueCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = GetAccountValuationAccountValuationTotalSecurityValueCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountValuationAccountValuationTotalSecurityValueCurrency: %v", v)
	}
}

// GetAccountValuationAccountValuationTotalSecurityValue - Entity representing the monetary value by amount and currency.
type GetAccountValuationAccountValuationTotalSecurityValue struct {
	Amount string `json:"amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *GetAccountValuationAccountValuationTotalSecurityValueCurrency `default:"EUR" json:"currency"`
}

func (g GetAccountValuationAccountValuationTotalSecurityValue) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAccountValuationAccountValuationTotalSecurityValue) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAccountValuationAccountValuationTotalSecurityValue) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *GetAccountValuationAccountValuationTotalSecurityValue) GetCurrency() *GetAccountValuationAccountValuationTotalSecurityValueCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

// GetAccountValuationAccountValuation - Valuations
type GetAccountValuationAccountValuation struct {
	// Account unique identifier.
	AccountID string `json:"account_id"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Account valuation unique identifier.
	ID string `json:"id"`
	// Price quality used for the calculation of the account valuation.
	// * EOD - end of day price
	PriceQuality *GetAccountValuationAccountValuationPriceQuality `default:"EOD" json:"price_quality"`
	// Positions associated with this account valuation.
	SecurityPositions []GetAccountValuationAccountValuationAccountValuationSecurityPosition `json:"security_positions,omitempty"`
	// Entity representing the monetary value by amount and currency.
	TotalSecurityValue GetAccountValuationAccountValuationTotalSecurityValue `json:"total_security_value"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// Date and time as of which the value was calculated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ValuationTime time.Time `json:"valuation_time"`
}

func (g GetAccountValuationAccountValuation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAccountValuationAccountValuation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAccountValuationAccountValuation) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *GetAccountValuationAccountValuation) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *GetAccountValuationAccountValuation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetAccountValuationAccountValuation) GetPriceQuality() *GetAccountValuationAccountValuationPriceQuality {
	if o == nil {
		return nil
	}
	return o.PriceQuality
}

func (o *GetAccountValuationAccountValuation) GetSecurityPositions() []GetAccountValuationAccountValuationAccountValuationSecurityPosition {
	if o == nil {
		return nil
	}
	return o.SecurityPositions
}

func (o *GetAccountValuationAccountValuation) GetTotalSecurityValue() GetAccountValuationAccountValuationTotalSecurityValue {
	if o == nil {
		return GetAccountValuationAccountValuationTotalSecurityValue{}
	}
	return o.TotalSecurityValue
}

func (o *GetAccountValuationAccountValuation) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *GetAccountValuationAccountValuation) GetValuationTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ValuationTime
}

type GetAccountValuationResponse struct {
	// Valuations
	AccountValuation *GetAccountValuationAccountValuation
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetAccountValuationResponse) GetAccountValuation() *GetAccountValuationAccountValuation {
	if o == nil {
		return nil
	}
	return o.AccountValuation
}

func (o *GetAccountValuationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAccountValuationResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetAccountValuationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAccountValuationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
