// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// CreateFeeCollectionFeeCollectionCreateRequestCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type CreateFeeCollectionFeeCollectionCreateRequestCurrency string

const (
	CreateFeeCollectionFeeCollectionCreateRequestCurrencyEur CreateFeeCollectionFeeCollectionCreateRequestCurrency = "EUR"
)

func (e CreateFeeCollectionFeeCollectionCreateRequestCurrency) ToPointer() *CreateFeeCollectionFeeCollectionCreateRequestCurrency {
	return &e
}

func (e *CreateFeeCollectionFeeCollectionCreateRequestCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = CreateFeeCollectionFeeCollectionCreateRequestCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeCollectionFeeCollectionCreateRequestCurrency: %v", v)
	}
}

// CreateFeeCollectionFeeCollectionCreateRequestType - Type of the fee collection
// * SERVICE_FEE - Service fee intake in a pre-defined cadence (e.g. monthly)
// * SERVICE_FEE_LIQUIDATION - Service fee intake as a result of a Portfolio liquidation
type CreateFeeCollectionFeeCollectionCreateRequestType string

const (
	CreateFeeCollectionFeeCollectionCreateRequestTypeServiceFee            CreateFeeCollectionFeeCollectionCreateRequestType = "SERVICE_FEE"
	CreateFeeCollectionFeeCollectionCreateRequestTypeServiceFeeLiquidation CreateFeeCollectionFeeCollectionCreateRequestType = "SERVICE_FEE_LIQUIDATION"
)

func (e CreateFeeCollectionFeeCollectionCreateRequestType) ToPointer() *CreateFeeCollectionFeeCollectionCreateRequestType {
	return &e
}

func (e *CreateFeeCollectionFeeCollectionCreateRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SERVICE_FEE":
		fallthrough
	case "SERVICE_FEE_LIQUIDATION":
		*e = CreateFeeCollectionFeeCollectionCreateRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeCollectionFeeCollectionCreateRequestType: %v", v)
	}
}

type CreateFeeCollectionFeeCollectionCreateRequest struct {
	// Account unique identifier.
	AccountID        string `json:"account_id"`
	CollectionAmount string `json:"collection_amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *CreateFeeCollectionFeeCollectionCreateRequestCurrency `default:"EUR" json:"currency"`
	// End date of the fee collection period in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339) RFC 3339
	PeriodEnd types.Date `json:"period_end"`
	// Start date of the fee collection period in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339) RFC 3339
	PeriodStart types.Date `json:"period_start"`
	// Type of the fee collection
	// * SERVICE_FEE - Service fee intake in a pre-defined cadence (e.g. monthly)
	// * SERVICE_FEE_LIQUIDATION - Service fee intake as a result of a Portfolio liquidation
	Type CreateFeeCollectionFeeCollectionCreateRequestType `json:"type"`
}

func (c CreateFeeCollectionFeeCollectionCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateFeeCollectionFeeCollectionCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateFeeCollectionFeeCollectionCreateRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreateFeeCollectionFeeCollectionCreateRequest) GetCollectionAmount() string {
	if o == nil {
		return ""
	}
	return o.CollectionAmount
}

func (o *CreateFeeCollectionFeeCollectionCreateRequest) GetCurrency() *CreateFeeCollectionFeeCollectionCreateRequestCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreateFeeCollectionFeeCollectionCreateRequest) GetPeriodEnd() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.PeriodEnd
}

func (o *CreateFeeCollectionFeeCollectionCreateRequest) GetPeriodStart() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.PeriodStart
}

func (o *CreateFeeCollectionFeeCollectionCreateRequest) GetType() CreateFeeCollectionFeeCollectionCreateRequestType {
	if o == nil {
		return CreateFeeCollectionFeeCollectionCreateRequestType("")
	}
	return o.Type
}

type CreateFeeCollectionRequest struct {
	RequestBody *CreateFeeCollectionFeeCollectionCreateRequest `request:"mediaType=application/json"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (c CreateFeeCollectionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateFeeCollectionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateFeeCollectionRequest) GetRequestBody() *CreateFeeCollectionFeeCollectionCreateRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateFeeCollectionRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *CreateFeeCollectionRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *CreateFeeCollectionRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *CreateFeeCollectionRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *CreateFeeCollectionRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// CreateFeeCollectionFeeCollectionCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type CreateFeeCollectionFeeCollectionCurrency string

const (
	CreateFeeCollectionFeeCollectionCurrencyEur CreateFeeCollectionFeeCollectionCurrency = "EUR"
)

func (e CreateFeeCollectionFeeCollectionCurrency) ToPointer() *CreateFeeCollectionFeeCollectionCurrency {
	return &e
}

func (e *CreateFeeCollectionFeeCollectionCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = CreateFeeCollectionFeeCollectionCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeCollectionFeeCollectionCurrency: %v", v)
	}
}

type CreateFeeCollectionFeeCollectionProcessedAmount struct {
	CashBalance *string `json:"cash_balance,omitempty"`
	SellToCover *string `json:"sell_to_cover,omitempty"`
}

func (o *CreateFeeCollectionFeeCollectionProcessedAmount) GetCashBalance() *string {
	if o == nil {
		return nil
	}
	return o.CashBalance
}

func (o *CreateFeeCollectionFeeCollectionProcessedAmount) GetSellToCover() *string {
	if o == nil {
		return nil
	}
	return o.SellToCover
}

// CreateFeeCollectionFeeCollectionStatus - Status of the fee collection
// * PROCESSING - Fee collection is in progress.
// * FINALISED - Fees have been collected from the account and the funds has been transferred to the client.
// * CANCELLED - Fee collection has been cancelled.
type CreateFeeCollectionFeeCollectionStatus string

const (
	CreateFeeCollectionFeeCollectionStatusProcessing CreateFeeCollectionFeeCollectionStatus = "PROCESSING"
	CreateFeeCollectionFeeCollectionStatusFinalised  CreateFeeCollectionFeeCollectionStatus = "FINALISED"
	CreateFeeCollectionFeeCollectionStatusCancelled  CreateFeeCollectionFeeCollectionStatus = "CANCELLED"
)

func (e CreateFeeCollectionFeeCollectionStatus) ToPointer() *CreateFeeCollectionFeeCollectionStatus {
	return &e
}

func (e *CreateFeeCollectionFeeCollectionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCESSING":
		fallthrough
	case "FINALISED":
		fallthrough
	case "CANCELLED":
		*e = CreateFeeCollectionFeeCollectionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeCollectionFeeCollectionStatus: %v", v)
	}
}

// CreateFeeCollectionFeeCollectionType - Type of the fee collection
// * SERVICE_FEE - Service fee intake in a pre-defined cadence (e.g. monthly)
// * SERVICE_FEE_LIQUIDATION - Service fee intake as a result of a Portfolio liquidation
type CreateFeeCollectionFeeCollectionType string

const (
	CreateFeeCollectionFeeCollectionTypeServiceFee            CreateFeeCollectionFeeCollectionType = "SERVICE_FEE"
	CreateFeeCollectionFeeCollectionTypeServiceFeeLiquidation CreateFeeCollectionFeeCollectionType = "SERVICE_FEE_LIQUIDATION"
)

func (e CreateFeeCollectionFeeCollectionType) ToPointer() *CreateFeeCollectionFeeCollectionType {
	return &e
}

func (e *CreateFeeCollectionFeeCollectionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SERVICE_FEE":
		fallthrough
	case "SERVICE_FEE_LIQUIDATION":
		*e = CreateFeeCollectionFeeCollectionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeCollectionFeeCollectionType: %v", v)
	}
}

// CreateFeeCollectionFeeCollection - Fee collection created.
type CreateFeeCollectionFeeCollection struct {
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	// Account unique identifier.
	AccountID        string `json:"account_id"`
	CollectionAmount string `json:"collection_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *CreateFeeCollectionFeeCollectionCurrency `default:"EUR" json:"currency"`
	// Fee collection unique identifier.
	ID string `json:"id"`
	// End date of the fee collection period in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339) RFC 3339
	PeriodEnd types.Date `json:"period_end"`
	// Start date of the fee collection period in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339) RFC 3339
	PeriodStart     types.Date                                      `json:"period_start"`
	ProcessedAmount CreateFeeCollectionFeeCollectionProcessedAmount `json:"processed_amount"`
	// Status of the fee collection
	// * PROCESSING - Fee collection is in progress.
	// * FINALISED - Fees have been collected from the account and the funds has been transferred to the client.
	// * CANCELLED - Fee collection has been cancelled.
	Status CreateFeeCollectionFeeCollectionStatus `json:"status"`
	// Type of the fee collection
	// * SERVICE_FEE - Service fee intake in a pre-defined cadence (e.g. monthly)
	// * SERVICE_FEE_LIQUIDATION - Service fee intake as a result of a Portfolio liquidation
	Type CreateFeeCollectionFeeCollectionType `json:"type"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (c CreateFeeCollectionFeeCollection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateFeeCollectionFeeCollection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateFeeCollectionFeeCollection) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *CreateFeeCollectionFeeCollection) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreateFeeCollectionFeeCollection) GetCollectionAmount() string {
	if o == nil {
		return ""
	}
	return o.CollectionAmount
}

func (o *CreateFeeCollectionFeeCollection) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateFeeCollectionFeeCollection) GetCurrency() *CreateFeeCollectionFeeCollectionCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreateFeeCollectionFeeCollection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateFeeCollectionFeeCollection) GetPeriodEnd() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.PeriodEnd
}

func (o *CreateFeeCollectionFeeCollection) GetPeriodStart() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.PeriodStart
}

func (o *CreateFeeCollectionFeeCollection) GetProcessedAmount() CreateFeeCollectionFeeCollectionProcessedAmount {
	if o == nil {
		return CreateFeeCollectionFeeCollectionProcessedAmount{}
	}
	return o.ProcessedAmount
}

func (o *CreateFeeCollectionFeeCollection) GetStatus() CreateFeeCollectionFeeCollectionStatus {
	if o == nil {
		return CreateFeeCollectionFeeCollectionStatus("")
	}
	return o.Status
}

func (o *CreateFeeCollectionFeeCollection) GetType() CreateFeeCollectionFeeCollectionType {
	if o == nil {
		return CreateFeeCollectionFeeCollectionType("")
	}
	return o.Type
}

func (o *CreateFeeCollectionFeeCollection) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type CreateFeeCollectionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Fee collection created.
	FeeCollection *CreateFeeCollectionFeeCollection
	Headers       map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateFeeCollectionResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateFeeCollectionResponse) GetFeeCollection() *CreateFeeCollectionFeeCollection {
	if o == nil {
		return nil
	}
	return o.FeeCollection
}

func (o *CreateFeeCollectionResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateFeeCollectionResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateFeeCollectionResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
