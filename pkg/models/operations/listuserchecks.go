// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type ListUserChecksRequest struct {
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (l ListUserChecksRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListUserChecksRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListUserChecksRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListUserChecksRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *ListUserChecksRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus - Final status of the COMPLIANCE check.
// * IN_PROGRESS - Compliance check is in progress
// * PASSED - Compliance check passed
// * FAILED - Compliance check failed
type ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus string

const (
	ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatusInProgress ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus = "IN_PROGRESS"
	ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatusPassed     ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus = "PASSED"
	ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatusFailed     ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus = "FAILED"
)

func (e ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus) ToPointer() *ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus {
	return &e
}

func (e *ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus: %v", v)
	}
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance - Compliance check
type ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance struct {
	// Completion date and time of the COMPLIANCE check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Final status of the COMPLIANCE check.
	// * IN_PROGRESS - Compliance check is in progress
	// * PASSED - Compliance check passed
	// * FAILED - Compliance check failed
	Status *ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus `json:"status,omitempty"`
	// The type of check must be COMPLIANCE.
	Type *string `default:"COMPLIANCE" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance) GetStatus() *ListUserChecksUserCheckListResponseUserCheckUserCheckComplianceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitInstrumentSuitability struct {
	// Did the user go through a suitability assessment and the outcome indicated suitability.
	Suitability bool `json:"suitability"`
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitInstrumentSuitability) GetSuitability() bool {
	if o == nil {
		return false
	}
	return o.Suitability
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus - Final status of the instrument fit check.
// * IN_PROGRESS - Instrument fit check is in progress
// * PASSED - Instrument fit check passed
// * FAILED - Instrument fit check failed
type ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus string

const (
	ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatusInProgress ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus = "IN_PROGRESS"
	ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatusPassed     ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus = "PASSED"
	ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatusFailed     ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus = "FAILED"
)

func (e ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus) ToPointer() *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus {
	return &e
}

func (e *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus: %v", v)
	}
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit - Instrument fit check is completed by the client providing the user's answers to the instrument appropriateness or suitability questionnaire.
type ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit struct {
	// Completion date and time of the instrument fit check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// User Check unique identifier.
	ID                    string                                                                                  `json:"id"`
	InstrumentSuitability ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitInstrumentSuitability `json:"instrument_suitability"`
	// Final status of the instrument fit check.
	// * IN_PROGRESS - Instrument fit check is in progress
	// * PASSED - Instrument fit check passed
	// * FAILED - Instrument fit check failed
	Status ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus `json:"status"`
	// The type of check must be INSTRUMENT_FIT.
	Type *string `default:"INSTRUMENT_FIT" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit) GetInstrumentSuitability() ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitInstrumentSuitability {
	if o == nil {
		return ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitInstrumentSuitability{}
	}
	return o.InstrumentSuitability
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit) GetStatus() ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus {
	if o == nil {
		return ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFitStatus("")
	}
	return o.Status
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress - Address. Must not be a P.O. box or c/o address.
type ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType - The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
// * UTILITY_BILL -
// * TELEPHONE_BILL -
// * INTERNET_BILL -
// * BANK_STATEMENT -
// * REGISTRATION_CERT -
// * RESIDENCE_PERMIT -
// * ID_CARD -
type ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType string

const (
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentTypeUtilityBill      ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType = "UTILITY_BILL"
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentTypeTelephoneBill    ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType = "TELEPHONE_BILL"
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentTypeInternetBill     ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType = "INTERNET_BILL"
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentTypeBankStatement    ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType = "BANK_STATEMENT"
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentTypeRegistrationCert ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType = "REGISTRATION_CERT"
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentTypeResidencePermit  ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType = "RESIDENCE_PERMIT"
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentTypeIDCard           ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType = "ID_CARD"
)

func (e ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType) ToPointer() *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType {
	return &e
}

func (e *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTILITY_BILL":
		fallthrough
	case "TELEPHONE_BILL":
		fallthrough
	case "INTERNET_BILL":
		fallthrough
	case "BANK_STATEMENT":
		fallthrough
	case "REGISTRATION_CERT":
		fallthrough
	case "RESIDENCE_PERMIT":
		fallthrough
	case "ID_CARD":
		*e = ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType: %v", v)
	}
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus - Final status of the PoR check.
// * IN_PROGRESS -
// * PASSED -
// * FAILED -
type ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus string

const (
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatusInProgress ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus = "IN_PROGRESS"
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatusPassed     ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus = "PASSED"
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatusFailed     ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus = "FAILED"
)

func (e ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus) ToPointer() *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus {
	return &e
}

func (e *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus: %v", v)
	}
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency - The PoR (Proof of residency) check is completed by the client sharing a valid PoR document, if not fulfilled by the KYC check.
type ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency struct {
	// Completion date and time of the PoR check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress `json:"confirmed_address"`
	// Download link for the PoR evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
	// * UTILITY_BILL -
	// * TELEPHONE_BILL -
	// * INTERNET_BILL -
	// * BANK_STATEMENT -
	// * REGISTRATION_CERT -
	// * RESIDENCE_PERMIT -
	// * ID_CARD -
	DocumentType ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType `json:"document_type"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Issuance date in YYYY-MM-DD format.
	IssuanceDate types.Date `json:"issuance_date"`
	// Final status of the PoR check.
	// * IN_PROGRESS -
	// * PASSED -
	// * FAILED -
	Status ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus `json:"status"`
	// The type of check must be POR.
	Type *string `default:"POR" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) GetConfirmedAddress() ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress {
	if o == nil {
		return ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyAddress{}
	}
	return o.ConfirmedAddress
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) GetDocumentType() ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType {
	if o == nil {
		return ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyDocumentType("")
	}
	return o.DocumentType
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) GetStatus() ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus {
	if o == nil {
		return ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidencyStatus("")
	}
	return o.Status
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress - Address. Must not be a P.O. box or c/o address.
type ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType - The type of document used in the KYC process.
// * PASSPORT - Passport
// * ID_CARD - National Identification document
// * RESIDENCE_PERMIT - Residence Permit
type ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType string

const (
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentTypePassport        ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType = "PASSPORT"
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentTypeIDCard          ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType = "ID_CARD"
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentTypeResidencePermit ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType = "RESIDENCE_PERMIT"
)

func (e ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType) ToPointer() *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType {
	return &e
}

func (e *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		fallthrough
	case "RESIDENCE_PERMIT":
		*e = ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType: %v", v)
	}
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod - Method used for AML compliant KYC process
// * VIDEO_ID - Video identification
// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
type ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod string

const (
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethodVideoID      ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod = "VIDEO_ID"
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethodInPersonID   ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod = "IN_PERSON_ID"
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethodElectronicID ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod = "ELECTRONIC_ID"
)

func (e ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod) ToPointer() *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod {
	return &e
}

func (e *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIDEO_ID":
		fallthrough
	case "IN_PERSON_ID":
		fallthrough
	case "ELECTRONIC_ID":
		*e = ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod: %v", v)
	}
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus - Final status of the KYC check.
// * IN_PROGRESS - KYC check is in progress
// * PASSED - KYC check passed
// * FAILED - KYC check failed
type ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus string

const (
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatusInProgress ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus = "IN_PROGRESS"
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatusPassed     ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus = "PASSED"
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatusFailed     ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus = "FAILED"
)

func (e ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus) ToPointer() *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus {
	return &e
}

func (e *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus: %v", v)
	}
}

// ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer - The KYC (Know your customer) check is completed by the client sharing the valid and relevant KYC data for the user.
type ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer struct {
	// Completion date and time of the KYC check. Must not be older than 24 months.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress `json:"confirmed_address,omitempty"`
	// Download link for the KYC evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// Expiration date of the document used in KYC process in YYYY-MM-DD format.
	DocumentExpirationDate types.Date `json:"document_expiration_date"`
	// The type of document used in the KYC process.
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	// * RESIDENCE_PERMIT - Residence Permit
	DocumentType ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType `json:"document_type"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Marks this check as a KYC refresh/update as opposed to an initial record.
	KycUpdate *bool `json:"kyc_update,omitempty"`
	// Method used for AML compliant KYC process
	// * VIDEO_ID - Video identification
	// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
	// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
	Method ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod `json:"method"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationality string `json:"nationality"`
	// Provider that was used to perform the KYC check.
	Provider string `json:"provider"`
	// Final status of the KYC check.
	// * IN_PROGRESS - KYC check is in progress
	// * PASSED - KYC check passed
	// * FAILED - KYC check failed
	Status ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus `json:"status"`
	// The type of check must be “KYC”.
	Type *string `default:"KYC" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetConfirmedAddress() *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerAddress {
	if o == nil {
		return nil
	}
	return o.ConfirmedAddress
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetDocumentExpirationDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DocumentExpirationDate
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetDocumentType() ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType {
	if o == nil {
		return ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerDocumentType("")
	}
	return o.DocumentType
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetKycUpdate() *bool {
	if o == nil {
		return nil
	}
	return o.KycUpdate
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetMethod() ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod {
	if o == nil {
		return ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerMethod("")
	}
	return o.Method
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetNationality() string {
	if o == nil {
		return ""
	}
	return o.Nationality
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetProvider() string {
	if o == nil {
		return ""
	}
	return o.Provider
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetStatus() ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus {
	if o == nil {
		return ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomerStatus("")
	}
	return o.Status
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type ListUserChecksUserCheckListResponseUserCheckType string

const (
	ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer ListUserChecksUserCheckListResponseUserCheckType = "list_user_checks_User Check - List - Response_User Check_User Check - Know your customer"
	ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency ListUserChecksUserCheckListResponseUserCheckType = "list_user_checks_User Check - List - Response_User Check_User Check - Proof of Residency"
	ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit    ListUserChecksUserCheckListResponseUserCheckType = "list_user_checks_User Check - List - Response_User Check_User Check - Instrument fit"
	ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckCompliance       ListUserChecksUserCheckListResponseUserCheckType = "list_user_checks_User Check - List - Response_User Check_User Check - Compliance"
)

type ListUserChecksUserCheckListResponseUserCheck struct {
	ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer *ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer
	ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency *ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency
	ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit    *ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit
	ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance       *ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance

	Type ListUserChecksUserCheckListResponseUserCheckType
}

func CreateListUserChecksUserCheckListResponseUserCheckListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer(listUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer) ListUserChecksUserCheckListResponseUserCheck {
	typ := ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer

	return ListUserChecksUserCheckListResponseUserCheck{
		ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer: &listUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer,
		Type: typ,
	}
}

func CreateListUserChecksUserCheckListResponseUserCheckListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency(listUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency) ListUserChecksUserCheckListResponseUserCheck {
	typ := ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency

	return ListUserChecksUserCheckListResponseUserCheck{
		ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency: &listUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency,
		Type: typ,
	}
}

func CreateListUserChecksUserCheckListResponseUserCheckListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit(listUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit) ListUserChecksUserCheckListResponseUserCheck {
	typ := ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit

	return ListUserChecksUserCheckListResponseUserCheck{
		ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit: &listUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit,
		Type: typ,
	}
}

func CreateListUserChecksUserCheckListResponseUserCheckListUserChecksUserCheckListResponseUserCheckUserCheckCompliance(listUserChecksUserCheckListResponseUserCheckUserCheckCompliance ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance) ListUserChecksUserCheckListResponseUserCheck {
	typ := ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckCompliance

	return ListUserChecksUserCheckListResponseUserCheck{
		ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance: &listUserChecksUserCheckListResponseUserCheckUserCheckCompliance,
		Type: typ,
	}
}

func (u *ListUserChecksUserCheckListResponseUserCheck) UnmarshalJSON(data []byte) error {

	listUserChecksUserCheckListResponseUserCheckUserCheckCompliance := ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance{}
	if err := utils.UnmarshalJSON(data, &listUserChecksUserCheckListResponseUserCheckUserCheckCompliance, "", true, true); err == nil {
		u.ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance = &listUserChecksUserCheckListResponseUserCheckUserCheckCompliance
		u.Type = ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckCompliance
		return nil
	}

	listUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit := ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit{}
	if err := utils.UnmarshalJSON(data, &listUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit, "", true, true); err == nil {
		u.ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit = &listUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit
		u.Type = ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit
		return nil
	}

	listUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency := ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency{}
	if err := utils.UnmarshalJSON(data, &listUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency, "", true, true); err == nil {
		u.ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency = &listUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency
		u.Type = ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency
		return nil
	}

	listUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer := ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer{}
	if err := utils.UnmarshalJSON(data, &listUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer, "", true, true); err == nil {
		u.ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer = &listUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer
		u.Type = ListUserChecksUserCheckListResponseUserCheckTypeListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ListUserChecksUserCheckListResponseUserCheck) MarshalJSON() ([]byte, error) {
	if u.ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer != nil {
		return utils.MarshalJSON(u.ListUserChecksUserCheckListResponseUserCheckUserCheckKnowYourCustomer, "", true)
	}

	if u.ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency != nil {
		return utils.MarshalJSON(u.ListUserChecksUserCheckListResponseUserCheckUserCheckProofOfResidency, "", true)
	}

	if u.ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit != nil {
		return utils.MarshalJSON(u.ListUserChecksUserCheckListResponseUserCheckUserCheckInstrumentFit, "", true)
	}

	if u.ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance != nil {
		return utils.MarshalJSON(u.ListUserChecksUserCheckListResponseUserCheckUserCheckCompliance, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ListUserChecksUserCheckListResponse - OK
type ListUserChecksUserCheckListResponse struct {
	Data []ListUserChecksUserCheckListResponseUserCheck `json:"data"`
}

func (o *ListUserChecksUserCheckListResponse) GetData() []ListUserChecksUserCheckListResponseUserCheck {
	if o == nil {
		return []ListUserChecksUserCheckListResponseUserCheck{}
	}
	return o.Data
}

type ListUserChecksResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	UserCheckListResponse *ListUserChecksUserCheckListResponse
}

func (o *ListUserChecksResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListUserChecksResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListUserChecksResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListUserChecksResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListUserChecksResponse) GetUserCheckListResponse() *ListUserChecksUserCheckListResponse {
	if o == nil {
		return nil
	}
	return o.UserCheckListResponse
}
