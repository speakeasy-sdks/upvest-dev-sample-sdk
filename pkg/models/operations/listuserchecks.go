// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type ListUserChecksRequest struct {
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (l ListUserChecksRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListUserChecksRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListUserChecksRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListUserChecksRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *ListUserChecksRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListUserChecksUsersResponse200Status - Final status of the COMPLIANCE check.
// * IN_PROGRESS - Compliance check is in progress
// * PASSED - Compliance check passed
// * FAILED - Compliance check failed
type ListUserChecksUsersResponse200Status string

const (
	ListUserChecksUsersResponse200StatusInProgress ListUserChecksUsersResponse200Status = "IN_PROGRESS"
	ListUserChecksUsersResponse200StatusPassed     ListUserChecksUsersResponse200Status = "PASSED"
	ListUserChecksUsersResponse200StatusFailed     ListUserChecksUsersResponse200Status = "FAILED"
)

func (e ListUserChecksUsersResponse200Status) ToPointer() *ListUserChecksUsersResponse200Status {
	return &e
}

func (e *ListUserChecksUsersResponse200Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = ListUserChecksUsersResponse200Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUsersResponse200Status: %v", v)
	}
}

// ListUserChecksUserCheckCompliance - Compliance check
type ListUserChecksUserCheckCompliance struct {
	// Completion date and time of the COMPLIANCE check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Final status of the COMPLIANCE check.
	// * IN_PROGRESS - Compliance check is in progress
	// * PASSED - Compliance check passed
	// * FAILED - Compliance check failed
	Status *ListUserChecksUsersResponse200Status `json:"status,omitempty"`
	// The type of check must be COMPLIANCE.
	Type *string `default:"COMPLIANCE" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListUserChecksUserCheckCompliance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksUserCheckCompliance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksUserCheckCompliance) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *ListUserChecksUserCheckCompliance) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserChecksUserCheckCompliance) GetStatus() *ListUserChecksUsersResponse200Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListUserChecksUserCheckCompliance) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListUserChecksUserCheckCompliance) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type ListUserChecksInstrumentSuitability struct {
	// Did the user go through a suitability assessment and the outcome indicated suitability.
	Suitability bool `json:"suitability"`
}

func (o *ListUserChecksInstrumentSuitability) GetSuitability() bool {
	if o == nil {
		return false
	}
	return o.Suitability
}

// ListUserChecksUsersResponseStatus - Final status of the instrument fit check.
// * IN_PROGRESS - Instrument fit check is in progress
// * PASSED - Instrument fit check passed
// * FAILED - Instrument fit check failed
type ListUserChecksUsersResponseStatus string

const (
	ListUserChecksUsersResponseStatusInProgress ListUserChecksUsersResponseStatus = "IN_PROGRESS"
	ListUserChecksUsersResponseStatusPassed     ListUserChecksUsersResponseStatus = "PASSED"
	ListUserChecksUsersResponseStatusFailed     ListUserChecksUsersResponseStatus = "FAILED"
)

func (e ListUserChecksUsersResponseStatus) ToPointer() *ListUserChecksUsersResponseStatus {
	return &e
}

func (e *ListUserChecksUsersResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = ListUserChecksUsersResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUsersResponseStatus: %v", v)
	}
}

// ListUserChecksUserCheckInstrumentFit - Instrument fit check is completed by the client providing the user's answers to the instrument appropriateness or suitability questionnaire.
type ListUserChecksUserCheckInstrumentFit struct {
	// Completion date and time of the instrument fit check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// User Check unique identifier.
	ID                    string                              `json:"id"`
	InstrumentSuitability ListUserChecksInstrumentSuitability `json:"instrument_suitability"`
	// Final status of the instrument fit check.
	// * IN_PROGRESS - Instrument fit check is in progress
	// * PASSED - Instrument fit check passed
	// * FAILED - Instrument fit check failed
	Status ListUserChecksUsersResponseStatus `json:"status"`
	// The type of check must be INSTRUMENT_FIT.
	Type *string `default:"INSTRUMENT_FIT" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListUserChecksUserCheckInstrumentFit) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksUserCheckInstrumentFit) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksUserCheckInstrumentFit) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *ListUserChecksUserCheckInstrumentFit) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserChecksUserCheckInstrumentFit) GetInstrumentSuitability() ListUserChecksInstrumentSuitability {
	if o == nil {
		return ListUserChecksInstrumentSuitability{}
	}
	return o.InstrumentSuitability
}

func (o *ListUserChecksUserCheckInstrumentFit) GetStatus() ListUserChecksUsersResponseStatus {
	if o == nil {
		return ListUserChecksUsersResponseStatus("")
	}
	return o.Status
}

func (o *ListUserChecksUserCheckInstrumentFit) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListUserChecksUserCheckInstrumentFit) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListUserChecksUsersAddress - Address. Must not be a P.O. box or c/o address.
type ListUserChecksUsersAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *ListUserChecksUsersAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *ListUserChecksUsersAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *ListUserChecksUsersAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *ListUserChecksUsersAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *ListUserChecksUsersAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *ListUserChecksUsersAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// ListUserChecksUsersDocumentType - The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
// * UTILITY_BILL -
// * TELEPHONE_BILL -
// * INTERNET_BILL -
// * BANK_STATEMENT -
// * REGISTRATION_CERT -
// * RESIDENCE_PERMIT -
// * ID_CARD -
type ListUserChecksUsersDocumentType string

const (
	ListUserChecksUsersDocumentTypeUtilityBill      ListUserChecksUsersDocumentType = "UTILITY_BILL"
	ListUserChecksUsersDocumentTypeTelephoneBill    ListUserChecksUsersDocumentType = "TELEPHONE_BILL"
	ListUserChecksUsersDocumentTypeInternetBill     ListUserChecksUsersDocumentType = "INTERNET_BILL"
	ListUserChecksUsersDocumentTypeBankStatement    ListUserChecksUsersDocumentType = "BANK_STATEMENT"
	ListUserChecksUsersDocumentTypeRegistrationCert ListUserChecksUsersDocumentType = "REGISTRATION_CERT"
	ListUserChecksUsersDocumentTypeResidencePermit  ListUserChecksUsersDocumentType = "RESIDENCE_PERMIT"
	ListUserChecksUsersDocumentTypeIDCard           ListUserChecksUsersDocumentType = "ID_CARD"
)

func (e ListUserChecksUsersDocumentType) ToPointer() *ListUserChecksUsersDocumentType {
	return &e
}

func (e *ListUserChecksUsersDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTILITY_BILL":
		fallthrough
	case "TELEPHONE_BILL":
		fallthrough
	case "INTERNET_BILL":
		fallthrough
	case "BANK_STATEMENT":
		fallthrough
	case "REGISTRATION_CERT":
		fallthrough
	case "RESIDENCE_PERMIT":
		fallthrough
	case "ID_CARD":
		*e = ListUserChecksUsersDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUsersDocumentType: %v", v)
	}
}

// ListUserChecksUsersStatus - Final status of the PoR check.
// * IN_PROGRESS -
// * PASSED -
// * FAILED -
type ListUserChecksUsersStatus string

const (
	ListUserChecksUsersStatusInProgress ListUserChecksUsersStatus = "IN_PROGRESS"
	ListUserChecksUsersStatusPassed     ListUserChecksUsersStatus = "PASSED"
	ListUserChecksUsersStatusFailed     ListUserChecksUsersStatus = "FAILED"
)

func (e ListUserChecksUsersStatus) ToPointer() *ListUserChecksUsersStatus {
	return &e
}

func (e *ListUserChecksUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = ListUserChecksUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksUsersStatus: %v", v)
	}
}

// ListUserChecksUserCheckProofOfResidency - The PoR (Proof of residency) check is completed by the client sharing a valid PoR document, if not fulfilled by the KYC check.
type ListUserChecksUserCheckProofOfResidency struct {
	// Completion date and time of the PoR check.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress ListUserChecksUsersAddress `json:"confirmed_address"`
	// Download link for the PoR evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used in the PoR process. Maximum age of the document is 12 months (stated on the document) applicable for: Utility bills (water, gas, electricity), Telephone bills (only landline), Internet bills, Bank account statements. Documents that need to be still valid - Registration certificate (issued within the past 5 years), Residence permit e.g. Blue Card (as long as valid), ID Card that contains the registration address.
	// * UTILITY_BILL -
	// * TELEPHONE_BILL -
	// * INTERNET_BILL -
	// * BANK_STATEMENT -
	// * REGISTRATION_CERT -
	// * RESIDENCE_PERMIT -
	// * ID_CARD -
	DocumentType ListUserChecksUsersDocumentType `json:"document_type"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Issuance date in YYYY-MM-DD format.
	IssuanceDate types.Date `json:"issuance_date"`
	// Final status of the PoR check.
	// * IN_PROGRESS -
	// * PASSED -
	// * FAILED -
	Status ListUserChecksUsersStatus `json:"status"`
	// The type of check must be POR.
	Type *string `default:"POR" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListUserChecksUserCheckProofOfResidency) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksUserCheckProofOfResidency) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksUserCheckProofOfResidency) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *ListUserChecksUserCheckProofOfResidency) GetConfirmedAddress() ListUserChecksUsersAddress {
	if o == nil {
		return ListUserChecksUsersAddress{}
	}
	return o.ConfirmedAddress
}

func (o *ListUserChecksUserCheckProofOfResidency) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *ListUserChecksUserCheckProofOfResidency) GetDocumentType() ListUserChecksUsersDocumentType {
	if o == nil {
		return ListUserChecksUsersDocumentType("")
	}
	return o.DocumentType
}

func (o *ListUserChecksUserCheckProofOfResidency) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserChecksUserCheckProofOfResidency) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *ListUserChecksUserCheckProofOfResidency) GetStatus() ListUserChecksUsersStatus {
	if o == nil {
		return ListUserChecksUsersStatus("")
	}
	return o.Status
}

func (o *ListUserChecksUserCheckProofOfResidency) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListUserChecksUserCheckProofOfResidency) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListUserChecksAddress - Address. Must not be a P.O. box or c/o address.
type ListUserChecksAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *ListUserChecksAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *ListUserChecksAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *ListUserChecksAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *ListUserChecksAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *ListUserChecksAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *ListUserChecksAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// ListUserChecksDocumentType - The type of document used in the KYC process.
// * PASSPORT - Passport
// * ID_CARD - National Identification document
// * RESIDENCE_PERMIT - Residence Permit
type ListUserChecksDocumentType string

const (
	ListUserChecksDocumentTypePassport        ListUserChecksDocumentType = "PASSPORT"
	ListUserChecksDocumentTypeIDCard          ListUserChecksDocumentType = "ID_CARD"
	ListUserChecksDocumentTypeResidencePermit ListUserChecksDocumentType = "RESIDENCE_PERMIT"
)

func (e ListUserChecksDocumentType) ToPointer() *ListUserChecksDocumentType {
	return &e
}

func (e *ListUserChecksDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		fallthrough
	case "RESIDENCE_PERMIT":
		*e = ListUserChecksDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksDocumentType: %v", v)
	}
}

// ListUserChecksMethod - Method used for AML compliant KYC process
// * VIDEO_ID - Video identification
// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
type ListUserChecksMethod string

const (
	ListUserChecksMethodVideoID      ListUserChecksMethod = "VIDEO_ID"
	ListUserChecksMethodInPersonID   ListUserChecksMethod = "IN_PERSON_ID"
	ListUserChecksMethodElectronicID ListUserChecksMethod = "ELECTRONIC_ID"
)

func (e ListUserChecksMethod) ToPointer() *ListUserChecksMethod {
	return &e
}

func (e *ListUserChecksMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIDEO_ID":
		fallthrough
	case "IN_PERSON_ID":
		fallthrough
	case "ELECTRONIC_ID":
		*e = ListUserChecksMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksMethod: %v", v)
	}
}

// ListUserChecksStatus - Final status of the KYC check.
// * IN_PROGRESS - KYC check is in progress
// * PASSED - KYC check passed
// * FAILED - KYC check failed
type ListUserChecksStatus string

const (
	ListUserChecksStatusInProgress ListUserChecksStatus = "IN_PROGRESS"
	ListUserChecksStatusPassed     ListUserChecksStatus = "PASSED"
	ListUserChecksStatusFailed     ListUserChecksStatus = "FAILED"
)

func (e ListUserChecksStatus) ToPointer() *ListUserChecksStatus {
	return &e
}

func (e *ListUserChecksStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		*e = ListUserChecksStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUserChecksStatus: %v", v)
	}
}

// ListUserChecksUserCheckKnowYourCustomer - The KYC (Know your customer) check is completed by the client sharing the valid and relevant KYC data for the user.
type ListUserChecksUserCheckKnowYourCustomer struct {
	// Completion date and time of the KYC check. Must not be older than 24 months.
	CheckConfirmedAt time.Time `json:"check_confirmed_at"`
	// Address. Must not be a P.O. box or c/o address.
	ConfirmedAddress *ListUserChecksAddress `json:"confirmed_address,omitempty"`
	// Download link for the KYC evidence file. Should be a valid URL.
	DataDownloadLink string `json:"data_download_link"`
	// Expiration date of the document used in KYC process in YYYY-MM-DD format.
	DocumentExpirationDate types.Date `json:"document_expiration_date"`
	// The type of document used in the KYC process.
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	// * RESIDENCE_PERMIT - Residence Permit
	DocumentType ListUserChecksDocumentType `json:"document_type"`
	// User Check unique identifier.
	ID string `json:"id"`
	// Marks this check as a KYC refresh/update as opposed to an initial record.
	KycUpdate *bool `json:"kyc_update,omitempty"`
	// Method used for AML compliant KYC process
	// * VIDEO_ID - Video identification
	// * IN_PERSON_ID - In person identification at the post office or the client’s outlet
	// * ELECTRONIC_ID - Advanced electronic identification methods (namely German eID)
	Method ListUserChecksMethod `json:"method"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationality string `json:"nationality"`
	// Provider that was used to perform the KYC check.
	Provider string `json:"provider"`
	// Final status of the KYC check.
	// * IN_PROGRESS - KYC check is in progress
	// * PASSED - KYC check passed
	// * FAILED - KYC check failed
	Status ListUserChecksStatus `json:"status"`
	// The type of check must be “KYC”.
	Type *string `default:"KYC" json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListUserChecksUserCheckKnowYourCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserChecksUserCheckKnowYourCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetCheckConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CheckConfirmedAt
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetConfirmedAddress() *ListUserChecksAddress {
	if o == nil {
		return nil
	}
	return o.ConfirmedAddress
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetDocumentExpirationDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DocumentExpirationDate
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetDocumentType() ListUserChecksDocumentType {
	if o == nil {
		return ListUserChecksDocumentType("")
	}
	return o.DocumentType
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetKycUpdate() *bool {
	if o == nil {
		return nil
	}
	return o.KycUpdate
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetMethod() ListUserChecksMethod {
	if o == nil {
		return ListUserChecksMethod("")
	}
	return o.Method
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetNationality() string {
	if o == nil {
		return ""
	}
	return o.Nationality
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetProvider() string {
	if o == nil {
		return ""
	}
	return o.Provider
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetStatus() ListUserChecksStatus {
	if o == nil {
		return ListUserChecksStatus("")
	}
	return o.Status
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListUserChecksUserCheckKnowYourCustomer) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type UserCheckType string

const (
	UserCheckTypeListUserChecksUserCheckKnowYourCustomer UserCheckType = "list_user_checks_User Check - Know your customer"
	UserCheckTypeListUserChecksUserCheckProofOfResidency UserCheckType = "list_user_checks_User Check - Proof of Residency"
	UserCheckTypeListUserChecksUserCheckInstrumentFit    UserCheckType = "list_user_checks_User Check - Instrument fit"
	UserCheckTypeListUserChecksUserCheckCompliance       UserCheckType = "list_user_checks_User Check - Compliance"
)

type UserCheck struct {
	ListUserChecksUserCheckKnowYourCustomer *ListUserChecksUserCheckKnowYourCustomer
	ListUserChecksUserCheckProofOfResidency *ListUserChecksUserCheckProofOfResidency
	ListUserChecksUserCheckInstrumentFit    *ListUserChecksUserCheckInstrumentFit
	ListUserChecksUserCheckCompliance       *ListUserChecksUserCheckCompliance

	Type UserCheckType
}

func CreateUserCheckListUserChecksUserCheckKnowYourCustomer(listUserChecksUserCheckKnowYourCustomer ListUserChecksUserCheckKnowYourCustomer) UserCheck {
	typ := UserCheckTypeListUserChecksUserCheckKnowYourCustomer

	return UserCheck{
		ListUserChecksUserCheckKnowYourCustomer: &listUserChecksUserCheckKnowYourCustomer,
		Type:                                    typ,
	}
}

func CreateUserCheckListUserChecksUserCheckProofOfResidency(listUserChecksUserCheckProofOfResidency ListUserChecksUserCheckProofOfResidency) UserCheck {
	typ := UserCheckTypeListUserChecksUserCheckProofOfResidency

	return UserCheck{
		ListUserChecksUserCheckProofOfResidency: &listUserChecksUserCheckProofOfResidency,
		Type:                                    typ,
	}
}

func CreateUserCheckListUserChecksUserCheckInstrumentFit(listUserChecksUserCheckInstrumentFit ListUserChecksUserCheckInstrumentFit) UserCheck {
	typ := UserCheckTypeListUserChecksUserCheckInstrumentFit

	return UserCheck{
		ListUserChecksUserCheckInstrumentFit: &listUserChecksUserCheckInstrumentFit,
		Type:                                 typ,
	}
}

func CreateUserCheckListUserChecksUserCheckCompliance(listUserChecksUserCheckCompliance ListUserChecksUserCheckCompliance) UserCheck {
	typ := UserCheckTypeListUserChecksUserCheckCompliance

	return UserCheck{
		ListUserChecksUserCheckCompliance: &listUserChecksUserCheckCompliance,
		Type:                              typ,
	}
}

func (u *UserCheck) UnmarshalJSON(data []byte) error {

	listUserChecksUserCheckCompliance := ListUserChecksUserCheckCompliance{}
	if err := utils.UnmarshalJSON(data, &listUserChecksUserCheckCompliance, "", true, true); err == nil {
		u.ListUserChecksUserCheckCompliance = &listUserChecksUserCheckCompliance
		u.Type = UserCheckTypeListUserChecksUserCheckCompliance
		return nil
	}

	listUserChecksUserCheckInstrumentFit := ListUserChecksUserCheckInstrumentFit{}
	if err := utils.UnmarshalJSON(data, &listUserChecksUserCheckInstrumentFit, "", true, true); err == nil {
		u.ListUserChecksUserCheckInstrumentFit = &listUserChecksUserCheckInstrumentFit
		u.Type = UserCheckTypeListUserChecksUserCheckInstrumentFit
		return nil
	}

	listUserChecksUserCheckProofOfResidency := ListUserChecksUserCheckProofOfResidency{}
	if err := utils.UnmarshalJSON(data, &listUserChecksUserCheckProofOfResidency, "", true, true); err == nil {
		u.ListUserChecksUserCheckProofOfResidency = &listUserChecksUserCheckProofOfResidency
		u.Type = UserCheckTypeListUserChecksUserCheckProofOfResidency
		return nil
	}

	listUserChecksUserCheckKnowYourCustomer := ListUserChecksUserCheckKnowYourCustomer{}
	if err := utils.UnmarshalJSON(data, &listUserChecksUserCheckKnowYourCustomer, "", true, true); err == nil {
		u.ListUserChecksUserCheckKnowYourCustomer = &listUserChecksUserCheckKnowYourCustomer
		u.Type = UserCheckTypeListUserChecksUserCheckKnowYourCustomer
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UserCheck) MarshalJSON() ([]byte, error) {
	if u.ListUserChecksUserCheckKnowYourCustomer != nil {
		return utils.MarshalJSON(u.ListUserChecksUserCheckKnowYourCustomer, "", true)
	}

	if u.ListUserChecksUserCheckProofOfResidency != nil {
		return utils.MarshalJSON(u.ListUserChecksUserCheckProofOfResidency, "", true)
	}

	if u.ListUserChecksUserCheckInstrumentFit != nil {
		return utils.MarshalJSON(u.ListUserChecksUserCheckInstrumentFit, "", true)
	}

	if u.ListUserChecksUserCheckCompliance != nil {
		return utils.MarshalJSON(u.ListUserChecksUserCheckCompliance, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ListUserChecksUserCheckListResponse - OK
type ListUserChecksUserCheckListResponse struct {
	Data []UserCheck `json:"data"`
}

func (o *ListUserChecksUserCheckListResponse) GetData() []UserCheck {
	if o == nil {
		return []UserCheck{}
	}
	return o.Data
}

type ListUserChecksResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	UserCheckListResponse *ListUserChecksUserCheckListResponse
}

func (o *ListUserChecksResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListUserChecksResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListUserChecksResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListUserChecksResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListUserChecksResponse) GetUserCheckListResponse() *ListUserChecksUserCheckListResponse {
	if o == nil {
		return nil
	}
	return o.UserCheckListResponse
}
