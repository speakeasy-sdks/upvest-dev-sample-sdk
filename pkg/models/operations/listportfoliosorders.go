// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListPortfoliosOrdersSort - Sort the result by `id`.
type ListPortfoliosOrdersSort string

const (
	ListPortfoliosOrdersSortID ListPortfoliosOrdersSort = "id"
)

func (e ListPortfoliosOrdersSort) ToPointer() *ListPortfoliosOrdersSort {
	return &e
}

func (e *ListPortfoliosOrdersSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		*e = ListPortfoliosOrdersSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosOrdersSort: %v", v)
	}
}

type ListPortfoliosOrdersRequest struct {
	// Filters portfolio orders containing the account id
	AccountID *string `queryParam:"style=form,explode=true,name=account_id"`
	// Filters portfolio orders containing the allocation id
	AllocationID *string `queryParam:"style=form,explode=true,name=allocation_id"`
	// Returns portfolio orders with dates up until this date (UTC)
	EndDate *string `queryParam:"style=form,explode=true,name=end_date"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *shared.Order `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Sort the result by `id`.
	Sort *ListPortfoliosOrdersSort `default:"id" queryParam:"style=form,explode=true,name=sort"`
	// Returns portfolio orders with dates starting from and including this date (UTC)
	StartDate *string `queryParam:"style=form,explode=true,name=start_date"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListPortfoliosOrdersRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPortfoliosOrdersRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListPortfoliosOrdersRequest) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *ListPortfoliosOrdersRequest) GetAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.AllocationID
}

func (o *ListPortfoliosOrdersRequest) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ListPortfoliosOrdersRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListPortfoliosOrdersRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListPortfoliosOrdersRequest) GetOrder() *shared.Order {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListPortfoliosOrdersRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListPortfoliosOrdersRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListPortfoliosOrdersRequest) GetSort() *ListPortfoliosOrdersSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListPortfoliosOrdersRequest) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ListPortfoliosOrdersRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListPortfoliosOrdersRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency string

const (
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrencyEur ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency = "EUR"
)

func (e ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency) ToPointer() *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency {
	return &e
}

func (e *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency: %v", v)
	}
}

// ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide - Side of the portfolio order.
// * BUY -
// * SELL -
type ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide string

const (
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSideBuy  ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide = "BUY"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSideSell ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide = "SELL"
)

func (e ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide) ToPointer() *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide {
	return &e
}

func (e *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide: %v", v)
	}
}

// ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus - The execution status of the order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus string

const (
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatusNew        ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus = "NEW"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatusProcessing ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus = "PROCESSING"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatusFilled     ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus = "FILLED"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatusCancelled  ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus = "CANCELLED"
)

func (e ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus) ToPointer() *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus {
	return &e
}

func (e *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus: %v", v)
	}
}

type ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrder struct {
	ID string `json:"id"`
	// Side of the portfolio order.
	// * BUY -
	// * SELL -
	Side ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide `json:"side"`
	// The execution status of the order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus `json:"status"`
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrder) GetSide() ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide {
	if o == nil {
		return ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderSide("")
	}
	return o.Side
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrder) GetStatus() ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus {
	if o == nil {
		return ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrderStatus("")
	}
	return o.Status
}

// ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus - Execution status of the Portfolio Order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * SETTLED -
// * CANCELLED -
type ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus string

const (
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatusNew        ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus = "NEW"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatusProcessing ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus = "PROCESSING"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatusFilled     ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus = "FILLED"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatusSettled    ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus = "SETTLED"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatusCancelled  ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus = "CANCELLED"
)

func (e ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus) ToPointer() *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus {
	return &e
}

func (e *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "SETTLED":
		fallthrough
	case "CANCELLED":
		*e = ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus: %v", v)
	}
}

// ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType - Type of the Portfolio Order.
// * BUY -
// * SELL -
// * REBALANCING -
type ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType string

const (
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderTypeBuy         ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType = "BUY"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderTypeSell        ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType = "SELL"
	ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderTypeRebalancing ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType = "REBALANCING"
)

func (e ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType) ToPointer() *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType {
	return &e
}

func (e *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		fallthrough
	case "REBALANCING":
		*e = ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType: %v", v)
	}
}

type ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder struct {
	// Account unique identifier.
	AccountID    string  `json:"account_id"`
	AllocationID *string `json:"allocation_id,omitempty"`
	CashAmount   string  `json:"cash_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency `default:"EUR" json:"currency"`
	ID       string                                                                   `json:"id"`
	// Orders associated with this portfolio order
	Orders []ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrder `json:"orders"`
	// Cash amount is post-tax value
	PostTax *bool `default:"false" json:"post_tax"`
	// Execution status of the Portfolio Order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * SETTLED -
	// * CANCELLED -
	Status ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus `json:"status"`
	// Type of the Portfolio Order.
	// * BUY -
	// * SELL -
	// * REBALANCING -
	Type *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType `json:"type,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// User unique identifier.
	UserID *string `json:"user_id,omitempty"`
}

func (l ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.AllocationID
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetCurrency() *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetOrders() []ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrder {
	if o == nil {
		return []ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderPortfoliosOrder{}
	}
	return o.Orders
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetPostTax() *bool {
	if o == nil {
		return nil
	}
	return o.PostTax
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetStatus() ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus {
	if o == nil {
		return ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderStatus("")
	}
	return o.Status
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetType() *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrderType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

// ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder string

const (
	ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrderAsc  ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder = "ASC"
	ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrderDesc ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder = "DESC"
)

func (e ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder) ToPointer() *ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder {
	return &e
}

func (e *ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder: %v", v)
	}
}

type ListPortfoliosOrdersPortfoliosOrdersListResponseMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponseMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponseMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponseMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponseMeta) GetOrder() *ListPortfoliosOrdersPortfoliosOrdersListResponseMetaOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponseMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponseMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListPortfoliosOrdersPortfoliosOrdersListResponse - Portfolios orders
type ListPortfoliosOrdersPortfoliosOrdersListResponse struct {
	Data []ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder `json:"data"`
	Meta ListPortfoliosOrdersPortfoliosOrdersListResponseMeta              `json:"meta"`
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponse) GetData() []ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder {
	if o == nil {
		return []ListPortfoliosOrdersPortfoliosOrdersListResponsePortfoliosOrder{}
	}
	return o.Data
}

func (o *ListPortfoliosOrdersPortfoliosOrdersListResponse) GetMeta() ListPortfoliosOrdersPortfoliosOrdersListResponseMeta {
	if o == nil {
		return ListPortfoliosOrdersPortfoliosOrdersListResponseMeta{}
	}
	return o.Meta
}

type ListPortfoliosOrdersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Portfolios orders
	PortfoliosOrdersListResponse *ListPortfoliosOrdersPortfoliosOrdersListResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListPortfoliosOrdersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListPortfoliosOrdersResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListPortfoliosOrdersResponse) GetPortfoliosOrdersListResponse() *ListPortfoliosOrdersPortfoliosOrdersListResponse {
	if o == nil {
		return nil
	}
	return o.PortfoliosOrdersListResponse
}

func (o *ListPortfoliosOrdersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListPortfoliosOrdersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
