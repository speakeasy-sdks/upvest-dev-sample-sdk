// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListSecuritiesTransactionsQueryParamOrder - Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
type ListSecuritiesTransactionsQueryParamOrder string

const (
	ListSecuritiesTransactionsQueryParamOrderAsc  ListSecuritiesTransactionsQueryParamOrder = "ASC"
	ListSecuritiesTransactionsQueryParamOrderDesc ListSecuritiesTransactionsQueryParamOrder = "DESC"
)

func (e ListSecuritiesTransactionsQueryParamOrder) ToPointer() *ListSecuritiesTransactionsQueryParamOrder {
	return &e
}

func (e *ListSecuritiesTransactionsQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListSecuritiesTransactionsQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSecuritiesTransactionsQueryParamOrder: %v", v)
	}
}

// ListSecuritiesTransactionsQueryParamSort - Sort the result by `booking_date`.
type ListSecuritiesTransactionsQueryParamSort string

const (
	ListSecuritiesTransactionsQueryParamSortBookingDate ListSecuritiesTransactionsQueryParamSort = "booking_date"
)

func (e ListSecuritiesTransactionsQueryParamSort) ToPointer() *ListSecuritiesTransactionsQueryParamSort {
	return &e
}

func (e *ListSecuritiesTransactionsQueryParamSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "booking_date":
		*e = ListSecuritiesTransactionsQueryParamSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSecuritiesTransactionsQueryParamSort: %v", v)
	}
}

type ListSecuritiesTransactionsRequest struct {
	// Filters the list to only show transactions associated with a certain account group ID.
	AccountGroupID *string `queryParam:"style=form,explode=true,name=account_group_id"`
	// Filters the list to only show transactions associated with a certain account ID.
	AccountID *string     `queryParam:"style=form,explode=true,name=account_id"`
	EndDate   *types.Date `queryParam:"style=form,explode=true,name=end_date"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *ListSecuritiesTransactionsQueryParamOrder `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Sort the result by `booking_date`.
	Sort      *ListSecuritiesTransactionsQueryParamSort `default:"booking_date" queryParam:"style=form,explode=true,name=sort"`
	StartDate *types.Date                               `queryParam:"style=form,explode=true,name=start_date"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListSecuritiesTransactionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListSecuritiesTransactionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListSecuritiesTransactionsRequest) GetAccountGroupID() *string {
	if o == nil {
		return nil
	}
	return o.AccountGroupID
}

func (o *ListSecuritiesTransactionsRequest) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *ListSecuritiesTransactionsRequest) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ListSecuritiesTransactionsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListSecuritiesTransactionsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListSecuritiesTransactionsRequest) GetOrder() *ListSecuritiesTransactionsQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListSecuritiesTransactionsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListSecuritiesTransactionsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListSecuritiesTransactionsRequest) GetSort() *ListSecuritiesTransactionsQueryParamSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListSecuritiesTransactionsRequest) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ListSecuritiesTransactionsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListSecuritiesTransactionsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// SecurityTransactionDelta - Entity representing the security transaction delta.
type SecurityTransactionDelta struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	Amount               string                 `json:"amount"`
}

func (s SecurityTransactionDelta) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityTransactionDelta) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SecurityTransactionDelta) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SecurityTransactionDelta) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

// ListSecuritiesTransactionsInstrument - Entity representing instrument
type ListSecuritiesTransactionsInstrument struct {
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	Isin *string `json:"isin,omitempty"`
	// Internal instrument identifier.
	UUID string `json:"uuid"`
}

func (o *ListSecuritiesTransactionsInstrument) GetIsin() *string {
	if o == nil {
		return nil
	}
	return o.Isin
}

func (o *ListSecuritiesTransactionsInstrument) GetUUID() string {
	if o == nil {
		return ""
	}
	return o.UUID
}

// ListSecuritiesTransactionsType - Type of the reference.
// * ORDER - Order
// * ORDER_EXECUTION - Order execution
// * CORPORATE_ACTION - Corporate action
// * CORPORATE_ACTION_TRANSACTION_ID - Corporate action transaction ID
type ListSecuritiesTransactionsType string

const (
	ListSecuritiesTransactionsTypeOrder                        ListSecuritiesTransactionsType = "ORDER"
	ListSecuritiesTransactionsTypeOrderExecution               ListSecuritiesTransactionsType = "ORDER_EXECUTION"
	ListSecuritiesTransactionsTypeCorporateAction              ListSecuritiesTransactionsType = "CORPORATE_ACTION"
	ListSecuritiesTransactionsTypeCorporateActionTransactionID ListSecuritiesTransactionsType = "CORPORATE_ACTION_TRANSACTION_ID"
)

func (e ListSecuritiesTransactionsType) ToPointer() *ListSecuritiesTransactionsType {
	return &e
}

func (e *ListSecuritiesTransactionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ORDER":
		fallthrough
	case "ORDER_EXECUTION":
		fallthrough
	case "CORPORATE_ACTION":
		fallthrough
	case "CORPORATE_ACTION_TRANSACTION_ID":
		*e = ListSecuritiesTransactionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSecuritiesTransactionsType: %v", v)
	}
}

// SecurityTransactionReference - Entity representing security transaction reference
type SecurityTransactionReference struct {
	// Unique identifier for a resource of given type.
	ID string `json:"id"`
	// Type of the reference.
	// * ORDER - Order
	// * ORDER_EXECUTION - Order execution
	// * CORPORATE_ACTION - Corporate action
	// * CORPORATE_ACTION_TRANSACTION_ID - Corporate action transaction ID
	Type ListSecuritiesTransactionsType `json:"type"`
}

func (o *SecurityTransactionReference) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SecurityTransactionReference) GetType() ListSecuritiesTransactionsType {
	if o == nil {
		return ListSecuritiesTransactionsType("")
	}
	return o.Type
}

// ListSecuritiesTransactionsTransactionType - Transaction type
// * BONUS_ISSUE - Bonus Issue/Capitalisation Issue
// * BONUS_ISSUE_CANCELLATION - Bonus Issue/Capitalisation Issue, Cancellation
// * CALL_ON_INTERMEDIATE_SECURITIES - Call on Intermediate Securities
// * CALL_ON_INTERMEDIATE_SECURITIES_CANCELLATION - Call on Intermediate Securities, Cancellation
// * CHANGE - Change
// * CHANGE_CANCELLATION - Change, Cancellation
// * DIVIDEND_OPTION - Dividend Option
// * DIVIDEND_OPTION_CANCELLATION - Dividend Option, Cancellation
// * DIVIDEND_REINVESTMENT - Dividend Reinvestment
// * DIVIDEND_REINVESTMENT_CANCELLATION - Dividend Reinvestment, Cancellation
// * DUST_CLEANUP - Dust Cleanup
// * DUTCH_AUCTION - Dutch Auction
// * DUTCH_AUCTION_CANCELLATION - Dutch Auction, Cancellation
// * INTERMEDIATE_SECURITIES_DISTRIBUTION - Intermediate Securities Distribution
// * INTERMEDIATE_SECURITIES_DISTRIBUTION_CANCELLATION - Intermediate Securities Distribution, Cancellation
// * MERGER - Merger
// * MERGER_CANCELLATION - Merger, Cancellation
// * NON_OFFICIAL_OFFER - Non-Official Offer
// * NON_OFFICIAL_OFFER_CANCELLATION - Non-Official Offer, Cancellation
// * ODD_LOT_SALE - Odd Lot Sale/Purchase
// * ODD_LOT_SALE_CANCELLATION - Odd Lot Sale/Purchase, Cancellation
// * ORDER_EXECUTION - Order execution
// * ORDER_EXECUTION_CANCELLATION - Order execution cancellation
// * OTHER_EVENT - Other Event
// * OTHER_EVENT_CANCELLATION - Other Event, Cancellation
// * PRIORITY_ISSUE - Priority Issue
// * PRIORITY_ISSUE_CANCELLATION - Priority Issue, Cancellation
// * REPURCHASE_OFFER - Repurchase Offer/Issuer Bid/Reverse Rights
// * REPURCHASE_OFFER_CANCELLATION - Repurchase Offer/Issuer Bid/Reverse Rights, Cancellation
// * REVERSE_STOCK_SPLIT - Reverse Stock Split/Change in Nominal Value
// * REVERSE_STOCK_SPLIT_CANCELLATION - Reverse Stock Split/Change in Nominal Value, Cancellation
// * RIGHTS_ISSUE - Rights Issue/Subscription Rights/Rights Offer
// * RIGHTS_ISSUE_CANCELLATION - Rights Issue/Subscription Rights/Rights Offer, Cancellation
// * SPIN_OFF - Spin-Off
// * SPIN_OFF_CANCELLATION - Spin-Off, Cancellation
// * STOCK_DIVIDEND - Stock Dividend
// * STOCK_DIVIDEND_CANCELLATION - Stock Dividend, Cancellation
// * STOCK_SPLIT - Stock Split/Change in Nominal Value/Subdivision
// * STOCK_SPLIT_CANCELLATION - Stock Split/Change in Nominal Value/Subdivision, Cancellation
// * TENDER - Tender/Acquisition/Takeover/Purchase Offer
// * TENDER_CANCELLATION - Tender/Acquisition/Takeover/Purchase Offer, Cancellation
// * WORTHLESS - Worthless
// * WORTHLESS_CANCELLATION - Worthless, Cancellation
type ListSecuritiesTransactionsTransactionType string

const (
	ListSecuritiesTransactionsTransactionTypeBonusIssue                                     ListSecuritiesTransactionsTransactionType = "BONUS_ISSUE"
	ListSecuritiesTransactionsTransactionTypeBonusIssueCancellation                         ListSecuritiesTransactionsTransactionType = "BONUS_ISSUE_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeCallOnIntermediateSecurities                   ListSecuritiesTransactionsTransactionType = "CALL_ON_INTERMEDIATE_SECURITIES"
	ListSecuritiesTransactionsTransactionTypeCallOnIntermediateSecuritiesCancellation       ListSecuritiesTransactionsTransactionType = "CALL_ON_INTERMEDIATE_SECURITIES_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeChange                                         ListSecuritiesTransactionsTransactionType = "CHANGE"
	ListSecuritiesTransactionsTransactionTypeChangeCancellation                             ListSecuritiesTransactionsTransactionType = "CHANGE_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeDividendOption                                 ListSecuritiesTransactionsTransactionType = "DIVIDEND_OPTION"
	ListSecuritiesTransactionsTransactionTypeDividendOptionCancellation                     ListSecuritiesTransactionsTransactionType = "DIVIDEND_OPTION_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeDividendReinvestment                           ListSecuritiesTransactionsTransactionType = "DIVIDEND_REINVESTMENT"
	ListSecuritiesTransactionsTransactionTypeDividendReinvestmentCancellation               ListSecuritiesTransactionsTransactionType = "DIVIDEND_REINVESTMENT_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeDustCleanup                                    ListSecuritiesTransactionsTransactionType = "DUST_CLEANUP"
	ListSecuritiesTransactionsTransactionTypeDutchAuction                                   ListSecuritiesTransactionsTransactionType = "DUTCH_AUCTION"
	ListSecuritiesTransactionsTransactionTypeDutchAuctionCancellation                       ListSecuritiesTransactionsTransactionType = "DUTCH_AUCTION_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeIntermediateSecuritiesDistribution             ListSecuritiesTransactionsTransactionType = "INTERMEDIATE_SECURITIES_DISTRIBUTION"
	ListSecuritiesTransactionsTransactionTypeIntermediateSecuritiesDistributionCancellation ListSecuritiesTransactionsTransactionType = "INTERMEDIATE_SECURITIES_DISTRIBUTION_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeMerger                                         ListSecuritiesTransactionsTransactionType = "MERGER"
	ListSecuritiesTransactionsTransactionTypeMergerCancellation                             ListSecuritiesTransactionsTransactionType = "MERGER_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeNonOfficialOffer                               ListSecuritiesTransactionsTransactionType = "NON_OFFICIAL_OFFER"
	ListSecuritiesTransactionsTransactionTypeNonOfficialOfferCancellation                   ListSecuritiesTransactionsTransactionType = "NON_OFFICIAL_OFFER_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeOddLotSale                                     ListSecuritiesTransactionsTransactionType = "ODD_LOT_SALE"
	ListSecuritiesTransactionsTransactionTypeOddLotSaleCancellation                         ListSecuritiesTransactionsTransactionType = "ODD_LOT_SALE_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeOrderExecution                                 ListSecuritiesTransactionsTransactionType = "ORDER_EXECUTION"
	ListSecuritiesTransactionsTransactionTypeOrderExecutionCancellation                     ListSecuritiesTransactionsTransactionType = "ORDER_EXECUTION_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeOtherEvent                                     ListSecuritiesTransactionsTransactionType = "OTHER_EVENT"
	ListSecuritiesTransactionsTransactionTypeOtherEventCancellation                         ListSecuritiesTransactionsTransactionType = "OTHER_EVENT_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypePriorityIssue                                  ListSecuritiesTransactionsTransactionType = "PRIORITY_ISSUE"
	ListSecuritiesTransactionsTransactionTypePriorityIssueCancellation                      ListSecuritiesTransactionsTransactionType = "PRIORITY_ISSUE_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeRepurchaseOffer                                ListSecuritiesTransactionsTransactionType = "REPURCHASE_OFFER"
	ListSecuritiesTransactionsTransactionTypeRepurchaseOfferCancellation                    ListSecuritiesTransactionsTransactionType = "REPURCHASE_OFFER_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeReverseStockSplit                              ListSecuritiesTransactionsTransactionType = "REVERSE_STOCK_SPLIT"
	ListSecuritiesTransactionsTransactionTypeReverseStockSplitCancellation                  ListSecuritiesTransactionsTransactionType = "REVERSE_STOCK_SPLIT_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeRightsIssue                                    ListSecuritiesTransactionsTransactionType = "RIGHTS_ISSUE"
	ListSecuritiesTransactionsTransactionTypeRightsIssueCancellation                        ListSecuritiesTransactionsTransactionType = "RIGHTS_ISSUE_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeSpinOff                                        ListSecuritiesTransactionsTransactionType = "SPIN_OFF"
	ListSecuritiesTransactionsTransactionTypeSpinOffCancellation                            ListSecuritiesTransactionsTransactionType = "SPIN_OFF_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeStockDividend                                  ListSecuritiesTransactionsTransactionType = "STOCK_DIVIDEND"
	ListSecuritiesTransactionsTransactionTypeStockDividendCancellation                      ListSecuritiesTransactionsTransactionType = "STOCK_DIVIDEND_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeStockSplit                                     ListSecuritiesTransactionsTransactionType = "STOCK_SPLIT"
	ListSecuritiesTransactionsTransactionTypeStockSplitCancellation                         ListSecuritiesTransactionsTransactionType = "STOCK_SPLIT_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeTender                                         ListSecuritiesTransactionsTransactionType = "TENDER"
	ListSecuritiesTransactionsTransactionTypeTenderCancellation                             ListSecuritiesTransactionsTransactionType = "TENDER_CANCELLATION"
	ListSecuritiesTransactionsTransactionTypeWorthless                                      ListSecuritiesTransactionsTransactionType = "WORTHLESS"
	ListSecuritiesTransactionsTransactionTypeWorthlessCancellation                          ListSecuritiesTransactionsTransactionType = "WORTHLESS_CANCELLATION"
)

func (e ListSecuritiesTransactionsTransactionType) ToPointer() *ListSecuritiesTransactionsTransactionType {
	return &e
}

func (e *ListSecuritiesTransactionsTransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BONUS_ISSUE":
		fallthrough
	case "BONUS_ISSUE_CANCELLATION":
		fallthrough
	case "CALL_ON_INTERMEDIATE_SECURITIES":
		fallthrough
	case "CALL_ON_INTERMEDIATE_SECURITIES_CANCELLATION":
		fallthrough
	case "CHANGE":
		fallthrough
	case "CHANGE_CANCELLATION":
		fallthrough
	case "DIVIDEND_OPTION":
		fallthrough
	case "DIVIDEND_OPTION_CANCELLATION":
		fallthrough
	case "DIVIDEND_REINVESTMENT":
		fallthrough
	case "DIVIDEND_REINVESTMENT_CANCELLATION":
		fallthrough
	case "DUST_CLEANUP":
		fallthrough
	case "DUTCH_AUCTION":
		fallthrough
	case "DUTCH_AUCTION_CANCELLATION":
		fallthrough
	case "INTERMEDIATE_SECURITIES_DISTRIBUTION":
		fallthrough
	case "INTERMEDIATE_SECURITIES_DISTRIBUTION_CANCELLATION":
		fallthrough
	case "MERGER":
		fallthrough
	case "MERGER_CANCELLATION":
		fallthrough
	case "NON_OFFICIAL_OFFER":
		fallthrough
	case "NON_OFFICIAL_OFFER_CANCELLATION":
		fallthrough
	case "ODD_LOT_SALE":
		fallthrough
	case "ODD_LOT_SALE_CANCELLATION":
		fallthrough
	case "ORDER_EXECUTION":
		fallthrough
	case "ORDER_EXECUTION_CANCELLATION":
		fallthrough
	case "OTHER_EVENT":
		fallthrough
	case "OTHER_EVENT_CANCELLATION":
		fallthrough
	case "PRIORITY_ISSUE":
		fallthrough
	case "PRIORITY_ISSUE_CANCELLATION":
		fallthrough
	case "REPURCHASE_OFFER":
		fallthrough
	case "REPURCHASE_OFFER_CANCELLATION":
		fallthrough
	case "REVERSE_STOCK_SPLIT":
		fallthrough
	case "REVERSE_STOCK_SPLIT_CANCELLATION":
		fallthrough
	case "RIGHTS_ISSUE":
		fallthrough
	case "RIGHTS_ISSUE_CANCELLATION":
		fallthrough
	case "SPIN_OFF":
		fallthrough
	case "SPIN_OFF_CANCELLATION":
		fallthrough
	case "STOCK_DIVIDEND":
		fallthrough
	case "STOCK_DIVIDEND_CANCELLATION":
		fallthrough
	case "STOCK_SPLIT":
		fallthrough
	case "STOCK_SPLIT_CANCELLATION":
		fallthrough
	case "TENDER":
		fallthrough
	case "TENDER_CANCELLATION":
		fallthrough
	case "WORTHLESS":
		fallthrough
	case "WORTHLESS_CANCELLATION":
		*e = ListSecuritiesTransactionsTransactionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSecuritiesTransactionsTransactionType: %v", v)
	}
}

type SecurityTransaction struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	// Account unique identifier.
	AccountID string `json:"account_id"`
	//  Transaction booking date and time. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	BookingDate time.Time `json:"booking_date"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Entity representing the security transaction delta.
	Delta SecurityTransactionDelta `json:"delta"`
	// Security transaction unique identifier.
	ID string `json:"id"`
	// Entity representing instrument
	Instrument ListSecuritiesTransactionsInstrument `json:"instrument"`
	References []SecurityTransactionReference       `json:"references"`
	// Transaction type
	// * BONUS_ISSUE - Bonus Issue/Capitalisation Issue
	// * BONUS_ISSUE_CANCELLATION - Bonus Issue/Capitalisation Issue, Cancellation
	// * CALL_ON_INTERMEDIATE_SECURITIES - Call on Intermediate Securities
	// * CALL_ON_INTERMEDIATE_SECURITIES_CANCELLATION - Call on Intermediate Securities, Cancellation
	// * CHANGE - Change
	// * CHANGE_CANCELLATION - Change, Cancellation
	// * DIVIDEND_OPTION - Dividend Option
	// * DIVIDEND_OPTION_CANCELLATION - Dividend Option, Cancellation
	// * DIVIDEND_REINVESTMENT - Dividend Reinvestment
	// * DIVIDEND_REINVESTMENT_CANCELLATION - Dividend Reinvestment, Cancellation
	// * DUST_CLEANUP - Dust Cleanup
	// * DUTCH_AUCTION - Dutch Auction
	// * DUTCH_AUCTION_CANCELLATION - Dutch Auction, Cancellation
	// * INTERMEDIATE_SECURITIES_DISTRIBUTION - Intermediate Securities Distribution
	// * INTERMEDIATE_SECURITIES_DISTRIBUTION_CANCELLATION - Intermediate Securities Distribution, Cancellation
	// * MERGER - Merger
	// * MERGER_CANCELLATION - Merger, Cancellation
	// * NON_OFFICIAL_OFFER - Non-Official Offer
	// * NON_OFFICIAL_OFFER_CANCELLATION - Non-Official Offer, Cancellation
	// * ODD_LOT_SALE - Odd Lot Sale/Purchase
	// * ODD_LOT_SALE_CANCELLATION - Odd Lot Sale/Purchase, Cancellation
	// * ORDER_EXECUTION - Order execution
	// * ORDER_EXECUTION_CANCELLATION - Order execution cancellation
	// * OTHER_EVENT - Other Event
	// * OTHER_EVENT_CANCELLATION - Other Event, Cancellation
	// * PRIORITY_ISSUE - Priority Issue
	// * PRIORITY_ISSUE_CANCELLATION - Priority Issue, Cancellation
	// * REPURCHASE_OFFER - Repurchase Offer/Issuer Bid/Reverse Rights
	// * REPURCHASE_OFFER_CANCELLATION - Repurchase Offer/Issuer Bid/Reverse Rights, Cancellation
	// * REVERSE_STOCK_SPLIT - Reverse Stock Split/Change in Nominal Value
	// * REVERSE_STOCK_SPLIT_CANCELLATION - Reverse Stock Split/Change in Nominal Value, Cancellation
	// * RIGHTS_ISSUE - Rights Issue/Subscription Rights/Rights Offer
	// * RIGHTS_ISSUE_CANCELLATION - Rights Issue/Subscription Rights/Rights Offer, Cancellation
	// * SPIN_OFF - Spin-Off
	// * SPIN_OFF_CANCELLATION - Spin-Off, Cancellation
	// * STOCK_DIVIDEND - Stock Dividend
	// * STOCK_DIVIDEND_CANCELLATION - Stock Dividend, Cancellation
	// * STOCK_SPLIT - Stock Split/Change in Nominal Value/Subdivision
	// * STOCK_SPLIT_CANCELLATION - Stock Split/Change in Nominal Value/Subdivision, Cancellation
	// * TENDER - Tender/Acquisition/Takeover/Purchase Offer
	// * TENDER_CANCELLATION - Tender/Acquisition/Takeover/Purchase Offer, Cancellation
	// * WORTHLESS - Worthless
	// * WORTHLESS_CANCELLATION - Worthless, Cancellation
	Type ListSecuritiesTransactionsTransactionType `json:"type"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// Transaction value date and time. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ValueDate time.Time `json:"value_date"`
}

func (s SecurityTransaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityTransaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SecurityTransaction) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SecurityTransaction) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *SecurityTransaction) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *SecurityTransaction) GetBookingDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.BookingDate
}

func (o *SecurityTransaction) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *SecurityTransaction) GetDelta() SecurityTransactionDelta {
	if o == nil {
		return SecurityTransactionDelta{}
	}
	return o.Delta
}

func (o *SecurityTransaction) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SecurityTransaction) GetInstrument() ListSecuritiesTransactionsInstrument {
	if o == nil {
		return ListSecuritiesTransactionsInstrument{}
	}
	return o.Instrument
}

func (o *SecurityTransaction) GetReferences() []SecurityTransactionReference {
	if o == nil {
		return []SecurityTransactionReference{}
	}
	return o.References
}

func (o *SecurityTransaction) GetType() ListSecuritiesTransactionsTransactionType {
	if o == nil {
		return ListSecuritiesTransactionsTransactionType("")
	}
	return o.Type
}

func (o *SecurityTransaction) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *SecurityTransaction) GetValueDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ValueDate
}

// ListSecuritiesTransactionsOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListSecuritiesTransactionsOrder string

const (
	ListSecuritiesTransactionsOrderAsc  ListSecuritiesTransactionsOrder = "ASC"
	ListSecuritiesTransactionsOrderDesc ListSecuritiesTransactionsOrder = "DESC"
)

func (e ListSecuritiesTransactionsOrder) ToPointer() *ListSecuritiesTransactionsOrder {
	return &e
}

func (e *ListSecuritiesTransactionsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListSecuritiesTransactionsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSecuritiesTransactionsOrder: %v", v)
	}
}

type ListSecuritiesTransactionsMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListSecuritiesTransactionsOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListSecuritiesTransactionsMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListSecuritiesTransactionsMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListSecuritiesTransactionsMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListSecuritiesTransactionsMeta) GetOrder() *ListSecuritiesTransactionsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListSecuritiesTransactionsMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListSecuritiesTransactionsMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListSecuritiesTransactionsSecurityTransactionListResponse - Securities Transactions
type ListSecuritiesTransactionsSecurityTransactionListResponse struct {
	Data []SecurityTransaction          `json:"data"`
	Meta ListSecuritiesTransactionsMeta `json:"meta"`
}

func (o *ListSecuritiesTransactionsSecurityTransactionListResponse) GetData() []SecurityTransaction {
	if o == nil {
		return []SecurityTransaction{}
	}
	return o.Data
}

func (o *ListSecuritiesTransactionsSecurityTransactionListResponse) GetMeta() ListSecuritiesTransactionsMeta {
	if o == nil {
		return ListSecuritiesTransactionsMeta{}
	}
	return o.Meta
}

type ListSecuritiesTransactionsResponse struct {
	// Securities Transactions
	TwoHundredApplicationJSONSecurityTransactionListResponse *ListSecuritiesTransactionsSecurityTransactionListResponse
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListSecuritiesTransactionsResponse) GetTwoHundredApplicationJSONSecurityTransactionListResponse() *ListSecuritiesTransactionsSecurityTransactionListResponse {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONSecurityTransactionListResponse
}

func (o *ListSecuritiesTransactionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListSecuritiesTransactionsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListSecuritiesTransactionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListSecuritiesTransactionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
