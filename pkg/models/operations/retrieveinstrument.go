// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveInstrumentSecurity struct {
	OauthClientCredentials string `security:"scheme,type=oauth2,name=Authorization"`
}

func (o *RetrieveInstrumentSecurity) GetOauthClientCredentials() string {
	if o == nil {
		return ""
	}
	return o.OauthClientCredentials
}

type RetrieveInstrumentRequest struct {
	InstrumentID string `pathParam:"style=simple,explode=false,name=instrument_id"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (r RetrieveInstrumentRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveInstrumentRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveInstrumentRequest) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *RetrieveInstrumentRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveInstrumentRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveInstrumentRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveInstrumentRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// RetrieveInstrumentInstrumentTradingStatus - Instrument trading status
// * ACTIVE - The instrument can currently be traded on the Upvest platform.
// * INACTIVE - The instrument cannot currently be traded on the Upvest platform.
type RetrieveInstrumentInstrumentTradingStatus string

const (
	RetrieveInstrumentInstrumentTradingStatusActive   RetrieveInstrumentInstrumentTradingStatus = "ACTIVE"
	RetrieveInstrumentInstrumentTradingStatusInactive RetrieveInstrumentInstrumentTradingStatus = "INACTIVE"
)

func (e RetrieveInstrumentInstrumentTradingStatus) ToPointer() *RetrieveInstrumentInstrumentTradingStatus {
	return &e
}

func (e *RetrieveInstrumentInstrumentTradingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		*e = RetrieveInstrumentInstrumentTradingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveInstrumentInstrumentTradingStatus: %v", v)
	}
}

// RetrieveInstrumentResponseBody - Instrument
type RetrieveInstrumentResponseBody struct {
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Determines whether the platform can handle fractional investments within this instrument.
	FractionalTrading bool `json:"fractional_trading"`
	// Instrument unique identifier.
	ID string `json:"id"`
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	Isin *string `json:"isin,omitempty"`
	// Instrument name
	Name string `json:"name"`
	// Instrument trading status
	// * ACTIVE - The instrument can currently be traded on the Upvest platform.
	// * INACTIVE - The instrument cannot currently be traded on the Upvest platform.
	TradingStatus RetrieveInstrumentInstrumentTradingStatus `json:"trading_status"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// German securities identification code known as [Wertpapierkennnummer](https://en.wikipedia.org/wiki/Wertpapierkennnummer).
	Wkn *string `json:"wkn,omitempty"`
}

func (r RetrieveInstrumentResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveInstrumentResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveInstrumentResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveInstrumentResponseBody) GetFractionalTrading() bool {
	if o == nil {
		return false
	}
	return o.FractionalTrading
}

func (o *RetrieveInstrumentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveInstrumentResponseBody) GetIsin() *string {
	if o == nil {
		return nil
	}
	return o.Isin
}

func (o *RetrieveInstrumentResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RetrieveInstrumentResponseBody) GetTradingStatus() RetrieveInstrumentInstrumentTradingStatus {
	if o == nil {
		return RetrieveInstrumentInstrumentTradingStatus("")
	}
	return o.TradingStatus
}

func (o *RetrieveInstrumentResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *RetrieveInstrumentResponseBody) GetWkn() *string {
	if o == nil {
		return nil
	}
	return o.Wkn
}

type RetrieveInstrumentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Instrument
	Object *RetrieveInstrumentResponseBody
}

func (o *RetrieveInstrumentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveInstrumentResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *RetrieveInstrumentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveInstrumentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RetrieveInstrumentResponse) GetObject() *RetrieveInstrumentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
