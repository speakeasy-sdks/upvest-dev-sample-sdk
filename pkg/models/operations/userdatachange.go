// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
)

// UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress - Address. Must not be a P.O. box or c/o address.
type UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// UserDataChangeUsersRequestDocumentType - The type of document used to proof data change
// * UTILITY_BILL - Utility bill
// * TELEPHONE_BILL - Telephone bill
// * INTERNET_BILL - Internet bill
// * BANK_STATEMENT - Bank statement
// * REGISTRATION_CERT - Registration certificate
// * RESIDENCE_PERMIT - Residence permit
// * ID_CARD - National Identification document
type UserDataChangeUsersRequestDocumentType string

const (
	UserDataChangeUsersRequestDocumentTypeUtilityBill      UserDataChangeUsersRequestDocumentType = "UTILITY_BILL"
	UserDataChangeUsersRequestDocumentTypeTelephoneBill    UserDataChangeUsersRequestDocumentType = "TELEPHONE_BILL"
	UserDataChangeUsersRequestDocumentTypeInternetBill     UserDataChangeUsersRequestDocumentType = "INTERNET_BILL"
	UserDataChangeUsersRequestDocumentTypeBankStatement    UserDataChangeUsersRequestDocumentType = "BANK_STATEMENT"
	UserDataChangeUsersRequestDocumentTypeRegistrationCert UserDataChangeUsersRequestDocumentType = "REGISTRATION_CERT"
	UserDataChangeUsersRequestDocumentTypeResidencePermit  UserDataChangeUsersRequestDocumentType = "RESIDENCE_PERMIT"
	UserDataChangeUsersRequestDocumentTypeIDCard           UserDataChangeUsersRequestDocumentType = "ID_CARD"
)

func (e UserDataChangeUsersRequestDocumentType) ToPointer() *UserDataChangeUsersRequestDocumentType {
	return &e
}

func (e *UserDataChangeUsersRequestDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTILITY_BILL":
		fallthrough
	case "TELEPHONE_BILL":
		fallthrough
	case "INTERNET_BILL":
		fallthrough
	case "BANK_STATEMENT":
		fallthrough
	case "REGISTRATION_CERT":
		fallthrough
	case "RESIDENCE_PERMIT":
		fallthrough
	case "ID_CARD":
		*e = UserDataChangeUsersRequestDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUsersRequestDocumentType: %v", v)
	}
}

type UserDataChangeUsersRequestRequestBodyAddress struct {
	// Address. Must not be a P.O. box or c/o address.
	Address UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress `json:"address"`
	// Download link for the document that proofs data change.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used to proof data change
	// * UTILITY_BILL - Utility bill
	// * TELEPHONE_BILL - Telephone bill
	// * INTERNET_BILL - Internet bill
	// * BANK_STATEMENT - Bank statement
	// * REGISTRATION_CERT - Registration certificate
	// * RESIDENCE_PERMIT - Residence permit
	// * ID_CARD - National Identification document
	DocumentType UserDataChangeUsersRequestDocumentType `json:"document_type"`
	// Issuance date in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	IssuanceDate types.Date `json:"issuance_date"`
}

func (u UserDataChangeUsersRequestRequestBodyAddress) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserDataChangeUsersRequestRequestBodyAddress) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserDataChangeUsersRequestRequestBodyAddress) GetAddress() UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress {
	if o == nil {
		return UserDataChangeUsersRequestRequestBodyUserDataChangeRequestAddress{}
	}
	return o.Address
}

func (o *UserDataChangeUsersRequestRequestBodyAddress) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *UserDataChangeUsersRequestRequestBodyAddress) GetDocumentType() UserDataChangeUsersRequestDocumentType {
	if o == nil {
		return UserDataChangeUsersRequestDocumentType("")
	}
	return o.DocumentType
}

func (o *UserDataChangeUsersRequestRequestBodyAddress) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

// UserDataChangeUsersDocumentType - The type of document used to proof data change
// * PASSPORT - Passport
// * ID_CARD - National Identification document
type UserDataChangeUsersDocumentType string

const (
	UserDataChangeUsersDocumentTypePassport UserDataChangeUsersDocumentType = "PASSPORT"
	UserDataChangeUsersDocumentTypeIDCard   UserDataChangeUsersDocumentType = "ID_CARD"
)

func (e UserDataChangeUsersDocumentType) ToPointer() *UserDataChangeUsersDocumentType {
	return &e
}

func (e *UserDataChangeUsersDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		*e = UserDataChangeUsersDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUsersDocumentType: %v", v)
	}
}

type Nationality struct {
	// Download link for the document that proofs data change.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used to proof data change
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	DocumentType UserDataChangeUsersDocumentType `json:"document_type"`
	// Issuance date in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	IssuanceDate types.Date `json:"issuance_date"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
}

func (n Nationality) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *Nationality) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Nationality) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *Nationality) GetDocumentType() UserDataChangeUsersDocumentType {
	if o == nil {
		return UserDataChangeUsersDocumentType("")
	}
	return o.DocumentType
}

func (o *Nationality) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *Nationality) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

// UserDataChangeUsersRequestAddress - Address. Must not be a P.O. box or c/o address.
type UserDataChangeUsersRequestAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *UserDataChangeUsersRequestAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *UserDataChangeUsersRequestAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *UserDataChangeUsersRequestAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *UserDataChangeUsersRequestAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *UserDataChangeUsersRequestAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *UserDataChangeUsersRequestAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type UserDataChangeUsersPostalAddressType string

const (
	UserDataChangeUsersPostalAddressTypeUserDataChangeUsersRequestAddress UserDataChangeUsersPostalAddressType = "user_data_change_Users_request_Address"
)

// UserDataChangeUsersPostalAddress - User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
type UserDataChangeUsersPostalAddress struct {
	UserDataChangeUsersRequestAddress *UserDataChangeUsersRequestAddress

	Type UserDataChangeUsersPostalAddressType
}

func CreateUserDataChangeUsersPostalAddressUserDataChangeUsersRequestAddress(userDataChangeUsersRequestAddress UserDataChangeUsersRequestAddress) UserDataChangeUsersPostalAddress {
	typ := UserDataChangeUsersPostalAddressTypeUserDataChangeUsersRequestAddress

	return UserDataChangeUsersPostalAddress{
		UserDataChangeUsersRequestAddress: &userDataChangeUsersRequestAddress,
		Type:                              typ,
	}
}

func (u *UserDataChangeUsersPostalAddress) UnmarshalJSON(data []byte) error {

	userDataChangeUsersRequestAddress := UserDataChangeUsersRequestAddress{}
	if err := utils.UnmarshalJSON(data, &userDataChangeUsersRequestAddress, "", true, true); err == nil {
		u.UserDataChangeUsersRequestAddress = &userDataChangeUsersRequestAddress
		u.Type = UserDataChangeUsersPostalAddressTypeUserDataChangeUsersRequestAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UserDataChangeUsersPostalAddress) MarshalJSON() ([]byte, error) {
	if u.UserDataChangeUsersRequestAddress != nil {
		return utils.MarshalJSON(u.UserDataChangeUsersRequestAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// UserDataChangeUsersSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type UserDataChangeUsersSalutation string

const (
	UserDataChangeUsersSalutationUnknown                 UserDataChangeUsersSalutation = ""
	UserDataChangeUsersSalutationSalutationMale          UserDataChangeUsersSalutation = "SALUTATION_MALE"
	UserDataChangeUsersSalutationSalutationFemale        UserDataChangeUsersSalutation = "SALUTATION_FEMALE"
	UserDataChangeUsersSalutationSalutationFemaleMarried UserDataChangeUsersSalutation = "SALUTATION_FEMALE_MARRIED"
	UserDataChangeUsersSalutationSalutationDiverse       UserDataChangeUsersSalutation = "SALUTATION_DIVERSE"
)

func (e UserDataChangeUsersSalutation) ToPointer() *UserDataChangeUsersSalutation {
	return &e
}

func (e *UserDataChangeUsersSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = UserDataChangeUsersSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUsersSalutation: %v", v)
	}
}

// UserDataChangeUsersTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type UserDataChangeUsersTitle string

const (
	UserDataChangeUsersTitleUnknown  UserDataChangeUsersTitle = ""
	UserDataChangeUsersTitleDr       UserDataChangeUsersTitle = "DR"
	UserDataChangeUsersTitleProf     UserDataChangeUsersTitle = "PROF"
	UserDataChangeUsersTitleProfDr   UserDataChangeUsersTitle = "PROF_DR"
	UserDataChangeUsersTitleDiplIng  UserDataChangeUsersTitle = "DIPL_ING"
	UserDataChangeUsersTitleMagister UserDataChangeUsersTitle = "MAGISTER"
)

func (e UserDataChangeUsersTitle) ToPointer() *UserDataChangeUsersTitle {
	return &e
}

func (e *UserDataChangeUsersTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = UserDataChangeUsersTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUsersTitle: %v", v)
	}
}

type Other struct {
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Email of the user. Must be a valid email address.
	Email *string `json:"email,omitempty"`
	// Phone number of the user. [Phone number E.164 format](https://en.wikipedia.org/wiki/E.164).
	PhoneNumber *string `json:"phone_number,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *UserDataChangeUsersPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *UserDataChangeUsersSalutation `default:"" json:"salutation"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *UserDataChangeUsersTitle `default:"" json:"title"`
}

func (o Other) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Other) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Other) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *Other) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Other) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *Other) GetPostalAddress() *UserDataChangeUsersPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *Other) GetSalutation() *UserDataChangeUsersSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *Other) GetTitle() *UserDataChangeUsersTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

// UserDataChangeDocumentType - The type of document used to proof data change
// * PASSPORT - Passport
// * ID_CARD - National Identification document
type UserDataChangeDocumentType string

const (
	UserDataChangeDocumentTypePassport UserDataChangeDocumentType = "PASSPORT"
	UserDataChangeDocumentTypeIDCard   UserDataChangeDocumentType = "ID_CARD"
)

func (e UserDataChangeDocumentType) ToPointer() *UserDataChangeDocumentType {
	return &e
}

func (e *UserDataChangeDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		*e = UserDataChangeDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeDocumentType: %v", v)
	}
}

type NameChange struct {
	// Download link for the document that proofs data change.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used to proof data change
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	DocumentType UserDataChangeDocumentType `json:"document_type"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// Issuance date in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	IssuanceDate types.Date `json:"issuance_date"`
	// Last name of the user.
	LastName string `json:"last_name"`
}

func (n NameChange) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NameChange) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *NameChange) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *NameChange) GetDocumentType() UserDataChangeDocumentType {
	if o == nil {
		return UserDataChangeDocumentType("")
	}
	return o.DocumentType
}

func (o *NameChange) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *NameChange) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *NameChange) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

type UserTOLDataChangeRequestType string

const (
	UserTOLDataChangeRequestTypeNameChange                                   UserTOLDataChangeRequestType = "Name change"
	UserTOLDataChangeRequestTypeOther                                        UserTOLDataChangeRequestType = "Other"
	UserTOLDataChangeRequestTypeNationality                                  UserTOLDataChangeRequestType = "Nationality"
	UserTOLDataChangeRequestTypeUserDataChangeUsersRequestRequestBodyAddress UserTOLDataChangeRequestType = "user_data_change_Users_request_requestBody_Address"
)

type UserTOLDataChangeRequest struct {
	NameChange                                   *NameChange
	Other                                        *Other
	Nationality                                  *Nationality
	UserDataChangeUsersRequestRequestBodyAddress *UserDataChangeUsersRequestRequestBodyAddress

	Type UserTOLDataChangeRequestType
}

func CreateUserTOLDataChangeRequestNameChange(nameChange NameChange) UserTOLDataChangeRequest {
	typ := UserTOLDataChangeRequestTypeNameChange

	return UserTOLDataChangeRequest{
		NameChange: &nameChange,
		Type:       typ,
	}
}

func CreateUserTOLDataChangeRequestOther(other Other) UserTOLDataChangeRequest {
	typ := UserTOLDataChangeRequestTypeOther

	return UserTOLDataChangeRequest{
		Other: &other,
		Type:  typ,
	}
}

func CreateUserTOLDataChangeRequestNationality(nationality Nationality) UserTOLDataChangeRequest {
	typ := UserTOLDataChangeRequestTypeNationality

	return UserTOLDataChangeRequest{
		Nationality: &nationality,
		Type:        typ,
	}
}

func CreateUserTOLDataChangeRequestUserDataChangeUsersRequestRequestBodyAddress(userDataChangeUsersRequestRequestBodyAddress UserDataChangeUsersRequestRequestBodyAddress) UserTOLDataChangeRequest {
	typ := UserTOLDataChangeRequestTypeUserDataChangeUsersRequestRequestBodyAddress

	return UserTOLDataChangeRequest{
		UserDataChangeUsersRequestRequestBodyAddress: &userDataChangeUsersRequestRequestBodyAddress,
		Type: typ,
	}
}

func (u *UserTOLDataChangeRequest) UnmarshalJSON(data []byte) error {

	nationality := Nationality{}
	if err := utils.UnmarshalJSON(data, &nationality, "", true, true); err == nil {
		u.Nationality = &nationality
		u.Type = UserTOLDataChangeRequestTypeNationality
		return nil
	}

	userDataChangeUsersRequestRequestBodyAddress := UserDataChangeUsersRequestRequestBodyAddress{}
	if err := utils.UnmarshalJSON(data, &userDataChangeUsersRequestRequestBodyAddress, "", true, true); err == nil {
		u.UserDataChangeUsersRequestRequestBodyAddress = &userDataChangeUsersRequestRequestBodyAddress
		u.Type = UserTOLDataChangeRequestTypeUserDataChangeUsersRequestRequestBodyAddress
		return nil
	}

	nameChange := NameChange{}
	if err := utils.UnmarshalJSON(data, &nameChange, "", true, true); err == nil {
		u.NameChange = &nameChange
		u.Type = UserTOLDataChangeRequestTypeNameChange
		return nil
	}

	other := Other{}
	if err := utils.UnmarshalJSON(data, &other, "", true, true); err == nil {
		u.Other = &other
		u.Type = UserTOLDataChangeRequestTypeOther
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UserTOLDataChangeRequest) MarshalJSON() ([]byte, error) {
	if u.NameChange != nil {
		return utils.MarshalJSON(u.NameChange, "", true)
	}

	if u.Other != nil {
		return utils.MarshalJSON(u.Other, "", true)
	}

	if u.Nationality != nil {
		return utils.MarshalJSON(u.Nationality, "", true)
	}

	if u.UserDataChangeUsersRequestRequestBodyAddress != nil {
		return utils.MarshalJSON(u.UserDataChangeUsersRequestRequestBodyAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// UserDataChangeUsersAddress - Address. Must not be a P.O. box or c/o address.
type UserDataChangeUsersAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *UserDataChangeUsersAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *UserDataChangeUsersAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *UserDataChangeUsersAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *UserDataChangeUsersAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *UserDataChangeUsersAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *UserDataChangeUsersAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// UserDataChangeAddress - Address. Must not be a P.O. box or c/o address.
type UserDataChangeAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *UserDataChangeAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *UserDataChangeAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *UserDataChangeAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *UserDataChangeAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *UserDataChangeAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *UserDataChangeAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type UserDataChangePostalAddressType string

const (
	UserDataChangePostalAddressTypeUserDataChangeAddress UserDataChangePostalAddressType = "user_data_change_Address"
)

// UserDataChangePostalAddress - User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
type UserDataChangePostalAddress struct {
	UserDataChangeAddress *UserDataChangeAddress

	Type UserDataChangePostalAddressType
}

func CreateUserDataChangePostalAddressUserDataChangeAddress(userDataChangeAddress UserDataChangeAddress) UserDataChangePostalAddress {
	typ := UserDataChangePostalAddressTypeUserDataChangeAddress

	return UserDataChangePostalAddress{
		UserDataChangeAddress: &userDataChangeAddress,
		Type:                  typ,
	}
}

func (u *UserDataChangePostalAddress) UnmarshalJSON(data []byte) error {

	userDataChangeAddress := UserDataChangeAddress{}
	if err := utils.UnmarshalJSON(data, &userDataChangeAddress, "", true, true); err == nil {
		u.UserDataChangeAddress = &userDataChangeAddress
		u.Type = UserDataChangePostalAddressTypeUserDataChangeAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UserDataChangePostalAddress) MarshalJSON() ([]byte, error) {
	if u.UserDataChangeAddress != nil {
		return utils.MarshalJSON(u.UserDataChangeAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// UserDataChangeSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type UserDataChangeSalutation string

const (
	UserDataChangeSalutationUnknown                 UserDataChangeSalutation = ""
	UserDataChangeSalutationSalutationMale          UserDataChangeSalutation = "SALUTATION_MALE"
	UserDataChangeSalutationSalutationFemale        UserDataChangeSalutation = "SALUTATION_FEMALE"
	UserDataChangeSalutationSalutationFemaleMarried UserDataChangeSalutation = "SALUTATION_FEMALE_MARRIED"
	UserDataChangeSalutationSalutationDiverse       UserDataChangeSalutation = "SALUTATION_DIVERSE"
)

func (e UserDataChangeSalutation) ToPointer() *UserDataChangeSalutation {
	return &e
}

func (e *UserDataChangeSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = UserDataChangeSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeSalutation: %v", v)
	}
}

// UserDataChangeTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type UserDataChangeTitle string

const (
	UserDataChangeTitleUnknown  UserDataChangeTitle = ""
	UserDataChangeTitleDr       UserDataChangeTitle = "DR"
	UserDataChangeTitleProf     UserDataChangeTitle = "PROF"
	UserDataChangeTitleProfDr   UserDataChangeTitle = "PROF_DR"
	UserDataChangeTitleDiplIng  UserDataChangeTitle = "DIPL_ING"
	UserDataChangeTitleMagister UserDataChangeTitle = "MAGISTER"
)

func (e UserDataChangeTitle) ToPointer() *UserDataChangeTitle {
	return &e
}

func (e *UserDataChangeTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = UserDataChangeTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeTitle: %v", v)
	}
}

type UserBYOLDataChangeRequest struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   *UserDataChangeUsersAddress `json:"address,omitempty"`
	BirthCity *string                     `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate *types.Date `json:"birth_date,omitempty"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// First name of the user.
	FirstName *string `json:"first_name,omitempty"`
	// Last name of the user.
	LastName *string `json:"last_name,omitempty"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *UserDataChangePostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *UserDataChangeSalutation `default:"" json:"salutation"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *UserDataChangeTitle `default:"" json:"title"`
}

func (u UserBYOLDataChangeRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserBYOLDataChangeRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserBYOLDataChangeRequest) GetAddress() *UserDataChangeUsersAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *UserBYOLDataChangeRequest) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *UserBYOLDataChangeRequest) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *UserBYOLDataChangeRequest) GetBirthDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.BirthDate
}

func (o *UserBYOLDataChangeRequest) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *UserBYOLDataChangeRequest) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *UserBYOLDataChangeRequest) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *UserBYOLDataChangeRequest) GetNationalities() []string {
	if o == nil {
		return nil
	}
	return o.Nationalities
}

func (o *UserBYOLDataChangeRequest) GetPostalAddress() *UserDataChangePostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *UserBYOLDataChangeRequest) GetSalutation() *UserDataChangeSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *UserBYOLDataChangeRequest) GetTitle() *UserDataChangeTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

type UserDataChangeUserDataChangeRequestType string

const (
	UserDataChangeUserDataChangeRequestTypeUserBYOLDataChangeRequest UserDataChangeUserDataChangeRequestType = "User (BYOL) - Data Change Request"
	UserDataChangeUserDataChangeRequestTypeUserTOLDataChangeRequest  UserDataChangeUserDataChangeRequestType = "User (TOL) - Data Change Request"
)

type UserDataChangeUserDataChangeRequest struct {
	UserBYOLDataChangeRequest *UserBYOLDataChangeRequest
	UserTOLDataChangeRequest  *UserTOLDataChangeRequest

	Type UserDataChangeUserDataChangeRequestType
}

func CreateUserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest(userBYOLDataChangeRequest UserBYOLDataChangeRequest) UserDataChangeUserDataChangeRequest {
	typ := UserDataChangeUserDataChangeRequestTypeUserBYOLDataChangeRequest

	return UserDataChangeUserDataChangeRequest{
		UserBYOLDataChangeRequest: &userBYOLDataChangeRequest,
		Type:                      typ,
	}
}

func CreateUserDataChangeUserDataChangeRequestUserTOLDataChangeRequest(userTOLDataChangeRequest UserTOLDataChangeRequest) UserDataChangeUserDataChangeRequest {
	typ := UserDataChangeUserDataChangeRequestTypeUserTOLDataChangeRequest

	return UserDataChangeUserDataChangeRequest{
		UserTOLDataChangeRequest: &userTOLDataChangeRequest,
		Type:                     typ,
	}
}

func (u *UserDataChangeUserDataChangeRequest) UnmarshalJSON(data []byte) error {

	userBYOLDataChangeRequest := UserBYOLDataChangeRequest{}
	if err := utils.UnmarshalJSON(data, &userBYOLDataChangeRequest, "", true, true); err == nil {
		u.UserBYOLDataChangeRequest = &userBYOLDataChangeRequest
		u.Type = UserDataChangeUserDataChangeRequestTypeUserBYOLDataChangeRequest
		return nil
	}

	userTOLDataChangeRequest := UserTOLDataChangeRequest{}
	if err := utils.UnmarshalJSON(data, &userTOLDataChangeRequest, "", true, true); err == nil {
		u.UserTOLDataChangeRequest = &userTOLDataChangeRequest
		u.Type = UserDataChangeUserDataChangeRequestTypeUserTOLDataChangeRequest
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UserDataChangeUserDataChangeRequest) MarshalJSON() ([]byte, error) {
	if u.UserBYOLDataChangeRequest != nil {
		return utils.MarshalJSON(u.UserBYOLDataChangeRequest, "", true)
	}

	if u.UserTOLDataChangeRequest != nil {
		return utils.MarshalJSON(u.UserTOLDataChangeRequest, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UserDataChangeRequest struct {
	RequestBody *UserDataChangeUserDataChangeRequest `request:"mediaType=application/json"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (u UserDataChangeRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserDataChangeRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UserDataChangeRequest) GetRequestBody() *UserDataChangeUserDataChangeRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UserDataChangeRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *UserDataChangeRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *UserDataChangeRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *UserDataChangeRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *UserDataChangeRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type UserDataChangeResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UserDataChangeResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UserDataChangeResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *UserDataChangeResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UserDataChangeResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
