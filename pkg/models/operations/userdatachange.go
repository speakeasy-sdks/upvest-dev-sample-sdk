// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
)

// UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress - Address. Must not be a P.O. box or c/o address.
type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType - The type of document used to proof data change
// * UTILITY_BILL - Utility bill
// * TELEPHONE_BILL - Telephone bill
// * INTERNET_BILL - Internet bill
// * BANK_STATEMENT - Bank statement
// * REGISTRATION_CERT - Registration certificate
// * RESIDENCE_PERMIT - Residence permit
// * ID_CARD - National Identification document
type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType string

const (
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentTypeUtilityBill      UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType = "UTILITY_BILL"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentTypeTelephoneBill    UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType = "TELEPHONE_BILL"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentTypeInternetBill     UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType = "INTERNET_BILL"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentTypeBankStatement    UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType = "BANK_STATEMENT"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentTypeRegistrationCert UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType = "REGISTRATION_CERT"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentTypeResidencePermit  UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType = "RESIDENCE_PERMIT"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentTypeIDCard           UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType = "ID_CARD"
)

func (e UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType) ToPointer() *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType {
	return &e
}

func (e *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTILITY_BILL":
		fallthrough
	case "TELEPHONE_BILL":
		fallthrough
	case "INTERNET_BILL":
		fallthrough
	case "BANK_STATEMENT":
		fallthrough
	case "REGISTRATION_CERT":
		fallthrough
	case "RESIDENCE_PERMIT":
		fallthrough
	case "ID_CARD":
		*e = UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType: %v", v)
	}
}

type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress struct {
	// Address. Must not be a P.O. box or c/o address.
	Address UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress `json:"address"`
	// Download link for the document that proofs data change.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used to proof data change
	// * UTILITY_BILL - Utility bill
	// * TELEPHONE_BILL - Telephone bill
	// * INTERNET_BILL - Internet bill
	// * BANK_STATEMENT - Bank statement
	// * REGISTRATION_CERT - Registration certificate
	// * RESIDENCE_PERMIT - Residence permit
	// * ID_CARD - National Identification document
	DocumentType UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType `json:"document_type"`
	// Issuance date in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	IssuanceDate types.Date `json:"issuance_date"`
}

func (u UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress) GetAddress() UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress {
	if o == nil {
		return UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressAddress{}
	}
	return o.Address
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress) GetDocumentType() UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType {
	if o == nil {
		return UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddressDocumentType("")
	}
	return o.DocumentType
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

// UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType - The type of document used to proof data change
// * PASSPORT - Passport
// * ID_CARD - National Identification document
type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType string

const (
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentTypePassport UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType = "PASSPORT"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentTypeIDCard   UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType = "ID_CARD"
)

func (e UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType) ToPointer() *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType {
	return &e
}

func (e *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		*e = UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType: %v", v)
	}
}

type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality struct {
	// Download link for the document that proofs data change.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used to proof data change
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	DocumentType UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType `json:"document_type"`
	// Issuance date in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	IssuanceDate types.Date `json:"issuance_date"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
}

func (u UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality) GetDocumentType() UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType {
	if o == nil {
		return UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationalityDocumentType("")
	}
	return o.DocumentType
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

// UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress - Address. Must not be a P.O. box or c/o address.
type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation string

const (
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutationUnknown                 UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation = ""
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutationSalutationMale          UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation = "SALUTATION_MALE"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutationSalutationFemale        UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation = "SALUTATION_FEMALE"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutationSalutationFemaleMarried UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation = "SALUTATION_FEMALE_MARRIED"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutationSalutationDiverse       UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation = "SALUTATION_DIVERSE"
)

func (e UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation) ToPointer() *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation {
	return &e
}

func (e *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation: %v", v)
	}
}

// UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle string

const (
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitleUnknown  UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle = ""
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitleDr       UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle = "DR"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitleProf     UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle = "PROF"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitleProfDr   UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle = "PROF_DR"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitleDiplIng  UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle = "DIPL_ING"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitleMagister UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle = "MAGISTER"
)

func (e UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle) ToPointer() *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle {
	return &e
}

func (e *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle: %v", v)
	}
}

type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther struct {
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Email of the user. Must be a valid email address.
	Email *string `json:"email,omitempty"`
	// Phone number of the user. [Phone number E.164 format](https://en.wikipedia.org/wiki/E.164).
	PhoneNumber *string `json:"phone_number,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation `default:"" json:"salutation"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle `default:"" json:"title"`
}

func (u UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther) GetPostalAddress() *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther) GetSalutation() *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther) GetTitle() *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOtherTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

// UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType - The type of document used to proof data change
// * PASSPORT - Passport
// * ID_CARD - National Identification document
type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType string

const (
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentTypePassport UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType = "PASSPORT"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentTypeIDCard   UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType = "ID_CARD"
)

func (e UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType) ToPointer() *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType {
	return &e
}

func (e *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSPORT":
		fallthrough
	case "ID_CARD":
		*e = UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType: %v", v)
	}
}

type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange struct {
	// Download link for the document that proofs data change.
	DataDownloadLink string `json:"data_download_link"`
	// The type of document used to proof data change
	// * PASSPORT - Passport
	// * ID_CARD - National Identification document
	DocumentType UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType `json:"document_type"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// Issuance date in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	IssuanceDate types.Date `json:"issuance_date"`
	// Last name of the user.
	LastName string `json:"last_name"`
}

func (u UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange) GetDataDownloadLink() string {
	if o == nil {
		return ""
	}
	return o.DataDownloadLink
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange) GetDocumentType() UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType {
	if o == nil {
		return UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChangeDocumentType("")
	}
	return o.DocumentType
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange) GetIssuanceDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.IssuanceDate
}

func (o *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestType string

const (
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange  UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestType = "user_data_change_User - Data Change - Request_User (TOL) - Data Change Request_Name change"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther       UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestType = "user_data_change_User - Data Change - Request_User (TOL) - Data Change Request_Other"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestType = "user_data_change_User - Data Change - Request_User (TOL) - Data Change Request_Nationality"
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress     UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestType = "user_data_change_User - Data Change - Request_User (TOL) - Data Change Request_Address"
)

type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest struct {
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange  *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther       *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress     *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress

	Type UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestType
}

func CreateUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange(userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange) UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest {
	typ := UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange

	return UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest{
		UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange: &userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange,
		Type: typ,
	}
}

func CreateUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther(userDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther) UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest {
	typ := UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther

	return UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest{
		UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther: &userDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther,
		Type: typ,
	}
}

func CreateUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality(userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality) UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest {
	typ := UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality

	return UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest{
		UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality: &userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality,
		Type: typ,
	}
}

func CreateUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress(userDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress) UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest {
	typ := UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress

	return UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest{
		UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress: &userDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress,
		Type: typ,
	}
}

func (u *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest) UnmarshalJSON(data []byte) error {

	userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality := new(UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality)
	if err := utils.UnmarshalJSON(data, &userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality, "", true, true); err == nil {
		u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality = userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality
		u.Type = UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality
		return nil
	}

	userDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress := new(UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress)
	if err := utils.UnmarshalJSON(data, &userDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress, "", true, true); err == nil {
		u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress = userDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress
		u.Type = UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress
		return nil
	}

	userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange := new(UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange)
	if err := utils.UnmarshalJSON(data, &userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange, "", true, true); err == nil {
		u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange = userDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange
		u.Type = UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange
		return nil
	}

	userDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther := new(UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther)
	if err := utils.UnmarshalJSON(data, &userDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther, "", true, true); err == nil {
		u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther = userDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther
		u.Type = UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest) MarshalJSON() ([]byte, error) {
	if u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange != nil {
		return utils.MarshalJSON(u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNameChange, "", true)
	}

	if u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther != nil {
		return utils.MarshalJSON(u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestOther, "", true)
	}

	if u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality != nil {
		return utils.MarshalJSON(u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestNationality, "", true)
	}

	if u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress != nil {
		return utils.MarshalJSON(u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequestAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress - Address. Must not be a P.O. box or c/o address.
type UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation string

const (
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutationUnknown                 UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation = ""
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutationSalutationMale          UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation = "SALUTATION_MALE"
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutationSalutationFemale        UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation = "SALUTATION_FEMALE"
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutationSalutationFemaleMarried UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation = "SALUTATION_FEMALE_MARRIED"
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutationSalutationDiverse       UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation = "SALUTATION_DIVERSE"
)

func (e UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation) ToPointer() *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation {
	return &e
}

func (e *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation: %v", v)
	}
}

// UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle string

const (
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitleUnknown  UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle = ""
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitleDr       UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle = "DR"
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitleProf     UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle = "PROF"
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitleProfDr   UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle = "PROF_DR"
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitleDiplIng  UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle = "DIPL_ING"
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitleMagister UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle = "MAGISTER"
)

func (e UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle) ToPointer() *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle {
	return &e
}

func (e *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle: %v", v)
	}
}

type UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress `json:"address,omitempty"`
	BirthCity *string                                                              `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate *types.Date `json:"birth_date,omitempty"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// First name of the user.
	FirstName *string `json:"first_name,omitempty"`
	// Last name of the user.
	LastName *string `json:"last_name,omitempty"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation `default:"" json:"salutation"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle `default:"" json:"title"`
}

func (u UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetAddress() *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetBirthDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.BirthDate
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetNationalities() []string {
	if o == nil {
		return nil
	}
	return o.Nationalities
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetPostalAddress() *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetSalutation() *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) GetTitle() *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequestTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

type UserDataChangeUserDataChangeRequestType string

const (
	UserDataChangeUserDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest UserDataChangeUserDataChangeRequestType = "user_data_change_User - Data Change - Request_User (BYOL) - Data Change Request"
	UserDataChangeUserDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequest  UserDataChangeUserDataChangeRequestType = "user_data_change_User - Data Change - Request_User (TOL) - Data Change Request"
)

type UserDataChangeUserDataChangeRequest struct {
	UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest *UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest
	UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest  *UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest

	Type UserDataChangeUserDataChangeRequestType
}

func CreateUserDataChangeUserDataChangeRequestUserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest(userDataChangeUserDataChangeRequestUserBYOLDataChangeRequest UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest) UserDataChangeUserDataChangeRequest {
	typ := UserDataChangeUserDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest

	return UserDataChangeUserDataChangeRequest{
		UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest: &userDataChangeUserDataChangeRequestUserBYOLDataChangeRequest,
		Type: typ,
	}
}

func CreateUserDataChangeUserDataChangeRequestUserDataChangeUserDataChangeRequestUserTOLDataChangeRequest(userDataChangeUserDataChangeRequestUserTOLDataChangeRequest UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest) UserDataChangeUserDataChangeRequest {
	typ := UserDataChangeUserDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequest

	return UserDataChangeUserDataChangeRequest{
		UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest: &userDataChangeUserDataChangeRequestUserTOLDataChangeRequest,
		Type: typ,
	}
}

func (u *UserDataChangeUserDataChangeRequest) UnmarshalJSON(data []byte) error {

	userDataChangeUserDataChangeRequestUserBYOLDataChangeRequest := new(UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest)
	if err := utils.UnmarshalJSON(data, &userDataChangeUserDataChangeRequestUserBYOLDataChangeRequest, "", true, true); err == nil {
		u.UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest = userDataChangeUserDataChangeRequestUserBYOLDataChangeRequest
		u.Type = UserDataChangeUserDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest
		return nil
	}

	userDataChangeUserDataChangeRequestUserTOLDataChangeRequest := new(UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest)
	if err := utils.UnmarshalJSON(data, &userDataChangeUserDataChangeRequestUserTOLDataChangeRequest, "", true, true); err == nil {
		u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest = userDataChangeUserDataChangeRequestUserTOLDataChangeRequest
		u.Type = UserDataChangeUserDataChangeRequestTypeUserDataChangeUserDataChangeRequestUserTOLDataChangeRequest
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UserDataChangeUserDataChangeRequest) MarshalJSON() ([]byte, error) {
	if u.UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest != nil {
		return utils.MarshalJSON(u.UserDataChangeUserDataChangeRequestUserBYOLDataChangeRequest, "", true)
	}

	if u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest != nil {
		return utils.MarshalJSON(u.UserDataChangeUserDataChangeRequestUserTOLDataChangeRequest, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UserDataChangeRequest struct {
	RequestBody *UserDataChangeUserDataChangeRequest `request:"mediaType=application/json"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (u UserDataChangeRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserDataChangeRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UserDataChangeRequest) GetRequestBody() *UserDataChangeUserDataChangeRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UserDataChangeRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *UserDataChangeRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *UserDataChangeRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *UserDataChangeRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *UserDataChangeRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type UserDataChangeResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UserDataChangeResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UserDataChangeResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *UserDataChangeResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UserDataChangeResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
