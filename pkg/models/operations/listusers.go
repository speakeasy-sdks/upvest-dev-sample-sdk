// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListUsersQueryParamSort - Sort the result by `created_at`.
type ListUsersQueryParamSort string

const (
	ListUsersQueryParamSortCreatedAt ListUsersQueryParamSort = "created_at"
)

func (e ListUsersQueryParamSort) ToPointer() *ListUsersQueryParamSort {
	return &e
}

func (e *ListUsersQueryParamSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = ListUsersQueryParamSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsersQueryParamSort: %v", v)
	}
}

type ListUsersRequest struct {
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *shared.Order `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Sort the result by `created_at`.
	Sort *ListUsersQueryParamSort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListUsersRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUsersRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListUsersRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListUsersRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListUsersRequest) GetOrder() *shared.Order {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListUsersRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListUsersRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListUsersRequest) GetSort() *ListUsersQueryParamSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListUsersRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListUsersRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// Two - All items on list responses must be objects.
type Two struct {
}

// ListUsersAddress - Address. Must not be a P.O. box or c/o address.
type ListUsersAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *ListUsersAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *ListUsersAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *ListUsersAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *ListUsersAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *ListUsersAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *ListUsersAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// ListUsersUsersAddress - Address. Must not be a P.O. box or c/o address.
type ListUsersUsersAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *ListUsersUsersAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *ListUsersUsersAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *ListUsersUsersAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *ListUsersUsersAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *ListUsersUsersAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *ListUsersUsersAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type ListUsersPostalAddressType string

const (
	ListUsersPostalAddressTypeListUsersUsersAddress ListUsersPostalAddressType = "list_users_Users_Address"
)

// ListUsersPostalAddress - User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
type ListUsersPostalAddress struct {
	ListUsersUsersAddress *ListUsersUsersAddress

	Type ListUsersPostalAddressType
}

func CreateListUsersPostalAddressListUsersUsersAddress(listUsersUsersAddress ListUsersUsersAddress) ListUsersPostalAddress {
	typ := ListUsersPostalAddressTypeListUsersUsersAddress

	return ListUsersPostalAddress{
		ListUsersUsersAddress: &listUsersUsersAddress,
		Type:                  typ,
	}
}

func (u *ListUsersPostalAddress) UnmarshalJSON(data []byte) error {

	listUsersUsersAddress := ListUsersUsersAddress{}
	if err := utils.UnmarshalJSON(data, &listUsersUsersAddress, "", true, true); err == nil {
		u.ListUsersUsersAddress = &listUsersUsersAddress
		u.Type = ListUsersPostalAddressTypeListUsersUsersAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ListUsersPostalAddress) MarshalJSON() ([]byte, error) {
	if u.ListUsersUsersAddress != nil {
		return utils.MarshalJSON(u.ListUsersUsersAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ListUsersSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type ListUsersSalutation string

const (
	ListUsersSalutationUnknown                 ListUsersSalutation = ""
	ListUsersSalutationSalutationMale          ListUsersSalutation = "SALUTATION_MALE"
	ListUsersSalutationSalutationFemale        ListUsersSalutation = "SALUTATION_FEMALE"
	ListUsersSalutationSalutationFemaleMarried ListUsersSalutation = "SALUTATION_FEMALE_MARRIED"
	ListUsersSalutationSalutationDiverse       ListUsersSalutation = "SALUTATION_DIVERSE"
)

func (e ListUsersSalutation) ToPointer() *ListUsersSalutation {
	return &e
}

func (e *ListUsersSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = ListUsersSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsersSalutation: %v", v)
	}
}

// ListUsersStatus - Status of the user.
// * ACTIVE -
// * INACTIVE -
// * OFFBOARDING -
// * OFFBOARDED -
type ListUsersStatus string

const (
	ListUsersStatusActive      ListUsersStatus = "ACTIVE"
	ListUsersStatusInactive    ListUsersStatus = "INACTIVE"
	ListUsersStatusOffboarding ListUsersStatus = "OFFBOARDING"
	ListUsersStatusOffboarded  ListUsersStatus = "OFFBOARDED"
)

func (e ListUsersStatus) ToPointer() *ListUsersStatus {
	return &e
}

func (e *ListUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "OFFBOARDING":
		fallthrough
	case "OFFBOARDED":
		*e = ListUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsersStatus: %v", v)
	}
}

// ListUsersTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type ListUsersTitle string

const (
	ListUsersTitleUnknown  ListUsersTitle = ""
	ListUsersTitleDr       ListUsersTitle = "DR"
	ListUsersTitleProf     ListUsersTitle = "PROF"
	ListUsersTitleProfDr   ListUsersTitle = "PROF_DR"
	ListUsersTitleDiplIng  ListUsersTitle = "DIPL_ING"
	ListUsersTitleMagister ListUsersTitle = "MAGISTER"
)

func (e ListUsersTitle) ToPointer() *ListUsersTitle {
	return &e
}

func (e *ListUsersTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = ListUsersTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsersTitle: %v", v)
	}
}

type ListUsersUserBYOL struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   ListUsersAddress `json:"address"`
	BirthCity *string          `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// User unique identifier.
	ID string `json:"id"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *ListUsersPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *ListUsersSalutation `default:"" json:"salutation"`
	// Status of the user.
	// * ACTIVE -
	// * INACTIVE -
	// * OFFBOARDING -
	// * OFFBOARDED -
	Status ListUsersStatus `json:"status"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *ListUsersTitle `default:"" json:"title"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (l ListUsersUserBYOL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUsersUserBYOL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListUsersUserBYOL) GetAddress() ListUsersAddress {
	if o == nil {
		return ListUsersAddress{}
	}
	return o.Address
}

func (o *ListUsersUserBYOL) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *ListUsersUserBYOL) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *ListUsersUserBYOL) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *ListUsersUserBYOL) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *ListUsersUserBYOL) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListUsersUserBYOL) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *ListUsersUserBYOL) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUsersUserBYOL) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *ListUsersUserBYOL) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *ListUsersUserBYOL) GetPostalAddress() *ListUsersPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *ListUsersUserBYOL) GetSalutation() *ListUsersSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *ListUsersUserBYOL) GetStatus() ListUsersStatus {
	if o == nil {
		return ListUsersStatus("")
	}
	return o.Status
}

func (o *ListUsersUserBYOL) GetTitle() *ListUsersTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListUsersUserBYOL) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type ListUsersDataType string

const (
	ListUsersDataTypeArrayOflistUsersUserBYOL ListUsersDataType = "arrayOflist_users_User (BYOL)"
	ListUsersDataTypeArrayOf2                 ListUsersDataType = "arrayOf2"
)

type ListUsersData struct {
	ArrayOflistUsersUserBYOL []ListUsersUserBYOL
	ArrayOf2                 []Two

	Type ListUsersDataType
}

func CreateListUsersDataArrayOflistUsersUserBYOL(arrayOflistUsersUserBYOL []ListUsersUserBYOL) ListUsersData {
	typ := ListUsersDataTypeArrayOflistUsersUserBYOL

	return ListUsersData{
		ArrayOflistUsersUserBYOL: arrayOflistUsersUserBYOL,
		Type:                     typ,
	}
}

func CreateListUsersDataArrayOf2(arrayOf2 []Two) ListUsersData {
	typ := ListUsersDataTypeArrayOf2

	return ListUsersData{
		ArrayOf2: arrayOf2,
		Type:     typ,
	}
}

func (u *ListUsersData) UnmarshalJSON(data []byte) error {

	arrayOflistUsersUserBYOL := []ListUsersUserBYOL{}
	if err := utils.UnmarshalJSON(data, &arrayOflistUsersUserBYOL, "", true, true); err == nil {
		u.ArrayOflistUsersUserBYOL = arrayOflistUsersUserBYOL
		u.Type = ListUsersDataTypeArrayOflistUsersUserBYOL
		return nil
	}

	arrayOf2 := []Two{}
	if err := utils.UnmarshalJSON(data, &arrayOf2, "", true, true); err == nil {
		u.ArrayOf2 = arrayOf2
		u.Type = ListUsersDataTypeArrayOf2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ListUsersData) MarshalJSON() ([]byte, error) {
	if u.ArrayOflistUsersUserBYOL != nil {
		return utils.MarshalJSON(u.ArrayOflistUsersUserBYOL, "", true)
	}

	if u.ArrayOf2 != nil {
		return utils.MarshalJSON(u.ArrayOf2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ListUsersOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListUsersOrder string

const (
	ListUsersOrderAsc  ListUsersOrder = "ASC"
	ListUsersOrderDesc ListUsersOrder = "DESC"
)

func (e ListUsersOrder) ToPointer() *ListUsersOrder {
	return &e
}

func (e *ListUsersOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListUsersOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsersOrder: %v", v)
	}
}

type ListUsersMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListUsersOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListUsersMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListUsersMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListUsersMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListUsersMeta) GetOrder() *ListUsersOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListUsersMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListUsersMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListUsersUsersListResponse - OK
type ListUsersUsersListResponse struct {
	Data ListUsersData `json:"data"`
	Meta ListUsersMeta `json:"meta"`
}

func (o *ListUsersUsersListResponse) GetData() ListUsersData {
	if o == nil {
		return ListUsersData{}
	}
	return o.Data
}

func (o *ListUsersUsersListResponse) GetMeta() ListUsersMeta {
	if o == nil {
		return ListUsersMeta{}
	}
	return o.Meta
}

type ListUsersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	UsersListResponse *ListUsersUsersListResponse
}

func (o *ListUsersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListUsersResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListUsersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListUsersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListUsersResponse) GetUsersListResponse() *ListUsersUsersListResponse {
	if o == nil {
		return nil
	}
	return o.UsersListResponse
}
