// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveReportRequest struct {
	ReportID string `pathParam:"style=simple,explode=false,name=report_id"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (r RetrieveReportRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveReportRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveReportRequest) GetReportID() string {
	if o == nil {
		return ""
	}
	return o.ReportID
}

func (o *RetrieveReportRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveReportRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveReportRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveReportRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// RetrieveReportReportReportReportDataAccount - Account information.
type RetrieveReportReportReportReportDataAccount struct {
	// Account unique identifier.
	ID *string `json:"id,omitempty"`
}

func (o *RetrieveReportReportReportReportDataAccount) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RetrieveReportReportReportReportData - Contents of the report.
type RetrieveReportReportReportReportData struct {
	// Account information.
	Account *RetrieveReportReportReportReportDataAccount `json:"account,omitempty"`
}

func (o *RetrieveReportReportReportReportData) GetAccount() *RetrieveReportReportReportReportDataAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

// RetrieveReportReportReportReportType - Report type
// * BUY_ORDER - Buy order
// * SELL_ORDER - Sell order
// * INCOME_DISTRIBUTION - Income distribution report
// * GENERAL_MEETING_NOTIFICATION - General meeting notification
// * INCOME_REINVESTMENT - Reinvestment billing report (accumulating funds)
// * FUND_COMMUNICATION - Generic fund communication
// * TAX_REFUND - Tax refund document (after tax optimization)
// * TAX_EXEMPTION_CREATION - Creation of exemption order ("Freistellungsauftrag")
// * CANCELLED_ORDER - Cancelled buy or sell order (not yet executed, user cancels or trading venue cancelled)
// * REVOKED_ORDER - Revoked buy or sell order ("Storno")
// * ACCOUNT_OPENING - Securities account opening
// * ACCOUNT_CLOSING - Securities account closure
// * DIRECT_DEBIT_MANDATE - Creation of SEPA direct debit mandate
// * ANNUAL_TAX_STATEMENT - Annual tax reporting
// * ANNUAL_ACCOUNT_STATEMENT - Annual account statement
// * ANNUAL_INCOME_STATEMENT - Annual tax income statement ("Erträgnisaufstellung")
// * GENERIC_COMMUNICATION - Generic communication
// * BANK_ACCOUNT_CONNECTED - Connect reference bank account
// * AD_HOC_ACCOUNT_STATEMENT - Ad hoc account statement
// * EX_POST_COST - Ex-post cost report
type RetrieveReportReportReportReportType string

const (
	RetrieveReportReportReportReportTypeBuyOrder                   RetrieveReportReportReportReportType = "BUY_ORDER"
	RetrieveReportReportReportReportTypeSellOrder                  RetrieveReportReportReportReportType = "SELL_ORDER"
	RetrieveReportReportReportReportTypeIncomeDistribution         RetrieveReportReportReportReportType = "INCOME_DISTRIBUTION"
	RetrieveReportReportReportReportTypeGeneralMeetingNotification RetrieveReportReportReportReportType = "GENERAL_MEETING_NOTIFICATION"
	RetrieveReportReportReportReportTypeIncomeReinvestment         RetrieveReportReportReportReportType = "INCOME_REINVESTMENT"
	RetrieveReportReportReportReportTypeFundCommunication          RetrieveReportReportReportReportType = "FUND_COMMUNICATION"
	RetrieveReportReportReportReportTypeTaxRefund                  RetrieveReportReportReportReportType = "TAX_REFUND"
	RetrieveReportReportReportReportTypeTaxExemptionCreation       RetrieveReportReportReportReportType = "TAX_EXEMPTION_CREATION"
	RetrieveReportReportReportReportTypeCancelledOrder             RetrieveReportReportReportReportType = "CANCELLED_ORDER"
	RetrieveReportReportReportReportTypeRevokedOrder               RetrieveReportReportReportReportType = "REVOKED_ORDER"
	RetrieveReportReportReportReportTypeAccountOpening             RetrieveReportReportReportReportType = "ACCOUNT_OPENING"
	RetrieveReportReportReportReportTypeAccountClosing             RetrieveReportReportReportReportType = "ACCOUNT_CLOSING"
	RetrieveReportReportReportReportTypeDirectDebitMandate         RetrieveReportReportReportReportType = "DIRECT_DEBIT_MANDATE"
	RetrieveReportReportReportReportTypeAnnualTaxStatement         RetrieveReportReportReportReportType = "ANNUAL_TAX_STATEMENT"
	RetrieveReportReportReportReportTypeAnnualAccountStatement     RetrieveReportReportReportReportType = "ANNUAL_ACCOUNT_STATEMENT"
	RetrieveReportReportReportReportTypeAnnualIncomeStatement      RetrieveReportReportReportReportType = "ANNUAL_INCOME_STATEMENT"
	RetrieveReportReportReportReportTypeGenericCommunication       RetrieveReportReportReportReportType = "GENERIC_COMMUNICATION"
	RetrieveReportReportReportReportTypeBankAccountConnected       RetrieveReportReportReportReportType = "BANK_ACCOUNT_CONNECTED"
	RetrieveReportReportReportReportTypeAdHocAccountStatement      RetrieveReportReportReportReportType = "AD_HOC_ACCOUNT_STATEMENT"
	RetrieveReportReportReportReportTypeExPostCost                 RetrieveReportReportReportReportType = "EX_POST_COST"
)

func (e RetrieveReportReportReportReportType) ToPointer() *RetrieveReportReportReportReportType {
	return &e
}

func (e *RetrieveReportReportReportReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY_ORDER":
		fallthrough
	case "SELL_ORDER":
		fallthrough
	case "INCOME_DISTRIBUTION":
		fallthrough
	case "GENERAL_MEETING_NOTIFICATION":
		fallthrough
	case "INCOME_REINVESTMENT":
		fallthrough
	case "FUND_COMMUNICATION":
		fallthrough
	case "TAX_REFUND":
		fallthrough
	case "TAX_EXEMPTION_CREATION":
		fallthrough
	case "CANCELLED_ORDER":
		fallthrough
	case "REVOKED_ORDER":
		fallthrough
	case "ACCOUNT_OPENING":
		fallthrough
	case "ACCOUNT_CLOSING":
		fallthrough
	case "DIRECT_DEBIT_MANDATE":
		fallthrough
	case "ANNUAL_TAX_STATEMENT":
		fallthrough
	case "ANNUAL_ACCOUNT_STATEMENT":
		fallthrough
	case "ANNUAL_INCOME_STATEMENT":
		fallthrough
	case "GENERIC_COMMUNICATION":
		fallthrough
	case "BANK_ACCOUNT_CONNECTED":
		fallthrough
	case "AD_HOC_ACCOUNT_STATEMENT":
		fallthrough
	case "EX_POST_COST":
		*e = RetrieveReportReportReportReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveReportReportReportReportType: %v", v)
	}
}

type RetrieveReportReportReport struct {
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Contents of the report.
	Data *RetrieveReportReportReportReportData `json:"data,omitempty"`
	// Report unique identifier.
	ID                  string  `json:"id"`
	SubstitutedReportID *string `json:"substituted_report_id"`
	// Report type
	// * BUY_ORDER - Buy order
	// * SELL_ORDER - Sell order
	// * INCOME_DISTRIBUTION - Income distribution report
	// * GENERAL_MEETING_NOTIFICATION - General meeting notification
	// * INCOME_REINVESTMENT - Reinvestment billing report (accumulating funds)
	// * FUND_COMMUNICATION - Generic fund communication
	// * TAX_REFUND - Tax refund document (after tax optimization)
	// * TAX_EXEMPTION_CREATION - Creation of exemption order ("Freistellungsauftrag")
	// * CANCELLED_ORDER - Cancelled buy or sell order (not yet executed, user cancels or trading venue cancelled)
	// * REVOKED_ORDER - Revoked buy or sell order ("Storno")
	// * ACCOUNT_OPENING - Securities account opening
	// * ACCOUNT_CLOSING - Securities account closure
	// * DIRECT_DEBIT_MANDATE - Creation of SEPA direct debit mandate
	// * ANNUAL_TAX_STATEMENT - Annual tax reporting
	// * ANNUAL_ACCOUNT_STATEMENT - Annual account statement
	// * ANNUAL_INCOME_STATEMENT - Annual tax income statement ("Erträgnisaufstellung")
	// * GENERIC_COMMUNICATION - Generic communication
	// * BANK_ACCOUNT_CONNECTED - Connect reference bank account
	// * AD_HOC_ACCOUNT_STATEMENT - Ad hoc account statement
	// * EX_POST_COST - Ex-post cost report
	Type RetrieveReportReportReportReportType `json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (r RetrieveReportReportReport) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveReportReportReport) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveReportReportReport) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveReportReportReport) GetData() *RetrieveReportReportReportReportData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *RetrieveReportReportReport) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveReportReportReport) GetSubstitutedReportID() *string {
	if o == nil {
		return nil
	}
	return o.SubstitutedReportID
}

func (o *RetrieveReportReportReport) GetType() RetrieveReportReportReportReportType {
	if o == nil {
		return RetrieveReportReportReportReportType("")
	}
	return o.Type
}

func (o *RetrieveReportReportReport) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type RetrieveReportReportType string

const (
	RetrieveReportReportTypeRetrieveReportReportReport RetrieveReportReportType = "retrieve_report_Report_Report"
)

type RetrieveReportReport struct {
	RetrieveReportReportReport *RetrieveReportReportReport

	Type RetrieveReportReportType
}

func CreateRetrieveReportReportRetrieveReportReportReport(retrieveReportReportReport RetrieveReportReportReport) RetrieveReportReport {
	typ := RetrieveReportReportTypeRetrieveReportReportReport

	return RetrieveReportReport{
		RetrieveReportReportReport: &retrieveReportReportReport,
		Type:                       typ,
	}
}

func (u *RetrieveReportReport) UnmarshalJSON(data []byte) error {

	retrieveReportReportReport := new(RetrieveReportReportReport)
	if err := utils.UnmarshalJSON(data, &retrieveReportReportReport, "", true, true); err == nil {
		u.RetrieveReportReportReport = retrieveReportReportReport
		u.Type = RetrieveReportReportTypeRetrieveReportReportReport
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RetrieveReportReport) MarshalJSON() ([]byte, error) {
	if u.RetrieveReportReportReport != nil {
		return utils.MarshalJSON(u.RetrieveReportReportReport, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RetrieveReportResponse struct {
	Body []byte
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Report
	Report *RetrieveReportReport
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *RetrieveReportResponse) GetBody() []byte {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *RetrieveReportResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveReportResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *RetrieveReportResponse) GetReport() *RetrieveReportReport {
	if o == nil {
		return nil
	}
	return o.Report
}

func (o *RetrieveReportResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveReportResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
