// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// CreateUserUsersRequestAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUsersRequestAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUsersRequestAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUsersRequestAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUsersRequestAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUsersRequestAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUsersRequestAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUsersRequestAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type DataPrivacyAndSharingAgreement struct {
	// Timestamp at which the user consented to the data sharing agreement. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (d DataPrivacyAndSharingAgreement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DataPrivacyAndSharingAgreement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DataPrivacyAndSharingAgreement) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *DataPrivacyAndSharingAgreement) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

type Fatca struct {
	// Timestamp at which the user confirmed their FATCA status. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// The userâ€™s FATCA status is true if the user is subject to paying taxes in the US, otherwise it can be set to false.
	Status bool `json:"status"`
}

func (f Fatca) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *Fatca) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Fatca) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *Fatca) GetStatus() bool {
	if o == nil {
		return false
	}
	return o.Status
}

// CreateUserUsersAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUsersAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUsersAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUsersAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUsersAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUsersAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUsersAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUsersAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserPostalAddressType string

const (
	CreateUserPostalAddressTypeCreateUserUsersAddress CreateUserPostalAddressType = "create_user_Users_Address"
)

// CreateUserPostalAddress - User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
type CreateUserPostalAddress struct {
	CreateUserUsersAddress *CreateUserUsersAddress

	Type CreateUserPostalAddressType
}

func CreateCreateUserPostalAddressCreateUserUsersAddress(createUserUsersAddress CreateUserUsersAddress) CreateUserPostalAddress {
	typ := CreateUserPostalAddressTypeCreateUserUsersAddress

	return CreateUserPostalAddress{
		CreateUserUsersAddress: &createUserUsersAddress,
		Type:                   typ,
	}
}

func (u *CreateUserPostalAddress) UnmarshalJSON(data []byte) error {

	createUserUsersAddress := CreateUserUsersAddress{}
	if err := utils.UnmarshalJSON(data, &createUserUsersAddress, "", true, true); err == nil {
		u.CreateUserUsersAddress = &createUserUsersAddress
		u.Type = CreateUserPostalAddressTypeCreateUserUsersAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserPostalAddress) MarshalJSON() ([]byte, error) {
	if u.CreateUserUsersAddress != nil {
		return utils.MarshalJSON(u.CreateUserUsersAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateUserSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type CreateUserSalutation string

const (
	CreateUserSalutationUnknown                 CreateUserSalutation = ""
	CreateUserSalutationSalutationMale          CreateUserSalutation = "SALUTATION_MALE"
	CreateUserSalutationSalutationFemale        CreateUserSalutation = "SALUTATION_FEMALE"
	CreateUserSalutationSalutationFemaleMarried CreateUserSalutation = "SALUTATION_FEMALE_MARRIED"
	CreateUserSalutationSalutationDiverse       CreateUserSalutation = "SALUTATION_DIVERSE"
)

func (e CreateUserSalutation) ToPointer() *CreateUserSalutation {
	return &e
}

func (e *CreateUserSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = CreateUserSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserSalutation: %v", v)
	}
}

type TermsAndConditions struct {
	// Timestamp at which the user consented to the terms & conditions. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (t TermsAndConditions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TermsAndConditions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TermsAndConditions) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *TermsAndConditions) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

// CreateUserTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type CreateUserTitle string

const (
	CreateUserTitleUnknown  CreateUserTitle = ""
	CreateUserTitleDr       CreateUserTitle = "DR"
	CreateUserTitleProf     CreateUserTitle = "PROF"
	CreateUserTitleProfDr   CreateUserTitle = "PROF_DR"
	CreateUserTitleDiplIng  CreateUserTitle = "DIPL_ING"
	CreateUserTitleMagister CreateUserTitle = "MAGISTER"
)

func (e CreateUserTitle) ToPointer() *CreateUserTitle {
	return &e
}

func (e *CreateUserTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = CreateUserTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserTitle: %v", v)
	}
}

type UserTOLCreateRequest struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   CreateUserUsersRequestAddress `json:"address"`
	BirthCity string                        `json:"birth_city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry string `json:"birth_country"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName                      *string                        `json:"birth_name,omitempty"`
	DataPrivacyAndSharingAgreement DataPrivacyAndSharingAgreement `json:"data_privacy_and_sharing_agreement"`
	// Email of the user. Must be a valid email address.
	Email string `json:"email"`
	Fatca Fatca  `json:"fatca"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// Phone number of the user. [Phone number E.164 format](https://en.wikipedia.org/wiki/E.164).
	PhoneNumber *string `json:"phone_number,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *CreateUserPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation         *CreateUserSalutation `default:"" json:"salutation"`
	TermsAndConditions TermsAndConditions    `json:"terms_and_conditions"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *CreateUserTitle `default:"" json:"title"`
}

func (u UserTOLCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserTOLCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserTOLCreateRequest) GetAddress() CreateUserUsersRequestAddress {
	if o == nil {
		return CreateUserUsersRequestAddress{}
	}
	return o.Address
}

func (o *UserTOLCreateRequest) GetBirthCity() string {
	if o == nil {
		return ""
	}
	return o.BirthCity
}

func (o *UserTOLCreateRequest) GetBirthCountry() string {
	if o == nil {
		return ""
	}
	return o.BirthCountry
}

func (o *UserTOLCreateRequest) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *UserTOLCreateRequest) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *UserTOLCreateRequest) GetDataPrivacyAndSharingAgreement() DataPrivacyAndSharingAgreement {
	if o == nil {
		return DataPrivacyAndSharingAgreement{}
	}
	return o.DataPrivacyAndSharingAgreement
}

func (o *UserTOLCreateRequest) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UserTOLCreateRequest) GetFatca() Fatca {
	if o == nil {
		return Fatca{}
	}
	return o.Fatca
}

func (o *UserTOLCreateRequest) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *UserTOLCreateRequest) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *UserTOLCreateRequest) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *UserTOLCreateRequest) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *UserTOLCreateRequest) GetPostalAddress() *CreateUserPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *UserTOLCreateRequest) GetSalutation() *CreateUserSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *UserTOLCreateRequest) GetTermsAndConditions() TermsAndConditions {
	if o == nil {
		return TermsAndConditions{}
	}
	return o.TermsAndConditions
}

func (o *UserTOLCreateRequest) GetTitle() *CreateUserTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

// CreateUserAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// Address - Address. Must not be a P.O. box or c/o address.
type Address struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *Address) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *Address) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *Address) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *Address) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *Address) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *Address) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type PostalAddressType string

const (
	PostalAddressTypeAddress PostalAddressType = "Address"
)

// PostalAddress - User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
type PostalAddress struct {
	Address *Address

	Type PostalAddressType
}

func CreatePostalAddressAddress(address Address) PostalAddress {
	typ := PostalAddressTypeAddress

	return PostalAddress{
		Address: &address,
		Type:    typ,
	}
}

func (u *PostalAddress) UnmarshalJSON(data []byte) error {

	address := Address{}
	if err := utils.UnmarshalJSON(data, &address, "", true, true); err == nil {
		u.Address = &address
		u.Type = PostalAddressTypeAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostalAddress) MarshalJSON() ([]byte, error) {
	if u.Address != nil {
		return utils.MarshalJSON(u.Address, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type Salutation string

const (
	SalutationUnknown                 Salutation = ""
	SalutationSalutationMale          Salutation = "SALUTATION_MALE"
	SalutationSalutationFemale        Salutation = "SALUTATION_FEMALE"
	SalutationSalutationFemaleMarried Salutation = "SALUTATION_FEMALE_MARRIED"
	SalutationSalutationDiverse       Salutation = "SALUTATION_DIVERSE"
)

func (e Salutation) ToPointer() *Salutation {
	return &e
}

func (e *Salutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = Salutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Salutation: %v", v)
	}
}

// Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type Title string

const (
	TitleUnknown  Title = ""
	TitleDr       Title = "DR"
	TitleProf     Title = "PROF"
	TitleProfDr   Title = "PROF_DR"
	TitleDiplIng  Title = "DIPL_ING"
	TitleMagister Title = "MAGISTER"
)

func (e Title) ToPointer() *Title {
	return &e
}

func (e *Title) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = Title(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Title: %v", v)
	}
}

type UserBYOLCreateRequest struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   CreateUserAddress `json:"address"`
	BirthCity *string           `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *PostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *Salutation `default:"" json:"salutation"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *Title `default:"" json:"title"`
}

func (u UserBYOLCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserBYOLCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserBYOLCreateRequest) GetAddress() CreateUserAddress {
	if o == nil {
		return CreateUserAddress{}
	}
	return o.Address
}

func (o *UserBYOLCreateRequest) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *UserBYOLCreateRequest) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *UserBYOLCreateRequest) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *UserBYOLCreateRequest) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *UserBYOLCreateRequest) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *UserBYOLCreateRequest) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *UserBYOLCreateRequest) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *UserBYOLCreateRequest) GetPostalAddress() *PostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *UserBYOLCreateRequest) GetSalutation() *Salutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *UserBYOLCreateRequest) GetTitle() *Title {
	if o == nil {
		return nil
	}
	return o.Title
}

type CreateUserUserCreateRequestType string

const (
	CreateUserUserCreateRequestTypeUserBYOLCreateRequest CreateUserUserCreateRequestType = "User (BYOL) - Create - Request"
	CreateUserUserCreateRequestTypeUserTOLCreateRequest  CreateUserUserCreateRequestType = "User (TOL) - Create - Request"
)

type CreateUserUserCreateRequest struct {
	UserBYOLCreateRequest *UserBYOLCreateRequest
	UserTOLCreateRequest  *UserTOLCreateRequest

	Type CreateUserUserCreateRequestType
}

func CreateCreateUserUserCreateRequestUserBYOLCreateRequest(userBYOLCreateRequest UserBYOLCreateRequest) CreateUserUserCreateRequest {
	typ := CreateUserUserCreateRequestTypeUserBYOLCreateRequest

	return CreateUserUserCreateRequest{
		UserBYOLCreateRequest: &userBYOLCreateRequest,
		Type:                  typ,
	}
}

func CreateCreateUserUserCreateRequestUserTOLCreateRequest(userTOLCreateRequest UserTOLCreateRequest) CreateUserUserCreateRequest {
	typ := CreateUserUserCreateRequestTypeUserTOLCreateRequest

	return CreateUserUserCreateRequest{
		UserTOLCreateRequest: &userTOLCreateRequest,
		Type:                 typ,
	}
}

func (u *CreateUserUserCreateRequest) UnmarshalJSON(data []byte) error {

	userBYOLCreateRequest := UserBYOLCreateRequest{}
	if err := utils.UnmarshalJSON(data, &userBYOLCreateRequest, "", true, true); err == nil {
		u.UserBYOLCreateRequest = &userBYOLCreateRequest
		u.Type = CreateUserUserCreateRequestTypeUserBYOLCreateRequest
		return nil
	}

	userTOLCreateRequest := UserTOLCreateRequest{}
	if err := utils.UnmarshalJSON(data, &userTOLCreateRequest, "", true, true); err == nil {
		u.UserTOLCreateRequest = &userTOLCreateRequest
		u.Type = CreateUserUserCreateRequestTypeUserTOLCreateRequest
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUserCreateRequest) MarshalJSON() ([]byte, error) {
	if u.UserBYOLCreateRequest != nil {
		return utils.MarshalJSON(u.UserBYOLCreateRequest, "", true)
	}

	if u.UserTOLCreateRequest != nil {
		return utils.MarshalJSON(u.UserTOLCreateRequest, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateUserRequest struct {
	RequestBody *CreateUserUserCreateRequest `request:"mediaType=application/json"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (c CreateUserRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserRequest) GetRequestBody() *CreateUserUserCreateRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateUserRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *CreateUserRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *CreateUserRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *CreateUserRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *CreateUserRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// CreateUserUsersResponse200Address - Address. Must not be a P.O. box or c/o address.
type CreateUserUsersResponse200Address struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUsersResponse200Address) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUsersResponse200Address) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUsersResponse200Address) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUsersResponse200Address) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUsersResponse200Address) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUsersResponse200Address) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserDataPrivacyAndSharingAgreement struct {
	// Timestamp at which the user consented to the data sharing agreement. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (c CreateUserDataPrivacyAndSharingAgreement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserDataPrivacyAndSharingAgreement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserDataPrivacyAndSharingAgreement) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *CreateUserDataPrivacyAndSharingAgreement) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

type CreateUserFatca struct {
	// Timestamp at which the user confirmed their FATCA status. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// The userâ€™s FATCA status is true if the user is subject to paying taxes in the US, otherwise it can be set to false.
	Status bool `json:"status"`
}

func (c CreateUserFatca) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserFatca) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserFatca) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *CreateUserFatca) GetStatus() bool {
	if o == nil {
		return false
	}
	return o.Status
}

// CreateUserUsersResponse200ApplicationJSONAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUsersResponse200ApplicationJSONAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUsersResponse200ApplicationJSONAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUsersResponse200ApplicationJSONAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUsersResponse200ApplicationJSONAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUsersResponse200ApplicationJSONAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUsersResponse200ApplicationJSONAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUsersResponse200ApplicationJSONAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserUsersResponsePostalAddressType string

const (
	CreateUserUsersResponsePostalAddressTypeCreateUserUsersResponse200ApplicationJSONAddress CreateUserUsersResponsePostalAddressType = "create_user_Users_response_200_ApplicationJSON_Address"
)

// CreateUserUsersResponsePostalAddress - User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
type CreateUserUsersResponsePostalAddress struct {
	CreateUserUsersResponse200ApplicationJSONAddress *CreateUserUsersResponse200ApplicationJSONAddress

	Type CreateUserUsersResponsePostalAddressType
}

func CreateCreateUserUsersResponsePostalAddressCreateUserUsersResponse200ApplicationJSONAddress(createUserUsersResponse200ApplicationJSONAddress CreateUserUsersResponse200ApplicationJSONAddress) CreateUserUsersResponsePostalAddress {
	typ := CreateUserUsersResponsePostalAddressTypeCreateUserUsersResponse200ApplicationJSONAddress

	return CreateUserUsersResponsePostalAddress{
		CreateUserUsersResponse200ApplicationJSONAddress: &createUserUsersResponse200ApplicationJSONAddress,
		Type: typ,
	}
}

func (u *CreateUserUsersResponsePostalAddress) UnmarshalJSON(data []byte) error {

	createUserUsersResponse200ApplicationJSONAddress := CreateUserUsersResponse200ApplicationJSONAddress{}
	if err := utils.UnmarshalJSON(data, &createUserUsersResponse200ApplicationJSONAddress, "", true, true); err == nil {
		u.CreateUserUsersResponse200ApplicationJSONAddress = &createUserUsersResponse200ApplicationJSONAddress
		u.Type = CreateUserUsersResponsePostalAddressTypeCreateUserUsersResponse200ApplicationJSONAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUsersResponsePostalAddress) MarshalJSON() ([]byte, error) {
	if u.CreateUserUsersResponse200ApplicationJSONAddress != nil {
		return utils.MarshalJSON(u.CreateUserUsersResponse200ApplicationJSONAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateUserUsersResponseSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type CreateUserUsersResponseSalutation string

const (
	CreateUserUsersResponseSalutationUnknown                 CreateUserUsersResponseSalutation = ""
	CreateUserUsersResponseSalutationSalutationMale          CreateUserUsersResponseSalutation = "SALUTATION_MALE"
	CreateUserUsersResponseSalutationSalutationFemale        CreateUserUsersResponseSalutation = "SALUTATION_FEMALE"
	CreateUserUsersResponseSalutationSalutationFemaleMarried CreateUserUsersResponseSalutation = "SALUTATION_FEMALE_MARRIED"
	CreateUserUsersResponseSalutationSalutationDiverse       CreateUserUsersResponseSalutation = "SALUTATION_DIVERSE"
)

func (e CreateUserUsersResponseSalutation) ToPointer() *CreateUserUsersResponseSalutation {
	return &e
}

func (e *CreateUserUsersResponseSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = CreateUserUsersResponseSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUsersResponseSalutation: %v", v)
	}
}

// CreateUserUsersStatus - Status of the user.
// * ACTIVE -
// * INACTIVE -
// * OFFBOARDING -
// * OFFBOARDED -
type CreateUserUsersStatus string

const (
	CreateUserUsersStatusActive      CreateUserUsersStatus = "ACTIVE"
	CreateUserUsersStatusInactive    CreateUserUsersStatus = "INACTIVE"
	CreateUserUsersStatusOffboarding CreateUserUsersStatus = "OFFBOARDING"
	CreateUserUsersStatusOffboarded  CreateUserUsersStatus = "OFFBOARDED"
)

func (e CreateUserUsersStatus) ToPointer() *CreateUserUsersStatus {
	return &e
}

func (e *CreateUserUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "OFFBOARDING":
		fallthrough
	case "OFFBOARDED":
		*e = CreateUserUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUsersStatus: %v", v)
	}
}

type CreateUserTermsAndConditions struct {
	// Timestamp at which the user consented to the terms & conditions. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (c CreateUserTermsAndConditions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserTermsAndConditions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserTermsAndConditions) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *CreateUserTermsAndConditions) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

// CreateUserUsersResponseTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type CreateUserUsersResponseTitle string

const (
	CreateUserUsersResponseTitleUnknown  CreateUserUsersResponseTitle = ""
	CreateUserUsersResponseTitleDr       CreateUserUsersResponseTitle = "DR"
	CreateUserUsersResponseTitleProf     CreateUserUsersResponseTitle = "PROF"
	CreateUserUsersResponseTitleProfDr   CreateUserUsersResponseTitle = "PROF_DR"
	CreateUserUsersResponseTitleDiplIng  CreateUserUsersResponseTitle = "DIPL_ING"
	CreateUserUsersResponseTitleMagister CreateUserUsersResponseTitle = "MAGISTER"
)

func (e CreateUserUsersResponseTitle) ToPointer() *CreateUserUsersResponseTitle {
	return &e
}

func (e *CreateUserUsersResponseTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = CreateUserUsersResponseTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUsersResponseTitle: %v", v)
	}
}

type UserTOL struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   CreateUserUsersResponse200Address `json:"address"`
	BirthCity *string                           `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt                      time.Time                                 `json:"created_at"`
	DataPrivacyAndSharingAgreement *CreateUserDataPrivacyAndSharingAgreement `json:"data_privacy_and_sharing_agreement,omitempty"`
	// Email of the user. Must be a valid email address.
	Email *string          `json:"email,omitempty"`
	Fatca *CreateUserFatca `json:"fatca,omitempty"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// User unique identifier.
	ID string `json:"id"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// Phone number of the user. [Phone number E.164 format](https://en.wikipedia.org/wiki/E.164).
	PhoneNumber *string `json:"phone_number,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *CreateUserUsersResponsePostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *CreateUserUsersResponseSalutation `default:"" json:"salutation"`
	// Status of the user.
	// * ACTIVE -
	// * INACTIVE -
	// * OFFBOARDING -
	// * OFFBOARDED -
	Status             CreateUserUsersStatus         `json:"status"`
	TermsAndConditions *CreateUserTermsAndConditions `json:"terms_and_conditions,omitempty"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *CreateUserUsersResponseTitle `default:"" json:"title"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (u UserTOL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserTOL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserTOL) GetAddress() CreateUserUsersResponse200Address {
	if o == nil {
		return CreateUserUsersResponse200Address{}
	}
	return o.Address
}

func (o *UserTOL) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *UserTOL) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *UserTOL) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *UserTOL) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *UserTOL) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UserTOL) GetDataPrivacyAndSharingAgreement() *CreateUserDataPrivacyAndSharingAgreement {
	if o == nil {
		return nil
	}
	return o.DataPrivacyAndSharingAgreement
}

func (o *UserTOL) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UserTOL) GetFatca() *CreateUserFatca {
	if o == nil {
		return nil
	}
	return o.Fatca
}

func (o *UserTOL) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *UserTOL) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserTOL) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *UserTOL) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *UserTOL) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *UserTOL) GetPostalAddress() *CreateUserUsersResponsePostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *UserTOL) GetSalutation() *CreateUserUsersResponseSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *UserTOL) GetStatus() CreateUserUsersStatus {
	if o == nil {
		return CreateUserUsersStatus("")
	}
	return o.Status
}

func (o *UserTOL) GetTermsAndConditions() *CreateUserTermsAndConditions {
	if o == nil {
		return nil
	}
	return o.TermsAndConditions
}

func (o *UserTOL) GetTitle() *CreateUserUsersResponseTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UserTOL) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// CreateUserUsersResponseAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUsersResponseAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUsersResponseAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUsersResponseAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUsersResponseAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUsersResponseAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUsersResponseAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUsersResponseAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// CreateUserUsersResponse200ApplicationJSONResponseBodyAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUsersResponse200ApplicationJSONResponseBodyAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUsersResponse200ApplicationJSONResponseBodyAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUsersResponse200ApplicationJSONResponseBodyAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUsersResponse200ApplicationJSONResponseBodyAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUsersResponse200ApplicationJSONResponseBodyAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUsersResponse200ApplicationJSONResponseBodyAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUsersResponse200ApplicationJSONResponseBodyAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserUsersPostalAddressType string

const (
	CreateUserUsersPostalAddressTypeCreateUserUsersResponse200ApplicationJSONResponseBodyAddress CreateUserUsersPostalAddressType = "create_user_Users_response_200_ApplicationJSON_responseBody_Address"
)

// CreateUserUsersPostalAddress - User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
type CreateUserUsersPostalAddress struct {
	CreateUserUsersResponse200ApplicationJSONResponseBodyAddress *CreateUserUsersResponse200ApplicationJSONResponseBodyAddress

	Type CreateUserUsersPostalAddressType
}

func CreateCreateUserUsersPostalAddressCreateUserUsersResponse200ApplicationJSONResponseBodyAddress(createUserUsersResponse200ApplicationJSONResponseBodyAddress CreateUserUsersResponse200ApplicationJSONResponseBodyAddress) CreateUserUsersPostalAddress {
	typ := CreateUserUsersPostalAddressTypeCreateUserUsersResponse200ApplicationJSONResponseBodyAddress

	return CreateUserUsersPostalAddress{
		CreateUserUsersResponse200ApplicationJSONResponseBodyAddress: &createUserUsersResponse200ApplicationJSONResponseBodyAddress,
		Type: typ,
	}
}

func (u *CreateUserUsersPostalAddress) UnmarshalJSON(data []byte) error {

	createUserUsersResponse200ApplicationJSONResponseBodyAddress := CreateUserUsersResponse200ApplicationJSONResponseBodyAddress{}
	if err := utils.UnmarshalJSON(data, &createUserUsersResponse200ApplicationJSONResponseBodyAddress, "", true, true); err == nil {
		u.CreateUserUsersResponse200ApplicationJSONResponseBodyAddress = &createUserUsersResponse200ApplicationJSONResponseBodyAddress
		u.Type = CreateUserUsersPostalAddressTypeCreateUserUsersResponse200ApplicationJSONResponseBodyAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUsersPostalAddress) MarshalJSON() ([]byte, error) {
	if u.CreateUserUsersResponse200ApplicationJSONResponseBodyAddress != nil {
		return utils.MarshalJSON(u.CreateUserUsersResponse200ApplicationJSONResponseBodyAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateUserUsersSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type CreateUserUsersSalutation string

const (
	CreateUserUsersSalutationUnknown                 CreateUserUsersSalutation = ""
	CreateUserUsersSalutationSalutationMale          CreateUserUsersSalutation = "SALUTATION_MALE"
	CreateUserUsersSalutationSalutationFemale        CreateUserUsersSalutation = "SALUTATION_FEMALE"
	CreateUserUsersSalutationSalutationFemaleMarried CreateUserUsersSalutation = "SALUTATION_FEMALE_MARRIED"
	CreateUserUsersSalutationSalutationDiverse       CreateUserUsersSalutation = "SALUTATION_DIVERSE"
)

func (e CreateUserUsersSalutation) ToPointer() *CreateUserUsersSalutation {
	return &e
}

func (e *CreateUserUsersSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = CreateUserUsersSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUsersSalutation: %v", v)
	}
}

// CreateUserStatus - Status of the user.
// * ACTIVE -
// * INACTIVE -
// * OFFBOARDING -
// * OFFBOARDED -
type CreateUserStatus string

const (
	CreateUserStatusActive      CreateUserStatus = "ACTIVE"
	CreateUserStatusInactive    CreateUserStatus = "INACTIVE"
	CreateUserStatusOffboarding CreateUserStatus = "OFFBOARDING"
	CreateUserStatusOffboarded  CreateUserStatus = "OFFBOARDED"
)

func (e CreateUserStatus) ToPointer() *CreateUserStatus {
	return &e
}

func (e *CreateUserStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "OFFBOARDING":
		fallthrough
	case "OFFBOARDED":
		*e = CreateUserStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserStatus: %v", v)
	}
}

// CreateUserUsersTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type CreateUserUsersTitle string

const (
	CreateUserUsersTitleUnknown  CreateUserUsersTitle = ""
	CreateUserUsersTitleDr       CreateUserUsersTitle = "DR"
	CreateUserUsersTitleProf     CreateUserUsersTitle = "PROF"
	CreateUserUsersTitleProfDr   CreateUserUsersTitle = "PROF_DR"
	CreateUserUsersTitleDiplIng  CreateUserUsersTitle = "DIPL_ING"
	CreateUserUsersTitleMagister CreateUserUsersTitle = "MAGISTER"
)

func (e CreateUserUsersTitle) ToPointer() *CreateUserUsersTitle {
	return &e
}

func (e *CreateUserUsersTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = CreateUserUsersTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUsersTitle: %v", v)
	}
}

type UserBYOL struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   CreateUserUsersResponseAddress `json:"address"`
	BirthCity *string                        `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// User unique identifier.
	ID string `json:"id"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *CreateUserUsersPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *CreateUserUsersSalutation `default:"" json:"salutation"`
	// Status of the user.
	// * ACTIVE -
	// * INACTIVE -
	// * OFFBOARDING -
	// * OFFBOARDED -
	Status CreateUserStatus `json:"status"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *CreateUserUsersTitle `default:"" json:"title"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (u UserBYOL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserBYOL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UserBYOL) GetAddress() CreateUserUsersResponseAddress {
	if o == nil {
		return CreateUserUsersResponseAddress{}
	}
	return o.Address
}

func (o *UserBYOL) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *UserBYOL) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *UserBYOL) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *UserBYOL) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *UserBYOL) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UserBYOL) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *UserBYOL) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserBYOL) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *UserBYOL) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *UserBYOL) GetPostalAddress() *CreateUserUsersPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *UserBYOL) GetSalutation() *CreateUserUsersSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *UserBYOL) GetStatus() CreateUserStatus {
	if o == nil {
		return CreateUserStatus("")
	}
	return o.Status
}

func (o *UserBYOL) GetTitle() *CreateUserUsersTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UserBYOL) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type CreateUserUsersUserCreateRequestType string

const (
	CreateUserUsersUserCreateRequestTypeUserBYOL CreateUserUsersUserCreateRequestType = "User (BYOL)"
	CreateUserUsersUserCreateRequestTypeUserTOL  CreateUserUsersUserCreateRequestType = "User (TOL)"
)

// CreateUserUsersUserCreateRequest - User created.
type CreateUserUsersUserCreateRequest struct {
	UserBYOL *UserBYOL
	UserTOL  *UserTOL

	Type CreateUserUsersUserCreateRequestType
}

func CreateCreateUserUsersUserCreateRequestUserBYOL(userBYOL UserBYOL) CreateUserUsersUserCreateRequest {
	typ := CreateUserUsersUserCreateRequestTypeUserBYOL

	return CreateUserUsersUserCreateRequest{
		UserBYOL: &userBYOL,
		Type:     typ,
	}
}

func CreateCreateUserUsersUserCreateRequestUserTOL(userTOL UserTOL) CreateUserUsersUserCreateRequest {
	typ := CreateUserUsersUserCreateRequestTypeUserTOL

	return CreateUserUsersUserCreateRequest{
		UserTOL: &userTOL,
		Type:    typ,
	}
}

func (u *CreateUserUsersUserCreateRequest) UnmarshalJSON(data []byte) error {

	userBYOL := UserBYOL{}
	if err := utils.UnmarshalJSON(data, &userBYOL, "", true, true); err == nil {
		u.UserBYOL = &userBYOL
		u.Type = CreateUserUsersUserCreateRequestTypeUserBYOL
		return nil
	}

	userTOL := UserTOL{}
	if err := utils.UnmarshalJSON(data, &userTOL, "", true, true); err == nil {
		u.UserTOL = &userTOL
		u.Type = CreateUserUsersUserCreateRequestTypeUserTOL
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUsersUserCreateRequest) MarshalJSON() ([]byte, error) {
	if u.UserBYOL != nil {
		return utils.MarshalJSON(u.UserBYOL, "", true)
	}

	if u.UserTOL != nil {
		return utils.MarshalJSON(u.UserTOL, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateUserResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// User created.
	UserCreateRequest *CreateUserUsersUserCreateRequest
}

func (o *CreateUserResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateUserResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *CreateUserResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateUserResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateUserResponse) GetUserCreateRequest() *CreateUserUsersUserCreateRequest {
	if o == nil {
		return nil
	}
	return o.UserCreateRequest
}
