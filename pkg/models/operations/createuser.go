// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// CreateUserUserCreateRequestUserTOLCreateRequestAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUserCreateRequestUserTOLCreateRequestAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserUserCreateRequestUserTOLCreateRequestDataPrivacyAndSharingAgreement struct {
	// Timestamp at which the user consented to the data sharing agreement. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (c CreateUserUserCreateRequestUserTOLCreateRequestDataPrivacyAndSharingAgreement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserTOLCreateRequestDataPrivacyAndSharingAgreement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestDataPrivacyAndSharingAgreement) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestDataPrivacyAndSharingAgreement) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

type CreateUserUserCreateRequestUserTOLCreateRequestFatca struct {
	// Timestamp at which the user confirmed their FATCA status. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// The userâ€™s FATCA status is true if the user is subject to paying taxes in the US, otherwise it can be set to false.
	Status bool `json:"status"`
}

func (c CreateUserUserCreateRequestUserTOLCreateRequestFatca) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserTOLCreateRequestFatca) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestFatca) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestFatca) GetStatus() bool {
	if o == nil {
		return false
	}
	return o.Status
}

// CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressType string

const (
	CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressTypeCreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressType = "create_user_User - Create - Request_User (TOL) - Create - Request_postal_address_Address"
)

type CreateUserUserCreateRequestUserTOLCreateRequestPostalAddress struct {
	CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress

	Type CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressType
}

func CreateCreateUserUserCreateRequestUserTOLCreateRequestPostalAddressCreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress(createUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress) CreateUserUserCreateRequestUserTOLCreateRequestPostalAddress {
	typ := CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressTypeCreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress

	return CreateUserUserCreateRequestUserTOLCreateRequestPostalAddress{
		CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress: &createUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress,
		Type: typ,
	}
}

func (u *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddress) UnmarshalJSON(data []byte) error {

	createUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress := CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress{}
	if err := utils.UnmarshalJSON(data, &createUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress, "", true, true); err == nil {
		u.CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress = &createUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress
		u.Type = CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressTypeCreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUserCreateRequestUserTOLCreateRequestPostalAddress) MarshalJSON() ([]byte, error) {
	if u.CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress != nil {
		return utils.MarshalJSON(u.CreateUserUserCreateRequestUserTOLCreateRequestPostalAddressAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateUserUserCreateRequestUserTOLCreateRequestSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type CreateUserUserCreateRequestUserTOLCreateRequestSalutation string

const (
	CreateUserUserCreateRequestUserTOLCreateRequestSalutationUnknown                 CreateUserUserCreateRequestUserTOLCreateRequestSalutation = ""
	CreateUserUserCreateRequestUserTOLCreateRequestSalutationSalutationMale          CreateUserUserCreateRequestUserTOLCreateRequestSalutation = "SALUTATION_MALE"
	CreateUserUserCreateRequestUserTOLCreateRequestSalutationSalutationFemale        CreateUserUserCreateRequestUserTOLCreateRequestSalutation = "SALUTATION_FEMALE"
	CreateUserUserCreateRequestUserTOLCreateRequestSalutationSalutationFemaleMarried CreateUserUserCreateRequestUserTOLCreateRequestSalutation = "SALUTATION_FEMALE_MARRIED"
	CreateUserUserCreateRequestUserTOLCreateRequestSalutationSalutationDiverse       CreateUserUserCreateRequestUserTOLCreateRequestSalutation = "SALUTATION_DIVERSE"
)

func (e CreateUserUserCreateRequestUserTOLCreateRequestSalutation) ToPointer() *CreateUserUserCreateRequestUserTOLCreateRequestSalutation {
	return &e
}

func (e *CreateUserUserCreateRequestUserTOLCreateRequestSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = CreateUserUserCreateRequestUserTOLCreateRequestSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserTOLCreateRequestSalutation: %v", v)
	}
}

type CreateUserUserCreateRequestUserTOLCreateRequestTermsAndConditions struct {
	// Timestamp at which the user consented to the terms & conditions. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (c CreateUserUserCreateRequestUserTOLCreateRequestTermsAndConditions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserTOLCreateRequestTermsAndConditions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestTermsAndConditions) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequestTermsAndConditions) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

// CreateUserUserCreateRequestUserTOLCreateRequestTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type CreateUserUserCreateRequestUserTOLCreateRequestTitle string

const (
	CreateUserUserCreateRequestUserTOLCreateRequestTitleUnknown  CreateUserUserCreateRequestUserTOLCreateRequestTitle = ""
	CreateUserUserCreateRequestUserTOLCreateRequestTitleDr       CreateUserUserCreateRequestUserTOLCreateRequestTitle = "DR"
	CreateUserUserCreateRequestUserTOLCreateRequestTitleProf     CreateUserUserCreateRequestUserTOLCreateRequestTitle = "PROF"
	CreateUserUserCreateRequestUserTOLCreateRequestTitleProfDr   CreateUserUserCreateRequestUserTOLCreateRequestTitle = "PROF_DR"
	CreateUserUserCreateRequestUserTOLCreateRequestTitleDiplIng  CreateUserUserCreateRequestUserTOLCreateRequestTitle = "DIPL_ING"
	CreateUserUserCreateRequestUserTOLCreateRequestTitleMagister CreateUserUserCreateRequestUserTOLCreateRequestTitle = "MAGISTER"
)

func (e CreateUserUserCreateRequestUserTOLCreateRequestTitle) ToPointer() *CreateUserUserCreateRequestUserTOLCreateRequestTitle {
	return &e
}

func (e *CreateUserUserCreateRequestUserTOLCreateRequestTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = CreateUserUserCreateRequestUserTOLCreateRequestTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserTOLCreateRequestTitle: %v", v)
	}
}

type CreateUserUserCreateRequestUserTOLCreateRequest struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   CreateUserUserCreateRequestUserTOLCreateRequestAddress `json:"address"`
	BirthCity string                                                 `json:"birth_city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry string `json:"birth_country"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName                      *string                                                                       `json:"birth_name,omitempty"`
	DataPrivacyAndSharingAgreement CreateUserUserCreateRequestUserTOLCreateRequestDataPrivacyAndSharingAgreement `json:"data_privacy_and_sharing_agreement"`
	// Email of the user. Must be a valid email address.
	Email string                                               `json:"email"`
	Fatca CreateUserUserCreateRequestUserTOLCreateRequestFatca `json:"fatca"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// Phone number of the user. [Phone number E.164 format](https://en.wikipedia.org/wiki/E.164).
	PhoneNumber *string `json:"phone_number,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation         *CreateUserUserCreateRequestUserTOLCreateRequestSalutation        `default:"" json:"salutation"`
	TermsAndConditions CreateUserUserCreateRequestUserTOLCreateRequestTermsAndConditions `json:"terms_and_conditions"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *CreateUserUserCreateRequestUserTOLCreateRequestTitle `default:"" json:"title"`
}

func (c CreateUserUserCreateRequestUserTOLCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserTOLCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetAddress() CreateUserUserCreateRequestUserTOLCreateRequestAddress {
	if o == nil {
		return CreateUserUserCreateRequestUserTOLCreateRequestAddress{}
	}
	return o.Address
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetBirthCity() string {
	if o == nil {
		return ""
	}
	return o.BirthCity
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetBirthCountry() string {
	if o == nil {
		return ""
	}
	return o.BirthCountry
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetDataPrivacyAndSharingAgreement() CreateUserUserCreateRequestUserTOLCreateRequestDataPrivacyAndSharingAgreement {
	if o == nil {
		return CreateUserUserCreateRequestUserTOLCreateRequestDataPrivacyAndSharingAgreement{}
	}
	return o.DataPrivacyAndSharingAgreement
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetFatca() CreateUserUserCreateRequestUserTOLCreateRequestFatca {
	if o == nil {
		return CreateUserUserCreateRequestUserTOLCreateRequestFatca{}
	}
	return o.Fatca
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetPostalAddress() *CreateUserUserCreateRequestUserTOLCreateRequestPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetSalutation() *CreateUserUserCreateRequestUserTOLCreateRequestSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetTermsAndConditions() CreateUserUserCreateRequestUserTOLCreateRequestTermsAndConditions {
	if o == nil {
		return CreateUserUserCreateRequestUserTOLCreateRequestTermsAndConditions{}
	}
	return o.TermsAndConditions
}

func (o *CreateUserUserCreateRequestUserTOLCreateRequest) GetTitle() *CreateUserUserCreateRequestUserTOLCreateRequestTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

// CreateUserUserCreateRequestUserBYOLCreateRequestAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUserCreateRequestUserBYOLCreateRequestAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressType string

const (
	CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressTypeCreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressType = "create_user_User - Create - Request_User (BYOL) - Create - Request_postal_address_Address"
)

type CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddress struct {
	CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress

	Type CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressType
}

func CreateCreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressCreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress(createUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress) CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddress {
	typ := CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressTypeCreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress

	return CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddress{
		CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress: &createUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress,
		Type: typ,
	}
}

func (u *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddress) UnmarshalJSON(data []byte) error {

	createUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress := CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress{}
	if err := utils.UnmarshalJSON(data, &createUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress, "", true, true); err == nil {
		u.CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress = &createUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress
		u.Type = CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressTypeCreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddress) MarshalJSON() ([]byte, error) {
	if u.CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress != nil {
		return utils.MarshalJSON(u.CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddressAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateUserUserCreateRequestUserBYOLCreateRequestSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type CreateUserUserCreateRequestUserBYOLCreateRequestSalutation string

const (
	CreateUserUserCreateRequestUserBYOLCreateRequestSalutationUnknown                 CreateUserUserCreateRequestUserBYOLCreateRequestSalutation = ""
	CreateUserUserCreateRequestUserBYOLCreateRequestSalutationSalutationMale          CreateUserUserCreateRequestUserBYOLCreateRequestSalutation = "SALUTATION_MALE"
	CreateUserUserCreateRequestUserBYOLCreateRequestSalutationSalutationFemale        CreateUserUserCreateRequestUserBYOLCreateRequestSalutation = "SALUTATION_FEMALE"
	CreateUserUserCreateRequestUserBYOLCreateRequestSalutationSalutationFemaleMarried CreateUserUserCreateRequestUserBYOLCreateRequestSalutation = "SALUTATION_FEMALE_MARRIED"
	CreateUserUserCreateRequestUserBYOLCreateRequestSalutationSalutationDiverse       CreateUserUserCreateRequestUserBYOLCreateRequestSalutation = "SALUTATION_DIVERSE"
)

func (e CreateUserUserCreateRequestUserBYOLCreateRequestSalutation) ToPointer() *CreateUserUserCreateRequestUserBYOLCreateRequestSalutation {
	return &e
}

func (e *CreateUserUserCreateRequestUserBYOLCreateRequestSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = CreateUserUserCreateRequestUserBYOLCreateRequestSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserBYOLCreateRequestSalutation: %v", v)
	}
}

// CreateUserUserCreateRequestUserBYOLCreateRequestTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type CreateUserUserCreateRequestUserBYOLCreateRequestTitle string

const (
	CreateUserUserCreateRequestUserBYOLCreateRequestTitleUnknown  CreateUserUserCreateRequestUserBYOLCreateRequestTitle = ""
	CreateUserUserCreateRequestUserBYOLCreateRequestTitleDr       CreateUserUserCreateRequestUserBYOLCreateRequestTitle = "DR"
	CreateUserUserCreateRequestUserBYOLCreateRequestTitleProf     CreateUserUserCreateRequestUserBYOLCreateRequestTitle = "PROF"
	CreateUserUserCreateRequestUserBYOLCreateRequestTitleProfDr   CreateUserUserCreateRequestUserBYOLCreateRequestTitle = "PROF_DR"
	CreateUserUserCreateRequestUserBYOLCreateRequestTitleDiplIng  CreateUserUserCreateRequestUserBYOLCreateRequestTitle = "DIPL_ING"
	CreateUserUserCreateRequestUserBYOLCreateRequestTitleMagister CreateUserUserCreateRequestUserBYOLCreateRequestTitle = "MAGISTER"
)

func (e CreateUserUserCreateRequestUserBYOLCreateRequestTitle) ToPointer() *CreateUserUserCreateRequestUserBYOLCreateRequestTitle {
	return &e
}

func (e *CreateUserUserCreateRequestUserBYOLCreateRequestTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = CreateUserUserCreateRequestUserBYOLCreateRequestTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserBYOLCreateRequestTitle: %v", v)
	}
}

type CreateUserUserCreateRequestUserBYOLCreateRequest struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   CreateUserUserCreateRequestUserBYOLCreateRequestAddress `json:"address"`
	BirthCity *string                                                 `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *CreateUserUserCreateRequestUserBYOLCreateRequestSalutation `default:"" json:"salutation"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *CreateUserUserCreateRequestUserBYOLCreateRequestTitle `default:"" json:"title"`
}

func (c CreateUserUserCreateRequestUserBYOLCreateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserBYOLCreateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetAddress() CreateUserUserCreateRequestUserBYOLCreateRequestAddress {
	if o == nil {
		return CreateUserUserCreateRequestUserBYOLCreateRequestAddress{}
	}
	return o.Address
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetPostalAddress() *CreateUserUserCreateRequestUserBYOLCreateRequestPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetSalutation() *CreateUserUserCreateRequestUserBYOLCreateRequestSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *CreateUserUserCreateRequestUserBYOLCreateRequest) GetTitle() *CreateUserUserCreateRequestUserBYOLCreateRequestTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

type CreateUserUserCreateRequestType string

const (
	CreateUserUserCreateRequestTypeCreateUserUserCreateRequestUserBYOLCreateRequest CreateUserUserCreateRequestType = "create_user_User - Create - Request_User (BYOL) - Create - Request"
	CreateUserUserCreateRequestTypeCreateUserUserCreateRequestUserTOLCreateRequest  CreateUserUserCreateRequestType = "create_user_User - Create - Request_User (TOL) - Create - Request"
)

type CreateUserUserCreateRequest struct {
	CreateUserUserCreateRequestUserBYOLCreateRequest *CreateUserUserCreateRequestUserBYOLCreateRequest
	CreateUserUserCreateRequestUserTOLCreateRequest  *CreateUserUserCreateRequestUserTOLCreateRequest

	Type CreateUserUserCreateRequestType
}

func CreateCreateUserUserCreateRequestCreateUserUserCreateRequestUserBYOLCreateRequest(createUserUserCreateRequestUserBYOLCreateRequest CreateUserUserCreateRequestUserBYOLCreateRequest) CreateUserUserCreateRequest {
	typ := CreateUserUserCreateRequestTypeCreateUserUserCreateRequestUserBYOLCreateRequest

	return CreateUserUserCreateRequest{
		CreateUserUserCreateRequestUserBYOLCreateRequest: &createUserUserCreateRequestUserBYOLCreateRequest,
		Type: typ,
	}
}

func CreateCreateUserUserCreateRequestCreateUserUserCreateRequestUserTOLCreateRequest(createUserUserCreateRequestUserTOLCreateRequest CreateUserUserCreateRequestUserTOLCreateRequest) CreateUserUserCreateRequest {
	typ := CreateUserUserCreateRequestTypeCreateUserUserCreateRequestUserTOLCreateRequest

	return CreateUserUserCreateRequest{
		CreateUserUserCreateRequestUserTOLCreateRequest: &createUserUserCreateRequestUserTOLCreateRequest,
		Type: typ,
	}
}

func (u *CreateUserUserCreateRequest) UnmarshalJSON(data []byte) error {

	createUserUserCreateRequestUserBYOLCreateRequest := CreateUserUserCreateRequestUserBYOLCreateRequest{}
	if err := utils.UnmarshalJSON(data, &createUserUserCreateRequestUserBYOLCreateRequest, "", true, true); err == nil {
		u.CreateUserUserCreateRequestUserBYOLCreateRequest = &createUserUserCreateRequestUserBYOLCreateRequest
		u.Type = CreateUserUserCreateRequestTypeCreateUserUserCreateRequestUserBYOLCreateRequest
		return nil
	}

	createUserUserCreateRequestUserTOLCreateRequest := CreateUserUserCreateRequestUserTOLCreateRequest{}
	if err := utils.UnmarshalJSON(data, &createUserUserCreateRequestUserTOLCreateRequest, "", true, true); err == nil {
		u.CreateUserUserCreateRequestUserTOLCreateRequest = &createUserUserCreateRequestUserTOLCreateRequest
		u.Type = CreateUserUserCreateRequestTypeCreateUserUserCreateRequestUserTOLCreateRequest
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUserCreateRequest) MarshalJSON() ([]byte, error) {
	if u.CreateUserUserCreateRequestUserBYOLCreateRequest != nil {
		return utils.MarshalJSON(u.CreateUserUserCreateRequestUserBYOLCreateRequest, "", true)
	}

	if u.CreateUserUserCreateRequestUserTOLCreateRequest != nil {
		return utils.MarshalJSON(u.CreateUserUserCreateRequestUserTOLCreateRequest, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateUserRequest struct {
	RequestBody *CreateUserUserCreateRequest `request:"mediaType=application/json"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (c CreateUserRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserRequest) GetRequestBody() *CreateUserUserCreateRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateUserRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *CreateUserRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *CreateUserRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *CreateUserRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *CreateUserRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// CreateUserUserCreateRequestUserTOLAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUserCreateRequestUserTOLAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUserCreateRequestUserTOLAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUserCreateRequestUserTOLAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUserCreateRequestUserTOLAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUserCreateRequestUserTOLAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUserCreateRequestUserTOLAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUserCreateRequestUserTOLAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserUserCreateRequestUserTOLDataPrivacyAndSharingAgreement struct {
	// Timestamp at which the user consented to the data sharing agreement. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (c CreateUserUserCreateRequestUserTOLDataPrivacyAndSharingAgreement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserTOLDataPrivacyAndSharingAgreement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserTOLDataPrivacyAndSharingAgreement) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *CreateUserUserCreateRequestUserTOLDataPrivacyAndSharingAgreement) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

type CreateUserUserCreateRequestUserTOLFatca struct {
	// Timestamp at which the user confirmed their FATCA status. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// The userâ€™s FATCA status is true if the user is subject to paying taxes in the US, otherwise it can be set to false.
	Status bool `json:"status"`
}

func (c CreateUserUserCreateRequestUserTOLFatca) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserTOLFatca) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserTOLFatca) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *CreateUserUserCreateRequestUserTOLFatca) GetStatus() bool {
	if o == nil {
		return false
	}
	return o.Status
}

// CreateUserUserCreateRequestUserTOLPostalAddressAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUserCreateRequestUserTOLPostalAddressAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUserCreateRequestUserTOLPostalAddressAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUserCreateRequestUserTOLPostalAddressAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUserCreateRequestUserTOLPostalAddressAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUserCreateRequestUserTOLPostalAddressAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUserCreateRequestUserTOLPostalAddressAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUserCreateRequestUserTOLPostalAddressAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserUserCreateRequestUserTOLPostalAddressType string

const (
	CreateUserUserCreateRequestUserTOLPostalAddressTypeCreateUserUserCreateRequestUserTOLPostalAddressAddress CreateUserUserCreateRequestUserTOLPostalAddressType = "create_user_User - Create - Request_User (TOL)_postal_address_Address"
)

type CreateUserUserCreateRequestUserTOLPostalAddress struct {
	CreateUserUserCreateRequestUserTOLPostalAddressAddress *CreateUserUserCreateRequestUserTOLPostalAddressAddress

	Type CreateUserUserCreateRequestUserTOLPostalAddressType
}

func CreateCreateUserUserCreateRequestUserTOLPostalAddressCreateUserUserCreateRequestUserTOLPostalAddressAddress(createUserUserCreateRequestUserTOLPostalAddressAddress CreateUserUserCreateRequestUserTOLPostalAddressAddress) CreateUserUserCreateRequestUserTOLPostalAddress {
	typ := CreateUserUserCreateRequestUserTOLPostalAddressTypeCreateUserUserCreateRequestUserTOLPostalAddressAddress

	return CreateUserUserCreateRequestUserTOLPostalAddress{
		CreateUserUserCreateRequestUserTOLPostalAddressAddress: &createUserUserCreateRequestUserTOLPostalAddressAddress,
		Type: typ,
	}
}

func (u *CreateUserUserCreateRequestUserTOLPostalAddress) UnmarshalJSON(data []byte) error {

	createUserUserCreateRequestUserTOLPostalAddressAddress := CreateUserUserCreateRequestUserTOLPostalAddressAddress{}
	if err := utils.UnmarshalJSON(data, &createUserUserCreateRequestUserTOLPostalAddressAddress, "", true, true); err == nil {
		u.CreateUserUserCreateRequestUserTOLPostalAddressAddress = &createUserUserCreateRequestUserTOLPostalAddressAddress
		u.Type = CreateUserUserCreateRequestUserTOLPostalAddressTypeCreateUserUserCreateRequestUserTOLPostalAddressAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUserCreateRequestUserTOLPostalAddress) MarshalJSON() ([]byte, error) {
	if u.CreateUserUserCreateRequestUserTOLPostalAddressAddress != nil {
		return utils.MarshalJSON(u.CreateUserUserCreateRequestUserTOLPostalAddressAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateUserUserCreateRequestUserTOLSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type CreateUserUserCreateRequestUserTOLSalutation string

const (
	CreateUserUserCreateRequestUserTOLSalutationUnknown                 CreateUserUserCreateRequestUserTOLSalutation = ""
	CreateUserUserCreateRequestUserTOLSalutationSalutationMale          CreateUserUserCreateRequestUserTOLSalutation = "SALUTATION_MALE"
	CreateUserUserCreateRequestUserTOLSalutationSalutationFemale        CreateUserUserCreateRequestUserTOLSalutation = "SALUTATION_FEMALE"
	CreateUserUserCreateRequestUserTOLSalutationSalutationFemaleMarried CreateUserUserCreateRequestUserTOLSalutation = "SALUTATION_FEMALE_MARRIED"
	CreateUserUserCreateRequestUserTOLSalutationSalutationDiverse       CreateUserUserCreateRequestUserTOLSalutation = "SALUTATION_DIVERSE"
)

func (e CreateUserUserCreateRequestUserTOLSalutation) ToPointer() *CreateUserUserCreateRequestUserTOLSalutation {
	return &e
}

func (e *CreateUserUserCreateRequestUserTOLSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = CreateUserUserCreateRequestUserTOLSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserTOLSalutation: %v", v)
	}
}

// CreateUserUserCreateRequestUserTOLStatus - Status of the user.
// * ACTIVE -
// * INACTIVE -
// * OFFBOARDING -
// * OFFBOARDED -
type CreateUserUserCreateRequestUserTOLStatus string

const (
	CreateUserUserCreateRequestUserTOLStatusActive      CreateUserUserCreateRequestUserTOLStatus = "ACTIVE"
	CreateUserUserCreateRequestUserTOLStatusInactive    CreateUserUserCreateRequestUserTOLStatus = "INACTIVE"
	CreateUserUserCreateRequestUserTOLStatusOffboarding CreateUserUserCreateRequestUserTOLStatus = "OFFBOARDING"
	CreateUserUserCreateRequestUserTOLStatusOffboarded  CreateUserUserCreateRequestUserTOLStatus = "OFFBOARDED"
)

func (e CreateUserUserCreateRequestUserTOLStatus) ToPointer() *CreateUserUserCreateRequestUserTOLStatus {
	return &e
}

func (e *CreateUserUserCreateRequestUserTOLStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "OFFBOARDING":
		fallthrough
	case "OFFBOARDED":
		*e = CreateUserUserCreateRequestUserTOLStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserTOLStatus: %v", v)
	}
}

type CreateUserUserCreateRequestUserTOLTermsAndConditions struct {
	// Timestamp at which the user consented to the terms & conditions. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Consent unique identifier.
	ConsentDocumentID string `json:"consent_document_id"`
}

func (c CreateUserUserCreateRequestUserTOLTermsAndConditions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserTOLTermsAndConditions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserTOLTermsAndConditions) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *CreateUserUserCreateRequestUserTOLTermsAndConditions) GetConsentDocumentID() string {
	if o == nil {
		return ""
	}
	return o.ConsentDocumentID
}

// CreateUserUserCreateRequestUserTOLTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type CreateUserUserCreateRequestUserTOLTitle string

const (
	CreateUserUserCreateRequestUserTOLTitleUnknown  CreateUserUserCreateRequestUserTOLTitle = ""
	CreateUserUserCreateRequestUserTOLTitleDr       CreateUserUserCreateRequestUserTOLTitle = "DR"
	CreateUserUserCreateRequestUserTOLTitleProf     CreateUserUserCreateRequestUserTOLTitle = "PROF"
	CreateUserUserCreateRequestUserTOLTitleProfDr   CreateUserUserCreateRequestUserTOLTitle = "PROF_DR"
	CreateUserUserCreateRequestUserTOLTitleDiplIng  CreateUserUserCreateRequestUserTOLTitle = "DIPL_ING"
	CreateUserUserCreateRequestUserTOLTitleMagister CreateUserUserCreateRequestUserTOLTitle = "MAGISTER"
)

func (e CreateUserUserCreateRequestUserTOLTitle) ToPointer() *CreateUserUserCreateRequestUserTOLTitle {
	return &e
}

func (e *CreateUserUserCreateRequestUserTOLTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = CreateUserUserCreateRequestUserTOLTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserTOLTitle: %v", v)
	}
}

type CreateUserUserCreateRequestUserTOL struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   CreateUserUserCreateRequestUserTOLAddress `json:"address"`
	BirthCity *string                                   `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt                      time.Time                                                         `json:"created_at"`
	DataPrivacyAndSharingAgreement *CreateUserUserCreateRequestUserTOLDataPrivacyAndSharingAgreement `json:"data_privacy_and_sharing_agreement,omitempty"`
	// Email of the user. Must be a valid email address.
	Email *string                                  `json:"email,omitempty"`
	Fatca *CreateUserUserCreateRequestUserTOLFatca `json:"fatca,omitempty"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// User unique identifier.
	ID string `json:"id"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// Phone number of the user. [Phone number E.164 format](https://en.wikipedia.org/wiki/E.164).
	PhoneNumber *string `json:"phone_number,omitempty"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *CreateUserUserCreateRequestUserTOLPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *CreateUserUserCreateRequestUserTOLSalutation `default:"" json:"salutation"`
	// Status of the user.
	// * ACTIVE -
	// * INACTIVE -
	// * OFFBOARDING -
	// * OFFBOARDED -
	Status             CreateUserUserCreateRequestUserTOLStatus              `json:"status"`
	TermsAndConditions *CreateUserUserCreateRequestUserTOLTermsAndConditions `json:"terms_and_conditions,omitempty"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *CreateUserUserCreateRequestUserTOLTitle `default:"" json:"title"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (c CreateUserUserCreateRequestUserTOL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserTOL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserTOL) GetAddress() CreateUserUserCreateRequestUserTOLAddress {
	if o == nil {
		return CreateUserUserCreateRequestUserTOLAddress{}
	}
	return o.Address
}

func (o *CreateUserUserCreateRequestUserTOL) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *CreateUserUserCreateRequestUserTOL) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *CreateUserUserCreateRequestUserTOL) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *CreateUserUserCreateRequestUserTOL) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *CreateUserUserCreateRequestUserTOL) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateUserUserCreateRequestUserTOL) GetDataPrivacyAndSharingAgreement() *CreateUserUserCreateRequestUserTOLDataPrivacyAndSharingAgreement {
	if o == nil {
		return nil
	}
	return o.DataPrivacyAndSharingAgreement
}

func (o *CreateUserUserCreateRequestUserTOL) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateUserUserCreateRequestUserTOL) GetFatca() *CreateUserUserCreateRequestUserTOLFatca {
	if o == nil {
		return nil
	}
	return o.Fatca
}

func (o *CreateUserUserCreateRequestUserTOL) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *CreateUserUserCreateRequestUserTOL) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateUserUserCreateRequestUserTOL) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *CreateUserUserCreateRequestUserTOL) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *CreateUserUserCreateRequestUserTOL) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *CreateUserUserCreateRequestUserTOL) GetPostalAddress() *CreateUserUserCreateRequestUserTOLPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *CreateUserUserCreateRequestUserTOL) GetSalutation() *CreateUserUserCreateRequestUserTOLSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *CreateUserUserCreateRequestUserTOL) GetStatus() CreateUserUserCreateRequestUserTOLStatus {
	if o == nil {
		return CreateUserUserCreateRequestUserTOLStatus("")
	}
	return o.Status
}

func (o *CreateUserUserCreateRequestUserTOL) GetTermsAndConditions() *CreateUserUserCreateRequestUserTOLTermsAndConditions {
	if o == nil {
		return nil
	}
	return o.TermsAndConditions
}

func (o *CreateUserUserCreateRequestUserTOL) GetTitle() *CreateUserUserCreateRequestUserTOLTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreateUserUserCreateRequestUserTOL) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// CreateUserUserCreateRequestUserBYOLAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUserCreateRequestUserBYOLAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUserCreateRequestUserBYOLAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUserCreateRequestUserBYOLAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUserCreateRequestUserBYOLAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUserCreateRequestUserBYOLAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUserCreateRequestUserBYOLAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUserCreateRequestUserBYOLAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

// CreateUserUserCreateRequestUserBYOLPostalAddressAddress - Address. Must not be a P.O. box or c/o address.
type CreateUserUserCreateRequestUserBYOLPostalAddressAddress struct {
	// First address line of the address.
	AddressLine1 string `json:"address_line1"`
	// Second address line of the address.
	AddressLine2 *string `json:"address_line2,omitempty"`
	City         string  `json:"city"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Postal code (postcode, PIN or ZIP code)
	Postcode string `json:"postcode"`
	// State, province, county. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	State *string `json:"state,omitempty"`
}

func (o *CreateUserUserCreateRequestUserBYOLPostalAddressAddress) GetAddressLine1() string {
	if o == nil {
		return ""
	}
	return o.AddressLine1
}

func (o *CreateUserUserCreateRequestUserBYOLPostalAddressAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateUserUserCreateRequestUserBYOLPostalAddressAddress) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateUserUserCreateRequestUserBYOLPostalAddressAddress) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateUserUserCreateRequestUserBYOLPostalAddressAddress) GetPostcode() string {
	if o == nil {
		return ""
	}
	return o.Postcode
}

func (o *CreateUserUserCreateRequestUserBYOLPostalAddressAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type CreateUserUserCreateRequestUserBYOLPostalAddressType string

const (
	CreateUserUserCreateRequestUserBYOLPostalAddressTypeCreateUserUserCreateRequestUserBYOLPostalAddressAddress CreateUserUserCreateRequestUserBYOLPostalAddressType = "create_user_User - Create - Request_User (BYOL)_postal_address_Address"
)

type CreateUserUserCreateRequestUserBYOLPostalAddress struct {
	CreateUserUserCreateRequestUserBYOLPostalAddressAddress *CreateUserUserCreateRequestUserBYOLPostalAddressAddress

	Type CreateUserUserCreateRequestUserBYOLPostalAddressType
}

func CreateCreateUserUserCreateRequestUserBYOLPostalAddressCreateUserUserCreateRequestUserBYOLPostalAddressAddress(createUserUserCreateRequestUserBYOLPostalAddressAddress CreateUserUserCreateRequestUserBYOLPostalAddressAddress) CreateUserUserCreateRequestUserBYOLPostalAddress {
	typ := CreateUserUserCreateRequestUserBYOLPostalAddressTypeCreateUserUserCreateRequestUserBYOLPostalAddressAddress

	return CreateUserUserCreateRequestUserBYOLPostalAddress{
		CreateUserUserCreateRequestUserBYOLPostalAddressAddress: &createUserUserCreateRequestUserBYOLPostalAddressAddress,
		Type: typ,
	}
}

func (u *CreateUserUserCreateRequestUserBYOLPostalAddress) UnmarshalJSON(data []byte) error {

	createUserUserCreateRequestUserBYOLPostalAddressAddress := CreateUserUserCreateRequestUserBYOLPostalAddressAddress{}
	if err := utils.UnmarshalJSON(data, &createUserUserCreateRequestUserBYOLPostalAddressAddress, "", true, true); err == nil {
		u.CreateUserUserCreateRequestUserBYOLPostalAddressAddress = &createUserUserCreateRequestUserBYOLPostalAddressAddress
		u.Type = CreateUserUserCreateRequestUserBYOLPostalAddressTypeCreateUserUserCreateRequestUserBYOLPostalAddressAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUserCreateRequestUserBYOLPostalAddress) MarshalJSON() ([]byte, error) {
	if u.CreateUserUserCreateRequestUserBYOLPostalAddressAddress != nil {
		return utils.MarshalJSON(u.CreateUserUserCreateRequestUserBYOLPostalAddressAddress, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateUserUserCreateRequestUserBYOLSalutation - Salutation of the user used in reports and statements.
// * (empty string) -
// * SALUTATION_MALE -
// * SALUTATION_FEMALE -
// * SALUTATION_FEMALE_MARRIED -
// * SALUTATION_DIVERSE -
type CreateUserUserCreateRequestUserBYOLSalutation string

const (
	CreateUserUserCreateRequestUserBYOLSalutationUnknown                 CreateUserUserCreateRequestUserBYOLSalutation = ""
	CreateUserUserCreateRequestUserBYOLSalutationSalutationMale          CreateUserUserCreateRequestUserBYOLSalutation = "SALUTATION_MALE"
	CreateUserUserCreateRequestUserBYOLSalutationSalutationFemale        CreateUserUserCreateRequestUserBYOLSalutation = "SALUTATION_FEMALE"
	CreateUserUserCreateRequestUserBYOLSalutationSalutationFemaleMarried CreateUserUserCreateRequestUserBYOLSalutation = "SALUTATION_FEMALE_MARRIED"
	CreateUserUserCreateRequestUserBYOLSalutationSalutationDiverse       CreateUserUserCreateRequestUserBYOLSalutation = "SALUTATION_DIVERSE"
)

func (e CreateUserUserCreateRequestUserBYOLSalutation) ToPointer() *CreateUserUserCreateRequestUserBYOLSalutation {
	return &e
}

func (e *CreateUserUserCreateRequestUserBYOLSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "SALUTATION_MALE":
		fallthrough
	case "SALUTATION_FEMALE":
		fallthrough
	case "SALUTATION_FEMALE_MARRIED":
		fallthrough
	case "SALUTATION_DIVERSE":
		*e = CreateUserUserCreateRequestUserBYOLSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserBYOLSalutation: %v", v)
	}
}

// CreateUserUserCreateRequestUserBYOLStatus - Status of the user.
// * ACTIVE -
// * INACTIVE -
// * OFFBOARDING -
// * OFFBOARDED -
type CreateUserUserCreateRequestUserBYOLStatus string

const (
	CreateUserUserCreateRequestUserBYOLStatusActive      CreateUserUserCreateRequestUserBYOLStatus = "ACTIVE"
	CreateUserUserCreateRequestUserBYOLStatusInactive    CreateUserUserCreateRequestUserBYOLStatus = "INACTIVE"
	CreateUserUserCreateRequestUserBYOLStatusOffboarding CreateUserUserCreateRequestUserBYOLStatus = "OFFBOARDING"
	CreateUserUserCreateRequestUserBYOLStatusOffboarded  CreateUserUserCreateRequestUserBYOLStatus = "OFFBOARDED"
)

func (e CreateUserUserCreateRequestUserBYOLStatus) ToPointer() *CreateUserUserCreateRequestUserBYOLStatus {
	return &e
}

func (e *CreateUserUserCreateRequestUserBYOLStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "OFFBOARDING":
		fallthrough
	case "OFFBOARDED":
		*e = CreateUserUserCreateRequestUserBYOLStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserBYOLStatus: %v", v)
	}
}

// CreateUserUserCreateRequestUserBYOLTitle - Title of the user used in reports and statements.
// * (empty string) -
// * DR - Doctor
// * PROF - Professor
// * PROF_DR -
// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
// * MAGISTER -
type CreateUserUserCreateRequestUserBYOLTitle string

const (
	CreateUserUserCreateRequestUserBYOLTitleUnknown  CreateUserUserCreateRequestUserBYOLTitle = ""
	CreateUserUserCreateRequestUserBYOLTitleDr       CreateUserUserCreateRequestUserBYOLTitle = "DR"
	CreateUserUserCreateRequestUserBYOLTitleProf     CreateUserUserCreateRequestUserBYOLTitle = "PROF"
	CreateUserUserCreateRequestUserBYOLTitleProfDr   CreateUserUserCreateRequestUserBYOLTitle = "PROF_DR"
	CreateUserUserCreateRequestUserBYOLTitleDiplIng  CreateUserUserCreateRequestUserBYOLTitle = "DIPL_ING"
	CreateUserUserCreateRequestUserBYOLTitleMagister CreateUserUserCreateRequestUserBYOLTitle = "MAGISTER"
)

func (e CreateUserUserCreateRequestUserBYOLTitle) ToPointer() *CreateUserUserCreateRequestUserBYOLTitle {
	return &e
}

func (e *CreateUserUserCreateRequestUserBYOLTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "DR":
		fallthrough
	case "PROF":
		fallthrough
	case "PROF_DR":
		fallthrough
	case "DIPL_ING":
		fallthrough
	case "MAGISTER":
		*e = CreateUserUserCreateRequestUserBYOLTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserUserCreateRequestUserBYOLTitle: %v", v)
	}
}

type CreateUserUserCreateRequestUserBYOL struct {
	// Address. Must not be a P.O. box or c/o address.
	Address   CreateUserUserCreateRequestUserBYOLAddress `json:"address"`
	BirthCity *string                                    `json:"birth_city,omitempty"`
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	BirthCountry *string `json:"birth_country,omitempty"`
	// Birth date of the user in YYYY-MM-DD format. [RFC 3339, section 5.6](https://json-schema.org/draft/2020-12/json-schema-validation.html#RFC3339)
	BirthDate types.Date `json:"birth_date"`
	// If applicable, birth name of the user.
	BirthName *string `json:"birth_name,omitempty"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// User unique identifier.
	ID string `json:"id"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// Nationalities of the user. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Nationalities []string `json:"nationalities"`
	// User postal address. Needs to be specified if different to the residential address, otherwise it is automatically populated.
	PostalAddress *CreateUserUserCreateRequestUserBYOLPostalAddress `json:"postal_address,omitempty"`
	// Salutation of the user used in reports and statements.
	// * (empty string) -
	// * SALUTATION_MALE -
	// * SALUTATION_FEMALE -
	// * SALUTATION_FEMALE_MARRIED -
	// * SALUTATION_DIVERSE -
	Salutation *CreateUserUserCreateRequestUserBYOLSalutation `default:"" json:"salutation"`
	// Status of the user.
	// * ACTIVE -
	// * INACTIVE -
	// * OFFBOARDING -
	// * OFFBOARDED -
	Status CreateUserUserCreateRequestUserBYOLStatus `json:"status"`
	// Title of the user used in reports and statements.
	// * (empty string) -
	// * DR - Doctor
	// * PROF - Professor
	// * PROF_DR -
	// * DIPL_ING - Graduate engineer (Diplom-Ingenieur)
	// * MAGISTER -
	Title *CreateUserUserCreateRequestUserBYOLTitle `default:"" json:"title"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (c CreateUserUserCreateRequestUserBYOL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserUserCreateRequestUserBYOL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserUserCreateRequestUserBYOL) GetAddress() CreateUserUserCreateRequestUserBYOLAddress {
	if o == nil {
		return CreateUserUserCreateRequestUserBYOLAddress{}
	}
	return o.Address
}

func (o *CreateUserUserCreateRequestUserBYOL) GetBirthCity() *string {
	if o == nil {
		return nil
	}
	return o.BirthCity
}

func (o *CreateUserUserCreateRequestUserBYOL) GetBirthCountry() *string {
	if o == nil {
		return nil
	}
	return o.BirthCountry
}

func (o *CreateUserUserCreateRequestUserBYOL) GetBirthDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.BirthDate
}

func (o *CreateUserUserCreateRequestUserBYOL) GetBirthName() *string {
	if o == nil {
		return nil
	}
	return o.BirthName
}

func (o *CreateUserUserCreateRequestUserBYOL) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateUserUserCreateRequestUserBYOL) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *CreateUserUserCreateRequestUserBYOL) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateUserUserCreateRequestUserBYOL) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *CreateUserUserCreateRequestUserBYOL) GetNationalities() []string {
	if o == nil {
		return []string{}
	}
	return o.Nationalities
}

func (o *CreateUserUserCreateRequestUserBYOL) GetPostalAddress() *CreateUserUserCreateRequestUserBYOLPostalAddress {
	if o == nil {
		return nil
	}
	return o.PostalAddress
}

func (o *CreateUserUserCreateRequestUserBYOL) GetSalutation() *CreateUserUserCreateRequestUserBYOLSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *CreateUserUserCreateRequestUserBYOL) GetStatus() CreateUserUserCreateRequestUserBYOLStatus {
	if o == nil {
		return CreateUserUserCreateRequestUserBYOLStatus("")
	}
	return o.Status
}

func (o *CreateUserUserCreateRequestUserBYOL) GetTitle() *CreateUserUserCreateRequestUserBYOLTitle {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreateUserUserCreateRequestUserBYOL) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type CreateUserUserCreateRequest1Type string

const (
	CreateUserUserCreateRequest1TypeCreateUserUserCreateRequestUserBYOL CreateUserUserCreateRequest1Type = "create_user_User - Create - Request_User (BYOL)"
	CreateUserUserCreateRequest1TypeCreateUserUserCreateRequestUserTOL  CreateUserUserCreateRequest1Type = "create_user_User - Create - Request_User (TOL)"
)

type CreateUserUserCreateRequest1 struct {
	CreateUserUserCreateRequestUserBYOL *CreateUserUserCreateRequestUserBYOL
	CreateUserUserCreateRequestUserTOL  *CreateUserUserCreateRequestUserTOL

	Type CreateUserUserCreateRequest1Type
}

func CreateCreateUserUserCreateRequest1CreateUserUserCreateRequestUserBYOL(createUserUserCreateRequestUserBYOL CreateUserUserCreateRequestUserBYOL) CreateUserUserCreateRequest1 {
	typ := CreateUserUserCreateRequest1TypeCreateUserUserCreateRequestUserBYOL

	return CreateUserUserCreateRequest1{
		CreateUserUserCreateRequestUserBYOL: &createUserUserCreateRequestUserBYOL,
		Type:                                typ,
	}
}

func CreateCreateUserUserCreateRequest1CreateUserUserCreateRequestUserTOL(createUserUserCreateRequestUserTOL CreateUserUserCreateRequestUserTOL) CreateUserUserCreateRequest1 {
	typ := CreateUserUserCreateRequest1TypeCreateUserUserCreateRequestUserTOL

	return CreateUserUserCreateRequest1{
		CreateUserUserCreateRequestUserTOL: &createUserUserCreateRequestUserTOL,
		Type:                               typ,
	}
}

func (u *CreateUserUserCreateRequest1) UnmarshalJSON(data []byte) error {

	createUserUserCreateRequestUserBYOL := CreateUserUserCreateRequestUserBYOL{}
	if err := utils.UnmarshalJSON(data, &createUserUserCreateRequestUserBYOL, "", true, true); err == nil {
		u.CreateUserUserCreateRequestUserBYOL = &createUserUserCreateRequestUserBYOL
		u.Type = CreateUserUserCreateRequest1TypeCreateUserUserCreateRequestUserBYOL
		return nil
	}

	createUserUserCreateRequestUserTOL := CreateUserUserCreateRequestUserTOL{}
	if err := utils.UnmarshalJSON(data, &createUserUserCreateRequestUserTOL, "", true, true); err == nil {
		u.CreateUserUserCreateRequestUserTOL = &createUserUserCreateRequestUserTOL
		u.Type = CreateUserUserCreateRequest1TypeCreateUserUserCreateRequestUserTOL
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserUserCreateRequest1) MarshalJSON() ([]byte, error) {
	if u.CreateUserUserCreateRequestUserBYOL != nil {
		return utils.MarshalJSON(u.CreateUserUserCreateRequestUserBYOL, "", true)
	}

	if u.CreateUserUserCreateRequestUserTOL != nil {
		return utils.MarshalJSON(u.CreateUserUserCreateRequestUserTOL, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateUserResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// User created.
	UserCreateRequest *CreateUserUserCreateRequest1
}

func (o *CreateUserResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateUserResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateUserResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateUserResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateUserResponse) GetUserCreateRequest() *CreateUserUserCreateRequest1 {
	if o == nil {
		return nil
	}
	return o.UserCreateRequest
}
