// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
)

type ListPositionsRequest struct {
	AccountID string `pathParam:"style=simple,explode=false,name=account_id"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListPositionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPositionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListPositionsRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListPositionsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListPositionsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListPositionsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListPositionsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListPositionsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListPositionsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

type ListPositionsInstrument struct {
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	Isin *string `json:"isin,omitempty"`
	// Instrument unique identifier.
	UUID string `json:"uuid"`
}

func (o *ListPositionsInstrument) GetIsin() *string {
	if o == nil {
		return nil
	}
	return o.Isin
}

func (o *ListPositionsInstrument) GetUUID() string {
	if o == nil {
		return ""
	}
	return o.UUID
}

type ListPositionsData struct {
	// Account unique identifier.
	AccountID           string                  `json:"account_id"`
	AvailableForTrading string                  `json:"available_for_trading"`
	Instrument          ListPositionsInstrument `json:"instrument"`
	LockedForTrading    string                  `json:"locked_for_trading"`
	PendingSettlement   string                  `json:"pending_settlement"`
	Quantity            string                  `json:"quantity"`
}

func (o *ListPositionsData) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListPositionsData) GetAvailableForTrading() string {
	if o == nil {
		return ""
	}
	return o.AvailableForTrading
}

func (o *ListPositionsData) GetInstrument() ListPositionsInstrument {
	if o == nil {
		return ListPositionsInstrument{}
	}
	return o.Instrument
}

func (o *ListPositionsData) GetLockedForTrading() string {
	if o == nil {
		return ""
	}
	return o.LockedForTrading
}

func (o *ListPositionsData) GetPendingSettlement() string {
	if o == nil {
		return ""
	}
	return o.PendingSettlement
}

func (o *ListPositionsData) GetQuantity() string {
	if o == nil {
		return ""
	}
	return o.Quantity
}

// ListPositionsOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListPositionsOrder string

const (
	ListPositionsOrderAsc  ListPositionsOrder = "ASC"
	ListPositionsOrderDesc ListPositionsOrder = "DESC"
)

func (e ListPositionsOrder) ToPointer() *ListPositionsOrder {
	return &e
}

func (e *ListPositionsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListPositionsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPositionsOrder: %v", v)
	}
}

type ListPositionsMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListPositionsOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListPositionsMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListPositionsMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListPositionsMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListPositionsMeta) GetOrder() *ListPositionsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListPositionsMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListPositionsMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListPositionsPositionsListResponse - Response
type ListPositionsPositionsListResponse struct {
	Data []ListPositionsData `json:"data"`
	Meta ListPositionsMeta   `json:"meta"`
}

func (o *ListPositionsPositionsListResponse) GetData() []ListPositionsData {
	if o == nil {
		return []ListPositionsData{}
	}
	return o.Data
}

func (o *ListPositionsPositionsListResponse) GetMeta() ListPositionsMeta {
	if o == nil {
		return ListPositionsMeta{}
	}
	return o.Meta
}

type ListPositionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Response
	PositionsListResponse *ListPositionsPositionsListResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListPositionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListPositionsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListPositionsResponse) GetPositionsListResponse() *ListPositionsPositionsListResponse {
	if o == nil {
		return nil
	}
	return o.PositionsListResponse
}

func (o *ListPositionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListPositionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
