// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListAccountOrdersQueryParamOrder - Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
type ListAccountOrdersQueryParamOrder string

const (
	ListAccountOrdersQueryParamOrderAsc  ListAccountOrdersQueryParamOrder = "ASC"
	ListAccountOrdersQueryParamOrderDesc ListAccountOrdersQueryParamOrder = "DESC"
)

func (e ListAccountOrdersQueryParamOrder) ToPointer() *ListAccountOrdersQueryParamOrder {
	return &e
}

func (e *ListAccountOrdersQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListAccountOrdersQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersQueryParamOrder: %v", v)
	}
}

type ListAccountOrdersRequest struct {
	AccountID string `pathParam:"style=simple,explode=false,name=account_id"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *ListAccountOrdersQueryParamOrder `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListAccountOrdersRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountOrdersRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountOrdersRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListAccountOrdersRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAccountOrdersRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListAccountOrdersRequest) GetOrder() *ListAccountOrdersQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListAccountOrdersRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListAccountOrdersRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListAccountOrdersRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListAccountOrdersRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// ListAccountOrdersCancellationReason - Reason for Order cancellation. The field is present in case the Order has a status of CANCELLED.
// * CANCELLED_BY_CLIENT -
// * CANCELLED_BY_UPVEST_OPERATIONS -
// * CANCELLED_BY_TRADING_PARTNER -
// * CANCELLED_BY_UPVEST_PLATFORM -
type ListAccountOrdersCancellationReason string

const (
	ListAccountOrdersCancellationReasonCancelledByClient           ListAccountOrdersCancellationReason = "CANCELLED_BY_CLIENT"
	ListAccountOrdersCancellationReasonCancelledByUpvestOperations ListAccountOrdersCancellationReason = "CANCELLED_BY_UPVEST_OPERATIONS"
	ListAccountOrdersCancellationReasonCancelledByTradingPartner   ListAccountOrdersCancellationReason = "CANCELLED_BY_TRADING_PARTNER"
	ListAccountOrdersCancellationReasonCancelledByUpvestPlatform   ListAccountOrdersCancellationReason = "CANCELLED_BY_UPVEST_PLATFORM"
)

func (e ListAccountOrdersCancellationReason) ToPointer() *ListAccountOrdersCancellationReason {
	return &e
}

func (e *ListAccountOrdersCancellationReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CANCELLED_BY_CLIENT":
		fallthrough
	case "CANCELLED_BY_UPVEST_OPERATIONS":
		fallthrough
	case "CANCELLED_BY_TRADING_PARTNER":
		fallthrough
	case "CANCELLED_BY_UPVEST_PLATFORM":
		*e = ListAccountOrdersCancellationReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersCancellationReason: %v", v)
	}
}

// ListAccountOrdersCurrency - The currency for the order.
type ListAccountOrdersCurrency string

const (
	ListAccountOrdersCurrencyEur ListAccountOrdersCurrency = "EUR"
)

func (e ListAccountOrdersCurrency) ToPointer() *ListAccountOrdersCurrency {
	return &e
}

func (e *ListAccountOrdersCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = ListAccountOrdersCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersCurrency: %v", v)
	}
}

// ListAccountOrdersExecutionFlow - Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
// * STRAIGHT_THROUGH -
// * BLOCK -
type ListAccountOrdersExecutionFlow string

const (
	ListAccountOrdersExecutionFlowStraightThrough ListAccountOrdersExecutionFlow = "STRAIGHT_THROUGH"
	ListAccountOrdersExecutionFlowBlock           ListAccountOrdersExecutionFlow = "BLOCK"
)

func (e ListAccountOrdersExecutionFlow) ToPointer() *ListAccountOrdersExecutionFlow {
	return &e
}

func (e *ListAccountOrdersExecutionFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STRAIGHT_THROUGH":
		fallthrough
	case "BLOCK":
		*e = ListAccountOrdersExecutionFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersExecutionFlow: %v", v)
	}
}

// ListAccountOrdersOrdersCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type ListAccountOrdersOrdersCurrency string

const (
	ListAccountOrdersOrdersCurrencyEur ListAccountOrdersOrdersCurrency = "EUR"
)

func (e ListAccountOrdersOrdersCurrency) ToPointer() *ListAccountOrdersOrdersCurrency {
	return &e
}

func (e *ListAccountOrdersOrdersCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = ListAccountOrdersOrdersCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersOrdersCurrency: %v", v)
	}
}

// ListAccountOrdersOrdersSide - Side of the execution.
// * BUY -
// * SELL -
type ListAccountOrdersOrdersSide string

const (
	ListAccountOrdersOrdersSideBuy  ListAccountOrdersOrdersSide = "BUY"
	ListAccountOrdersOrdersSideSell ListAccountOrdersOrdersSide = "SELL"
)

func (e ListAccountOrdersOrdersSide) ToPointer() *ListAccountOrdersOrdersSide {
	return &e
}

func (e *ListAccountOrdersOrdersSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = ListAccountOrdersOrdersSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersOrdersSide: %v", v)
	}
}

// ListAccountOrdersOrdersStatus - Execution status of the Execution.
// * FILLED -
// * SETTLED -
// * CANCELLED -
type ListAccountOrdersOrdersStatus string

const (
	ListAccountOrdersOrdersStatusFilled    ListAccountOrdersOrdersStatus = "FILLED"
	ListAccountOrdersOrdersStatusSettled   ListAccountOrdersOrdersStatus = "SETTLED"
	ListAccountOrdersOrdersStatusCancelled ListAccountOrdersOrdersStatus = "CANCELLED"
)

func (e ListAccountOrdersOrdersStatus) ToPointer() *ListAccountOrdersOrdersStatus {
	return &e
}

func (e *ListAccountOrdersOrdersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FILLED":
		fallthrough
	case "SETTLED":
		fallthrough
	case "CANCELLED":
		*e = ListAccountOrdersOrdersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersOrdersStatus: %v", v)
	}
}

// ListAccountOrdersType - Tax type
// * TOTAL -
type ListAccountOrdersType string

const (
	ListAccountOrdersTypeTotal ListAccountOrdersType = "TOTAL"
)

func (e ListAccountOrdersType) ToPointer() *ListAccountOrdersType {
	return &e
}

func (e *ListAccountOrdersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TOTAL":
		*e = ListAccountOrdersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersType: %v", v)
	}
}

type ListAccountOrdersTax struct {
	Amount string `json:"amount"`
	// Tax type
	// * TOTAL -
	Type *ListAccountOrdersType `default:"TOTAL" json:"type"`
}

func (l ListAccountOrdersTax) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountOrdersTax) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountOrdersTax) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *ListAccountOrdersTax) GetType() *ListAccountOrdersType {
	if o == nil {
		return nil
	}
	return o.Type
}

type ListAccountOrdersOrderExecution struct {
	CashAmount string `json:"cash_amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency       *ListAccountOrdersOrdersCurrency `default:"EUR" json:"currency"`
	ID             string                           `json:"id"`
	OrderID        string                           `json:"order_id"`
	Price          string                           `json:"price"`
	SettlementDate *string                          `json:"settlement_date,omitempty"`
	ShareQuantity  string                           `json:"share_quantity"`
	// Side of the execution.
	// * BUY -
	// * SELL -
	Side ListAccountOrdersOrdersSide `json:"side"`
	// Execution status of the Execution.
	// * FILLED -
	// * SETTLED -
	// * CANCELLED -
	Status          ListAccountOrdersOrdersStatus `json:"status"`
	Taxes           []ListAccountOrdersTax        `json:"taxes"`
	TransactionTime time.Time                     `json:"transaction_time"`
}

func (l ListAccountOrdersOrderExecution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountOrdersOrderExecution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountOrdersOrderExecution) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *ListAccountOrdersOrderExecution) GetCurrency() *ListAccountOrdersOrdersCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ListAccountOrdersOrderExecution) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListAccountOrdersOrderExecution) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

func (o *ListAccountOrdersOrderExecution) GetPrice() string {
	if o == nil {
		return ""
	}
	return o.Price
}

func (o *ListAccountOrdersOrderExecution) GetSettlementDate() *string {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *ListAccountOrdersOrderExecution) GetShareQuantity() string {
	if o == nil {
		return ""
	}
	return o.ShareQuantity
}

func (o *ListAccountOrdersOrderExecution) GetSide() ListAccountOrdersOrdersSide {
	if o == nil {
		return ListAccountOrdersOrdersSide("")
	}
	return o.Side
}

func (o *ListAccountOrdersOrderExecution) GetStatus() ListAccountOrdersOrdersStatus {
	if o == nil {
		return ListAccountOrdersOrdersStatus("")
	}
	return o.Status
}

func (o *ListAccountOrdersOrderExecution) GetTaxes() []ListAccountOrdersTax {
	if o == nil {
		return []ListAccountOrdersTax{}
	}
	return o.Taxes
}

func (o *ListAccountOrdersOrderExecution) GetTransactionTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TransactionTime
}

// ListAccountOrdersInitiationFlow - Initiation flow used during order creation, i.e. what triggered the order.
// * API -
// * PORTFOLIO -
// * CASH_DIVIDEND_REINVESTMENT -
// * PORTFOLIO_REBALANCING -
// * SELL_TO_COVER_FEES -
// * SELL_TO_COVER_TAXES -
// * ACCOUNT_LIQUIDATION -
// * UPVEST_OPERATIONS -
type ListAccountOrdersInitiationFlow string

const (
	ListAccountOrdersInitiationFlowAPI                      ListAccountOrdersInitiationFlow = "API"
	ListAccountOrdersInitiationFlowPortfolio                ListAccountOrdersInitiationFlow = "PORTFOLIO"
	ListAccountOrdersInitiationFlowCashDividendReinvestment ListAccountOrdersInitiationFlow = "CASH_DIVIDEND_REINVESTMENT"
	ListAccountOrdersInitiationFlowPortfolioRebalancing     ListAccountOrdersInitiationFlow = "PORTFOLIO_REBALANCING"
	ListAccountOrdersInitiationFlowSellToCoverFees          ListAccountOrdersInitiationFlow = "SELL_TO_COVER_FEES"
	ListAccountOrdersInitiationFlowSellToCoverTaxes         ListAccountOrdersInitiationFlow = "SELL_TO_COVER_TAXES"
	ListAccountOrdersInitiationFlowAccountLiquidation       ListAccountOrdersInitiationFlow = "ACCOUNT_LIQUIDATION"
	ListAccountOrdersInitiationFlowUpvestOperations         ListAccountOrdersInitiationFlow = "UPVEST_OPERATIONS"
)

func (e ListAccountOrdersInitiationFlow) ToPointer() *ListAccountOrdersInitiationFlow {
	return &e
}

func (e *ListAccountOrdersInitiationFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API":
		fallthrough
	case "PORTFOLIO":
		fallthrough
	case "CASH_DIVIDEND_REINVESTMENT":
		fallthrough
	case "PORTFOLIO_REBALANCING":
		fallthrough
	case "SELL_TO_COVER_FEES":
		fallthrough
	case "SELL_TO_COVER_TAXES":
		fallthrough
	case "ACCOUNT_LIQUIDATION":
		fallthrough
	case "UPVEST_OPERATIONS":
		*e = ListAccountOrdersInitiationFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersInitiationFlow: %v", v)
	}
}

// ListAccountOrdersInstrumentIDType - The type of the ID used in the request.
// * ISIN -
type ListAccountOrdersInstrumentIDType string

const (
	ListAccountOrdersInstrumentIDTypeIsin ListAccountOrdersInstrumentIDType = "ISIN"
)

func (e ListAccountOrdersInstrumentIDType) ToPointer() *ListAccountOrdersInstrumentIDType {
	return &e
}

func (e *ListAccountOrdersInstrumentIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ISIN":
		*e = ListAccountOrdersInstrumentIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersInstrumentIDType: %v", v)
	}
}

// ListAccountOrdersOrderType - Type of the order.
// * MARKET -
// * LIMIT -
// * STOP -
type ListAccountOrdersOrderType string

const (
	ListAccountOrdersOrderTypeMarket ListAccountOrdersOrderType = "MARKET"
	ListAccountOrdersOrderTypeLimit  ListAccountOrdersOrderType = "LIMIT"
	ListAccountOrdersOrderTypeStop   ListAccountOrdersOrderType = "STOP"
)

func (e ListAccountOrdersOrderType) ToPointer() *ListAccountOrdersOrderType {
	return &e
}

func (e *ListAccountOrdersOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARKET":
		fallthrough
	case "LIMIT":
		fallthrough
	case "STOP":
		*e = ListAccountOrdersOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersOrderType: %v", v)
	}
}

// ListAccountOrdersSide - Side of the order.
// * BUY -
// * SELL -
type ListAccountOrdersSide string

const (
	ListAccountOrdersSideBuy  ListAccountOrdersSide = "BUY"
	ListAccountOrdersSideSell ListAccountOrdersSide = "SELL"
)

func (e ListAccountOrdersSide) ToPointer() *ListAccountOrdersSide {
	return &e
}

func (e *ListAccountOrdersSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = ListAccountOrdersSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersSide: %v", v)
	}
}

// ListAccountOrdersStatus - The execution status of the order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type ListAccountOrdersStatus string

const (
	ListAccountOrdersStatusNew        ListAccountOrdersStatus = "NEW"
	ListAccountOrdersStatusProcessing ListAccountOrdersStatus = "PROCESSING"
	ListAccountOrdersStatusFilled     ListAccountOrdersStatus = "FILLED"
	ListAccountOrdersStatusCancelled  ListAccountOrdersStatus = "CANCELLED"
)

func (e ListAccountOrdersStatus) ToPointer() *ListAccountOrdersStatus {
	return &e
}

func (e *ListAccountOrdersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = ListAccountOrdersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersStatus: %v", v)
	}
}

type ListAccountOrdersOrder struct {
	// The ID of the account that owns the order
	AccountID string `json:"account_id"`
	// Reason for Order cancellation. The field is present in case the Order has a status of CANCELLED.
	// * CANCELLED_BY_CLIENT -
	// * CANCELLED_BY_UPVEST_OPERATIONS -
	// * CANCELLED_BY_TRADING_PARTNER -
	// * CANCELLED_BY_UPVEST_PLATFORM -
	CancellationReason *ListAccountOrdersCancellationReason `json:"cancellation_reason,omitempty"`
	CashAmount         string                               `json:"cash_amount"`
	// An ID provided by the client
	ClientReference string `json:"client_reference"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time                  `json:"created_at"`
	Currency  *ListAccountOrdersCurrency `default:"EUR" json:"currency"`
	// Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
	// * STRAIGHT_THROUGH -
	// * BLOCK -
	ExecutionFlow *ListAccountOrdersExecutionFlow `json:"execution_flow,omitempty"`
	// Order executions associated with this order
	Executions []ListAccountOrdersOrderExecution `json:"executions"`
	ExpiryDate *string                           `json:"expiry_date,omitempty"`
	Fee        string                            `json:"fee"`
	ID         string                            `json:"id"`
	// Initiation flow used during order creation, i.e. what triggered the order.
	// * API -
	// * PORTFOLIO -
	// * CASH_DIVIDEND_REINVESTMENT -
	// * PORTFOLIO_REBALANCING -
	// * SELL_TO_COVER_FEES -
	// * SELL_TO_COVER_TAXES -
	// * ACCOUNT_LIQUIDATION -
	// * UPVEST_OPERATIONS -
	InitiationFlow ListAccountOrdersInitiationFlow `json:"initiation_flow"`
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	InstrumentID string `json:"instrument_id"`
	// The type of the ID used in the request.
	// * ISIN -
	InstrumentIDType *ListAccountOrdersInstrumentIDType `default:"ISIN" json:"instrument_id_type"`
	LimitPrice       *string                            `json:"limit_price,omitempty"`
	// Type of the order.
	// * MARKET -
	// * LIMIT -
	// * STOP -
	OrderType ListAccountOrdersOrderType `json:"order_type"`
	Quantity  string                     `json:"quantity"`
	// Side of the order.
	// * BUY -
	// * SELL -
	Side ListAccountOrdersSide `json:"side"`
	// The execution status of the order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status    ListAccountOrdersStatus `json:"status"`
	StopPrice *string                 `json:"stop_price,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// The ID of the user
	UserID string `json:"user_id"`
	// Only applicable if the user has failed the instrument fit check for the instrument type being ordered. True if the user has acknowledged their willingness to trade.
	UserInstrumentFitAcknowledgement *bool `json:"user_instrument_fit_acknowledgement,omitempty"`
}

func (l ListAccountOrdersOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAccountOrdersOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAccountOrdersOrder) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListAccountOrdersOrder) GetCancellationReason() *ListAccountOrdersCancellationReason {
	if o == nil {
		return nil
	}
	return o.CancellationReason
}

func (o *ListAccountOrdersOrder) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *ListAccountOrdersOrder) GetClientReference() string {
	if o == nil {
		return ""
	}
	return o.ClientReference
}

func (o *ListAccountOrdersOrder) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListAccountOrdersOrder) GetCurrency() *ListAccountOrdersCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ListAccountOrdersOrder) GetExecutionFlow() *ListAccountOrdersExecutionFlow {
	if o == nil {
		return nil
	}
	return o.ExecutionFlow
}

func (o *ListAccountOrdersOrder) GetExecutions() []ListAccountOrdersOrderExecution {
	if o == nil {
		return []ListAccountOrdersOrderExecution{}
	}
	return o.Executions
}

func (o *ListAccountOrdersOrder) GetExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.ExpiryDate
}

func (o *ListAccountOrdersOrder) GetFee() string {
	if o == nil {
		return ""
	}
	return o.Fee
}

func (o *ListAccountOrdersOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListAccountOrdersOrder) GetInitiationFlow() ListAccountOrdersInitiationFlow {
	if o == nil {
		return ListAccountOrdersInitiationFlow("")
	}
	return o.InitiationFlow
}

func (o *ListAccountOrdersOrder) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *ListAccountOrdersOrder) GetInstrumentIDType() *ListAccountOrdersInstrumentIDType {
	if o == nil {
		return nil
	}
	return o.InstrumentIDType
}

func (o *ListAccountOrdersOrder) GetLimitPrice() *string {
	if o == nil {
		return nil
	}
	return o.LimitPrice
}

func (o *ListAccountOrdersOrder) GetOrderType() ListAccountOrdersOrderType {
	if o == nil {
		return ListAccountOrdersOrderType("")
	}
	return o.OrderType
}

func (o *ListAccountOrdersOrder) GetQuantity() string {
	if o == nil {
		return ""
	}
	return o.Quantity
}

func (o *ListAccountOrdersOrder) GetSide() ListAccountOrdersSide {
	if o == nil {
		return ListAccountOrdersSide("")
	}
	return o.Side
}

func (o *ListAccountOrdersOrder) GetStatus() ListAccountOrdersStatus {
	if o == nil {
		return ListAccountOrdersStatus("")
	}
	return o.Status
}

func (o *ListAccountOrdersOrder) GetStopPrice() *string {
	if o == nil {
		return nil
	}
	return o.StopPrice
}

func (o *ListAccountOrdersOrder) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ListAccountOrdersOrder) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *ListAccountOrdersOrder) GetUserInstrumentFitAcknowledgement() *bool {
	if o == nil {
		return nil
	}
	return o.UserInstrumentFitAcknowledgement
}

// ListAccountOrdersOrdersOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListAccountOrdersOrdersOrder string

const (
	ListAccountOrdersOrdersOrderAsc  ListAccountOrdersOrdersOrder = "ASC"
	ListAccountOrdersOrdersOrderDesc ListAccountOrdersOrdersOrder = "DESC"
)

func (e ListAccountOrdersOrdersOrder) ToPointer() *ListAccountOrdersOrdersOrder {
	return &e
}

func (e *ListAccountOrdersOrdersOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListAccountOrdersOrdersOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountOrdersOrdersOrder: %v", v)
	}
}

type ListAccountOrdersMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListAccountOrdersOrdersOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListAccountOrdersMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListAccountOrdersMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListAccountOrdersMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListAccountOrdersMeta) GetOrder() *ListAccountOrdersOrdersOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListAccountOrdersMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListAccountOrdersMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListAccountOrdersOrdersListResponse - OK
type ListAccountOrdersOrdersListResponse struct {
	Data []ListAccountOrdersOrder `json:"data"`
	Meta ListAccountOrdersMeta    `json:"meta"`
}

func (o *ListAccountOrdersOrdersListResponse) GetData() []ListAccountOrdersOrder {
	if o == nil {
		return []ListAccountOrdersOrder{}
	}
	return o.Data
}

func (o *ListAccountOrdersOrdersListResponse) GetMeta() ListAccountOrdersMeta {
	if o == nil {
		return ListAccountOrdersMeta{}
	}
	return o.Meta
}

type ListAccountOrdersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// OK
	OrdersListResponse *ListAccountOrdersOrdersListResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListAccountOrdersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListAccountOrdersResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListAccountOrdersResponse) GetOrdersListResponse() *ListAccountOrdersOrdersListResponse {
	if o == nil {
		return nil
	}
	return o.OrdersListResponse
}

func (o *ListAccountOrdersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListAccountOrdersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
