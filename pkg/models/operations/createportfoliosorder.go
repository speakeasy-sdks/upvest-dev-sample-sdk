// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency string

const (
	CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrencyEur CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency = "EUR"
)

func (e CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency) ToPointer() *CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency {
	return &e
}

func (e *CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency: %v", v)
	}
}

// CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide - Side of the portfolio order.
// * BUY -
// * SELL -
type CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide string

const (
	CreatePortfoliosOrderPortfoliosOrderPlaceRequestSideBuy  CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide = "BUY"
	CreatePortfoliosOrderPortfoliosOrderPlaceRequestSideSell CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide = "SELL"
)

func (e CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide) ToPointer() *CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide {
	return &e
}

func (e *CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide: %v", v)
	}
}

type CreatePortfoliosOrderPortfoliosOrderPlaceRequest struct {
	// Account unique identifier.
	AccountID  string `json:"account_id"`
	CashAmount string `json:"cash_amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency `default:"EUR" json:"currency"`
	// Cash amount is post-tax value
	PostTax *bool `default:"false" json:"post_tax"`
	// Side of the portfolio order.
	// * BUY -
	// * SELL -
	Side CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide `json:"side"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (c CreatePortfoliosOrderPortfoliosOrderPlaceRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePortfoliosOrderPortfoliosOrderPlaceRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePortfoliosOrderPortfoliosOrderPlaceRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreatePortfoliosOrderPortfoliosOrderPlaceRequest) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *CreatePortfoliosOrderPortfoliosOrderPlaceRequest) GetCurrency() *CreatePortfoliosOrderPortfoliosOrderPlaceRequestCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreatePortfoliosOrderPortfoliosOrderPlaceRequest) GetPostTax() *bool {
	if o == nil {
		return nil
	}
	return o.PostTax
}

func (o *CreatePortfoliosOrderPortfoliosOrderPlaceRequest) GetSide() CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide {
	if o == nil {
		return CreatePortfoliosOrderPortfoliosOrderPlaceRequestSide("")
	}
	return o.Side
}

func (o *CreatePortfoliosOrderPortfoliosOrderPlaceRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type CreatePortfoliosOrderRequest struct {
	RequestBody *CreatePortfoliosOrderPortfoliosOrderPlaceRequest `request:"mediaType=application/json"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (c CreatePortfoliosOrderRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePortfoliosOrderRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePortfoliosOrderRequest) GetRequestBody() *CreatePortfoliosOrderPortfoliosOrderPlaceRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreatePortfoliosOrderRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *CreatePortfoliosOrderRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *CreatePortfoliosOrderRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *CreatePortfoliosOrderRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *CreatePortfoliosOrderRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// CreatePortfoliosOrderPortfoliosOrderCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type CreatePortfoliosOrderPortfoliosOrderCurrency string

const (
	CreatePortfoliosOrderPortfoliosOrderCurrencyEur CreatePortfoliosOrderPortfoliosOrderCurrency = "EUR"
)

func (e CreatePortfoliosOrderPortfoliosOrderCurrency) ToPointer() *CreatePortfoliosOrderPortfoliosOrderCurrency {
	return &e
}

func (e *CreatePortfoliosOrderPortfoliosOrderCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = CreatePortfoliosOrderPortfoliosOrderCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortfoliosOrderPortfoliosOrderCurrency: %v", v)
	}
}

// CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide - Side of the portfolio order.
// * BUY -
// * SELL -
type CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide string

const (
	CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSideBuy  CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide = "BUY"
	CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSideSell CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide = "SELL"
)

func (e CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide) ToPointer() *CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide {
	return &e
}

func (e *CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide: %v", v)
	}
}

// CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus - The execution status of the order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus string

const (
	CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatusNew        CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus = "NEW"
	CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatusProcessing CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus = "PROCESSING"
	CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatusFilled     CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus = "FILLED"
	CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatusCancelled  CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus = "CANCELLED"
)

func (e CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus) ToPointer() *CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus {
	return &e
}

func (e *CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus: %v", v)
	}
}

type CreatePortfoliosOrderPortfoliosOrderPortfoliosOrder struct {
	ID string `json:"id"`
	// Side of the portfolio order.
	// * BUY -
	// * SELL -
	Side CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide `json:"side"`
	// The execution status of the order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus `json:"status"`
}

func (o *CreatePortfoliosOrderPortfoliosOrderPortfoliosOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePortfoliosOrderPortfoliosOrderPortfoliosOrder) GetSide() CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide {
	if o == nil {
		return CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderSide("")
	}
	return o.Side
}

func (o *CreatePortfoliosOrderPortfoliosOrderPortfoliosOrder) GetStatus() CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus {
	if o == nil {
		return CreatePortfoliosOrderPortfoliosOrderPortfoliosOrderStatus("")
	}
	return o.Status
}

// CreatePortfoliosOrderPortfoliosOrderStatus - Execution status of the Portfolio Order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * SETTLED -
// * CANCELLED -
type CreatePortfoliosOrderPortfoliosOrderStatus string

const (
	CreatePortfoliosOrderPortfoliosOrderStatusNew        CreatePortfoliosOrderPortfoliosOrderStatus = "NEW"
	CreatePortfoliosOrderPortfoliosOrderStatusProcessing CreatePortfoliosOrderPortfoliosOrderStatus = "PROCESSING"
	CreatePortfoliosOrderPortfoliosOrderStatusFilled     CreatePortfoliosOrderPortfoliosOrderStatus = "FILLED"
	CreatePortfoliosOrderPortfoliosOrderStatusSettled    CreatePortfoliosOrderPortfoliosOrderStatus = "SETTLED"
	CreatePortfoliosOrderPortfoliosOrderStatusCancelled  CreatePortfoliosOrderPortfoliosOrderStatus = "CANCELLED"
)

func (e CreatePortfoliosOrderPortfoliosOrderStatus) ToPointer() *CreatePortfoliosOrderPortfoliosOrderStatus {
	return &e
}

func (e *CreatePortfoliosOrderPortfoliosOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "SETTLED":
		fallthrough
	case "CANCELLED":
		*e = CreatePortfoliosOrderPortfoliosOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortfoliosOrderPortfoliosOrderStatus: %v", v)
	}
}

// CreatePortfoliosOrderPortfoliosOrderType - Type of the Portfolio Order.
// * BUY -
// * SELL -
// * REBALANCING -
type CreatePortfoliosOrderPortfoliosOrderType string

const (
	CreatePortfoliosOrderPortfoliosOrderTypeBuy         CreatePortfoliosOrderPortfoliosOrderType = "BUY"
	CreatePortfoliosOrderPortfoliosOrderTypeSell        CreatePortfoliosOrderPortfoliosOrderType = "SELL"
	CreatePortfoliosOrderPortfoliosOrderTypeRebalancing CreatePortfoliosOrderPortfoliosOrderType = "REBALANCING"
)

func (e CreatePortfoliosOrderPortfoliosOrderType) ToPointer() *CreatePortfoliosOrderPortfoliosOrderType {
	return &e
}

func (e *CreatePortfoliosOrderPortfoliosOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		fallthrough
	case "REBALANCING":
		*e = CreatePortfoliosOrderPortfoliosOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortfoliosOrderPortfoliosOrderType: %v", v)
	}
}

// CreatePortfoliosOrderPortfoliosOrder - Portfolios order
type CreatePortfoliosOrderPortfoliosOrder struct {
	// Account unique identifier.
	AccountID    string  `json:"account_id"`
	AllocationID *string `json:"allocation_id,omitempty"`
	CashAmount   string  `json:"cash_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *CreatePortfoliosOrderPortfoliosOrderCurrency `default:"EUR" json:"currency"`
	ID       string                                        `json:"id"`
	// Orders associated with this portfolio order
	Orders []CreatePortfoliosOrderPortfoliosOrderPortfoliosOrder `json:"orders"`
	// Cash amount is post-tax value
	PostTax *bool `default:"false" json:"post_tax"`
	// Execution status of the Portfolio Order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * SETTLED -
	// * CANCELLED -
	Status CreatePortfoliosOrderPortfoliosOrderStatus `json:"status"`
	// Type of the Portfolio Order.
	// * BUY -
	// * SELL -
	// * REBALANCING -
	Type *CreatePortfoliosOrderPortfoliosOrderType `json:"type,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// User unique identifier.
	UserID *string `json:"user_id,omitempty"`
}

func (c CreatePortfoliosOrderPortfoliosOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePortfoliosOrderPortfoliosOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.AllocationID
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetCurrency() *CreatePortfoliosOrderPortfoliosOrderCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetOrders() []CreatePortfoliosOrderPortfoliosOrderPortfoliosOrder {
	if o == nil {
		return []CreatePortfoliosOrderPortfoliosOrderPortfoliosOrder{}
	}
	return o.Orders
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetPostTax() *bool {
	if o == nil {
		return nil
	}
	return o.PostTax
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetStatus() CreatePortfoliosOrderPortfoliosOrderStatus {
	if o == nil {
		return CreatePortfoliosOrderPortfoliosOrderStatus("")
	}
	return o.Status
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetType() *CreatePortfoliosOrderPortfoliosOrderType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *CreatePortfoliosOrderPortfoliosOrder) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type CreatePortfoliosOrderResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Portfolios order
	PortfoliosOrder *CreatePortfoliosOrderPortfoliosOrder
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreatePortfoliosOrderResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreatePortfoliosOrderResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreatePortfoliosOrderResponse) GetPortfoliosOrder() *CreatePortfoliosOrderPortfoliosOrder {
	if o == nil {
		return nil
	}
	return o.PortfoliosOrder
}

func (o *CreatePortfoliosOrderResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreatePortfoliosOrderResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
