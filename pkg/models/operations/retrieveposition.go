// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
)

type RetrievePositionRequest struct {
	AccountID    string `pathParam:"style=simple,explode=false,name=account_id"`
	InstrumentID string `pathParam:"style=simple,explode=false,name=instrument_id"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (r RetrievePositionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrievePositionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrievePositionRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *RetrievePositionRequest) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *RetrievePositionRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrievePositionRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrievePositionRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrievePositionRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

type Instrument struct {
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	Isin *string `json:"isin,omitempty"`
	// Instrument unique identifier.
	UUID string `json:"uuid"`
}

func (o *Instrument) GetIsin() *string {
	if o == nil {
		return nil
	}
	return o.Isin
}

func (o *Instrument) GetUUID() string {
	if o == nil {
		return ""
	}
	return o.UUID
}

// RetrievePositionResponseBody - Response
type RetrievePositionResponseBody struct {
	// Account unique identifier.
	AccountID           string     `json:"account_id"`
	AvailableForTrading string     `json:"available_for_trading"`
	Instrument          Instrument `json:"instrument"`
	LockedForTrading    string     `json:"locked_for_trading"`
	PendingSettlement   string     `json:"pending_settlement"`
	Quantity            string     `json:"quantity"`
}

func (o *RetrievePositionResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *RetrievePositionResponseBody) GetAvailableForTrading() string {
	if o == nil {
		return ""
	}
	return o.AvailableForTrading
}

func (o *RetrievePositionResponseBody) GetInstrument() Instrument {
	if o == nil {
		return Instrument{}
	}
	return o.Instrument
}

func (o *RetrievePositionResponseBody) GetLockedForTrading() string {
	if o == nil {
		return ""
	}
	return o.LockedForTrading
}

func (o *RetrievePositionResponseBody) GetPendingSettlement() string {
	if o == nil {
		return ""
	}
	return o.PendingSettlement
}

func (o *RetrievePositionResponseBody) GetQuantity() string {
	if o == nil {
		return ""
	}
	return o.Quantity
}

type RetrievePositionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Response
	Object *RetrievePositionResponseBody
}

func (o *RetrievePositionResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrievePositionResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *RetrievePositionResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrievePositionResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RetrievePositionResponse) GetObject() *RetrievePositionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
