// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveAccountLiquidationRequest struct {
	AccountID            string `pathParam:"style=simple,explode=false,name=account_id"`
	AccountLiquidationID string `pathParam:"style=simple,explode=false,name=account_liquidation_id"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (r RetrieveAccountLiquidationRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveAccountLiquidationRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveAccountLiquidationRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *RetrieveAccountLiquidationRequest) GetAccountLiquidationID() string {
	if o == nil {
		return ""
	}
	return o.AccountLiquidationID
}

func (o *RetrieveAccountLiquidationRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveAccountLiquidationRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveAccountLiquidationRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveAccountLiquidationRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// RetrieveAccountLiquidationCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type RetrieveAccountLiquidationCurrency string

const (
	RetrieveAccountLiquidationCurrencyEur RetrieveAccountLiquidationCurrency = "EUR"
)

func (e RetrieveAccountLiquidationCurrency) ToPointer() *RetrieveAccountLiquidationCurrency {
	return &e
}

func (e *RetrieveAccountLiquidationCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = RetrieveAccountLiquidationCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveAccountLiquidationCurrency: %v", v)
	}
}

// RetrieveAccountLiquidationLiquidationsStatus - Execution status of the Account liquidation order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type RetrieveAccountLiquidationLiquidationsStatus string

const (
	RetrieveAccountLiquidationLiquidationsStatusNew        RetrieveAccountLiquidationLiquidationsStatus = "NEW"
	RetrieveAccountLiquidationLiquidationsStatusProcessing RetrieveAccountLiquidationLiquidationsStatus = "PROCESSING"
	RetrieveAccountLiquidationLiquidationsStatusFilled     RetrieveAccountLiquidationLiquidationsStatus = "FILLED"
	RetrieveAccountLiquidationLiquidationsStatusCancelled  RetrieveAccountLiquidationLiquidationsStatus = "CANCELLED"
)

func (e RetrieveAccountLiquidationLiquidationsStatus) ToPointer() *RetrieveAccountLiquidationLiquidationsStatus {
	return &e
}

func (e *RetrieveAccountLiquidationLiquidationsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = RetrieveAccountLiquidationLiquidationsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveAccountLiquidationLiquidationsStatus: %v", v)
	}
}

type RetrieveAccountLiquidationLiquidationsAccountLiquidation struct {
	ID string `json:"id"`
	// Side of the order.
	// * SELL -
	Side *string `default:"SELL" json:"side"`
	// Execution status of the Account liquidation order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status RetrieveAccountLiquidationLiquidationsStatus `json:"status"`
}

func (r RetrieveAccountLiquidationLiquidationsAccountLiquidation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveAccountLiquidationLiquidationsAccountLiquidation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveAccountLiquidationLiquidationsAccountLiquidation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveAccountLiquidationLiquidationsAccountLiquidation) GetSide() *string {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *RetrieveAccountLiquidationLiquidationsAccountLiquidation) GetStatus() RetrieveAccountLiquidationLiquidationsStatus {
	if o == nil {
		return RetrieveAccountLiquidationLiquidationsStatus("")
	}
	return o.Status
}

// RetrieveAccountLiquidationStatus - Execution status of the Account liquidation.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
// * SETTLED -
type RetrieveAccountLiquidationStatus string

const (
	RetrieveAccountLiquidationStatusNew        RetrieveAccountLiquidationStatus = "NEW"
	RetrieveAccountLiquidationStatusProcessing RetrieveAccountLiquidationStatus = "PROCESSING"
	RetrieveAccountLiquidationStatusFilled     RetrieveAccountLiquidationStatus = "FILLED"
	RetrieveAccountLiquidationStatusCancelled  RetrieveAccountLiquidationStatus = "CANCELLED"
	RetrieveAccountLiquidationStatusSettled    RetrieveAccountLiquidationStatus = "SETTLED"
)

func (e RetrieveAccountLiquidationStatus) ToPointer() *RetrieveAccountLiquidationStatus {
	return &e
}

func (e *RetrieveAccountLiquidationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "SETTLED":
		*e = RetrieveAccountLiquidationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveAccountLiquidationStatus: %v", v)
	}
}

// RetrieveAccountLiquidationAccountLiquidation - Account liquidation object
type RetrieveAccountLiquidationAccountLiquidation struct {
	// Account unique identifier.
	AccountID  string `json:"account_id"`
	CashAmount string `json:"cash_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *RetrieveAccountLiquidationCurrency `default:"EUR" json:"currency"`
	ID       string                              `json:"id"`
	// Position liquidation orders associated with this account liquidation
	Orders []RetrieveAccountLiquidationLiquidationsAccountLiquidation `json:"orders"`
	// Execution status of the Account liquidation.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	// * SETTLED -
	Status RetrieveAccountLiquidationStatus `json:"status"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// User unique identifier.
	UserID *string `json:"user_id,omitempty"`
}

func (r RetrieveAccountLiquidationAccountLiquidation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveAccountLiquidationAccountLiquidation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveAccountLiquidationAccountLiquidation) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *RetrieveAccountLiquidationAccountLiquidation) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *RetrieveAccountLiquidationAccountLiquidation) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveAccountLiquidationAccountLiquidation) GetCurrency() *RetrieveAccountLiquidationCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *RetrieveAccountLiquidationAccountLiquidation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveAccountLiquidationAccountLiquidation) GetOrders() []RetrieveAccountLiquidationLiquidationsAccountLiquidation {
	if o == nil {
		return []RetrieveAccountLiquidationLiquidationsAccountLiquidation{}
	}
	return o.Orders
}

func (o *RetrieveAccountLiquidationAccountLiquidation) GetStatus() RetrieveAccountLiquidationStatus {
	if o == nil {
		return RetrieveAccountLiquidationStatus("")
	}
	return o.Status
}

func (o *RetrieveAccountLiquidationAccountLiquidation) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *RetrieveAccountLiquidationAccountLiquidation) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type RetrieveAccountLiquidationResponse struct {
	// Account liquidation object
	AccountLiquidation *RetrieveAccountLiquidationAccountLiquidation
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *RetrieveAccountLiquidationResponse) GetAccountLiquidation() *RetrieveAccountLiquidationAccountLiquidation {
	if o == nil {
		return nil
	}
	return o.AccountLiquidation
}

func (o *RetrieveAccountLiquidationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveAccountLiquidationResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *RetrieveAccountLiquidationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveAccountLiquidationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
