// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// CreateAccountGroupAccountGroupCreateRequestType - Account group type.
// * PERSONAL - Account group of a person holding assets on their own behalf.
// * LEGAL_ENTITY - Account group of a legal entity holding assets on behalf of their users.
type CreateAccountGroupAccountGroupCreateRequestType string

const (
	CreateAccountGroupAccountGroupCreateRequestTypePersonal    CreateAccountGroupAccountGroupCreateRequestType = "PERSONAL"
	CreateAccountGroupAccountGroupCreateRequestTypeLegalEntity CreateAccountGroupAccountGroupCreateRequestType = "LEGAL_ENTITY"
)

func (e CreateAccountGroupAccountGroupCreateRequestType) ToPointer() *CreateAccountGroupAccountGroupCreateRequestType {
	return &e
}

func (e *CreateAccountGroupAccountGroupCreateRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PERSONAL":
		fallthrough
	case "LEGAL_ENTITY":
		*e = CreateAccountGroupAccountGroupCreateRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccountGroupAccountGroupCreateRequestType: %v", v)
	}
}

type CreateAccountGroupAccountGroupCreateRequest struct {
	// Account group type.
	// * PERSONAL - Account group of a person holding assets on their own behalf.
	// * LEGAL_ENTITY - Account group of a legal entity holding assets on behalf of their users.
	Type CreateAccountGroupAccountGroupCreateRequestType `json:"type"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (o *CreateAccountGroupAccountGroupCreateRequest) GetType() CreateAccountGroupAccountGroupCreateRequestType {
	if o == nil {
		return CreateAccountGroupAccountGroupCreateRequestType("")
	}
	return o.Type
}

func (o *CreateAccountGroupAccountGroupCreateRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type CreateAccountGroupRequest struct {
	RequestBody *CreateAccountGroupAccountGroupCreateRequest `request:"mediaType=application/json"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (c CreateAccountGroupRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAccountGroupRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAccountGroupRequest) GetRequestBody() *CreateAccountGroupAccountGroupCreateRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateAccountGroupRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *CreateAccountGroupRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *CreateAccountGroupRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *CreateAccountGroupRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *CreateAccountGroupRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// CreateAccountGroupAccountGroupStatus - Status of the account group
// * PENDING_APPROVAL - Account group approval is pending - the account group is visible through our API but cannot be acted on.
// * ACTIVE - Account group is active - full functionality of the Investment API is accessible.
// * CLOSING - Account group is closing.
// * CLOSED - Account group is closed.
// * LOCKED - Account group is locked for all actions.
type CreateAccountGroupAccountGroupStatus string

const (
	CreateAccountGroupAccountGroupStatusPendingApproval CreateAccountGroupAccountGroupStatus = "PENDING_APPROVAL"
	CreateAccountGroupAccountGroupStatusActive          CreateAccountGroupAccountGroupStatus = "ACTIVE"
	CreateAccountGroupAccountGroupStatusClosing         CreateAccountGroupAccountGroupStatus = "CLOSING"
	CreateAccountGroupAccountGroupStatusClosed          CreateAccountGroupAccountGroupStatus = "CLOSED"
	CreateAccountGroupAccountGroupStatusLocked          CreateAccountGroupAccountGroupStatus = "LOCKED"
)

func (e CreateAccountGroupAccountGroupStatus) ToPointer() *CreateAccountGroupAccountGroupStatus {
	return &e
}

func (e *CreateAccountGroupAccountGroupStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING_APPROVAL":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "CLOSING":
		fallthrough
	case "CLOSED":
		fallthrough
	case "LOCKED":
		*e = CreateAccountGroupAccountGroupStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccountGroupAccountGroupStatus: %v", v)
	}
}

// CreateAccountGroupAccountGroupType - Account group type.
// * PERSONAL - Account group of a person holding assets on their own behalf.
// * LEGAL_ENTITY - Account group of a legal entity holding assets on behalf of their users.
type CreateAccountGroupAccountGroupType string

const (
	CreateAccountGroupAccountGroupTypePersonal    CreateAccountGroupAccountGroupType = "PERSONAL"
	CreateAccountGroupAccountGroupTypeLegalEntity CreateAccountGroupAccountGroupType = "LEGAL_ENTITY"
)

func (e CreateAccountGroupAccountGroupType) ToPointer() *CreateAccountGroupAccountGroupType {
	return &e
}

func (e *CreateAccountGroupAccountGroupType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PERSONAL":
		fallthrough
	case "LEGAL_ENTITY":
		*e = CreateAccountGroupAccountGroupType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccountGroupAccountGroupType: %v", v)
	}
}

// CreateAccountGroupAccountGroupUsersType - Relation type
// * OWNER -
type CreateAccountGroupAccountGroupUsersType string

const (
	CreateAccountGroupAccountGroupUsersTypeOwner CreateAccountGroupAccountGroupUsersType = "OWNER"
)

func (e CreateAccountGroupAccountGroupUsersType) ToPointer() *CreateAccountGroupAccountGroupUsersType {
	return &e
}

func (e *CreateAccountGroupAccountGroupUsersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		*e = CreateAccountGroupAccountGroupUsersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccountGroupAccountGroupUsersType: %v", v)
	}
}

type CreateAccountGroupAccountGroupUsers struct {
	// User unique identifier.
	ID *string `json:"id,omitempty"`
	// Relation type
	// * OWNER -
	Type *CreateAccountGroupAccountGroupUsersType `default:"OWNER" json:"type"`
}

func (c CreateAccountGroupAccountGroupUsers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAccountGroupAccountGroupUsers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAccountGroupAccountGroupUsers) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateAccountGroupAccountGroupUsers) GetType() *CreateAccountGroupAccountGroupUsersType {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateAccountGroupAccountGroup - Account group created.
type CreateAccountGroupAccountGroup struct {
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Account group unique identifier.
	ID string `json:"id"`
	// Securities account number
	SecuritiesAccountNumber string `json:"securities_account_number"`
	// Status of the account group
	// * PENDING_APPROVAL - Account group approval is pending - the account group is visible through our API but cannot be acted on.
	// * ACTIVE - Account group is active - full functionality of the Investment API is accessible.
	// * CLOSING - Account group is closing.
	// * CLOSED - Account group is closed.
	// * LOCKED - Account group is locked for all actions.
	Status CreateAccountGroupAccountGroupStatus `json:"status"`
	// Account group type.
	// * PERSONAL - Account group of a person holding assets on their own behalf.
	// * LEGAL_ENTITY - Account group of a legal entity holding assets on behalf of their users.
	Type CreateAccountGroupAccountGroupType `json:"type"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time                             `json:"updated_at"`
	Users     []CreateAccountGroupAccountGroupUsers `json:"users"`
}

func (c CreateAccountGroupAccountGroup) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAccountGroupAccountGroup) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAccountGroupAccountGroup) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateAccountGroupAccountGroup) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateAccountGroupAccountGroup) GetSecuritiesAccountNumber() string {
	if o == nil {
		return ""
	}
	return o.SecuritiesAccountNumber
}

func (o *CreateAccountGroupAccountGroup) GetStatus() CreateAccountGroupAccountGroupStatus {
	if o == nil {
		return CreateAccountGroupAccountGroupStatus("")
	}
	return o.Status
}

func (o *CreateAccountGroupAccountGroup) GetType() CreateAccountGroupAccountGroupType {
	if o == nil {
		return CreateAccountGroupAccountGroupType("")
	}
	return o.Type
}

func (o *CreateAccountGroupAccountGroup) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *CreateAccountGroupAccountGroup) GetUsers() []CreateAccountGroupAccountGroupUsers {
	if o == nil {
		return []CreateAccountGroupAccountGroupUsers{}
	}
	return o.Users
}

type CreateAccountGroupResponse struct {
	// Account group created.
	AccountGroup *CreateAccountGroupAccountGroup
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateAccountGroupResponse) GetAccountGroup() *CreateAccountGroupAccountGroup {
	if o == nil {
		return nil
	}
	return o.AccountGroup
}

func (o *CreateAccountGroupResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateAccountGroupResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateAccountGroupResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateAccountGroupResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
