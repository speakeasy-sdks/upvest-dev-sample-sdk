// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type CreateAccountLiquidationAccountLiquidationRequest struct {
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (o *CreateAccountLiquidationAccountLiquidationRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type CreateAccountLiquidationRequest struct {
	RequestBody *CreateAccountLiquidationAccountLiquidationRequest `request:"mediaType=application/json"`
	AccountID   string                                             `pathParam:"style=simple,explode=false,name=account_id"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (c CreateAccountLiquidationRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAccountLiquidationRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAccountLiquidationRequest) GetRequestBody() *CreateAccountLiquidationAccountLiquidationRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateAccountLiquidationRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreateAccountLiquidationRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *CreateAccountLiquidationRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *CreateAccountLiquidationRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *CreateAccountLiquidationRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *CreateAccountLiquidationRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// CreateAccountLiquidationAccountLiquidationCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type CreateAccountLiquidationAccountLiquidationCurrency string

const (
	CreateAccountLiquidationAccountLiquidationCurrencyEur CreateAccountLiquidationAccountLiquidationCurrency = "EUR"
)

func (e CreateAccountLiquidationAccountLiquidationCurrency) ToPointer() *CreateAccountLiquidationAccountLiquidationCurrency {
	return &e
}

func (e *CreateAccountLiquidationAccountLiquidationCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = CreateAccountLiquidationAccountLiquidationCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccountLiquidationAccountLiquidationCurrency: %v", v)
	}
}

// CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus - Execution status of the Account liquidation order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus string

const (
	CreateAccountLiquidationAccountLiquidationAccountLiquidationStatusNew        CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus = "NEW"
	CreateAccountLiquidationAccountLiquidationAccountLiquidationStatusProcessing CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus = "PROCESSING"
	CreateAccountLiquidationAccountLiquidationAccountLiquidationStatusFilled     CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus = "FILLED"
	CreateAccountLiquidationAccountLiquidationAccountLiquidationStatusCancelled  CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus = "CANCELLED"
)

func (e CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus) ToPointer() *CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus {
	return &e
}

func (e *CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus: %v", v)
	}
}

type CreateAccountLiquidationAccountLiquidationAccountLiquidation struct {
	ID string `json:"id"`
	// Side of the order.
	// * SELL -
	Side *string `default:"SELL" json:"side"`
	// Execution status of the Account liquidation order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus `json:"status"`
}

func (c CreateAccountLiquidationAccountLiquidationAccountLiquidation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAccountLiquidationAccountLiquidationAccountLiquidation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAccountLiquidationAccountLiquidationAccountLiquidation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateAccountLiquidationAccountLiquidationAccountLiquidation) GetSide() *string {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *CreateAccountLiquidationAccountLiquidationAccountLiquidation) GetStatus() CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus {
	if o == nil {
		return CreateAccountLiquidationAccountLiquidationAccountLiquidationStatus("")
	}
	return o.Status
}

// CreateAccountLiquidationAccountLiquidationStatus - Execution status of the Account liquidation.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
// * SETTLED -
type CreateAccountLiquidationAccountLiquidationStatus string

const (
	CreateAccountLiquidationAccountLiquidationStatusNew        CreateAccountLiquidationAccountLiquidationStatus = "NEW"
	CreateAccountLiquidationAccountLiquidationStatusProcessing CreateAccountLiquidationAccountLiquidationStatus = "PROCESSING"
	CreateAccountLiquidationAccountLiquidationStatusFilled     CreateAccountLiquidationAccountLiquidationStatus = "FILLED"
	CreateAccountLiquidationAccountLiquidationStatusCancelled  CreateAccountLiquidationAccountLiquidationStatus = "CANCELLED"
	CreateAccountLiquidationAccountLiquidationStatusSettled    CreateAccountLiquidationAccountLiquidationStatus = "SETTLED"
)

func (e CreateAccountLiquidationAccountLiquidationStatus) ToPointer() *CreateAccountLiquidationAccountLiquidationStatus {
	return &e
}

func (e *CreateAccountLiquidationAccountLiquidationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "SETTLED":
		*e = CreateAccountLiquidationAccountLiquidationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccountLiquidationAccountLiquidationStatus: %v", v)
	}
}

// CreateAccountLiquidationAccountLiquidation - Account liquidation object
type CreateAccountLiquidationAccountLiquidation struct {
	// Account unique identifier.
	AccountID  string `json:"account_id"`
	CashAmount string `json:"cash_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *CreateAccountLiquidationAccountLiquidationCurrency `default:"EUR" json:"currency"`
	ID       string                                              `json:"id"`
	// Position liquidation orders associated with this account liquidation
	Orders []CreateAccountLiquidationAccountLiquidationAccountLiquidation `json:"orders"`
	// Execution status of the Account liquidation.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	// * SETTLED -
	Status CreateAccountLiquidationAccountLiquidationStatus `json:"status"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// User unique identifier.
	UserID *string `json:"user_id,omitempty"`
}

func (c CreateAccountLiquidationAccountLiquidation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAccountLiquidationAccountLiquidation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAccountLiquidationAccountLiquidation) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreateAccountLiquidationAccountLiquidation) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *CreateAccountLiquidationAccountLiquidation) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateAccountLiquidationAccountLiquidation) GetCurrency() *CreateAccountLiquidationAccountLiquidationCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreateAccountLiquidationAccountLiquidation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateAccountLiquidationAccountLiquidation) GetOrders() []CreateAccountLiquidationAccountLiquidationAccountLiquidation {
	if o == nil {
		return []CreateAccountLiquidationAccountLiquidationAccountLiquidation{}
	}
	return o.Orders
}

func (o *CreateAccountLiquidationAccountLiquidation) GetStatus() CreateAccountLiquidationAccountLiquidationStatus {
	if o == nil {
		return CreateAccountLiquidationAccountLiquidationStatus("")
	}
	return o.Status
}

func (o *CreateAccountLiquidationAccountLiquidation) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *CreateAccountLiquidationAccountLiquidation) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type CreateAccountLiquidationResponse struct {
	// Account liquidation object
	AccountLiquidation *CreateAccountLiquidationAccountLiquidation
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateAccountLiquidationResponse) GetAccountLiquidation() *CreateAccountLiquidationAccountLiquidation {
	if o == nil {
		return nil
	}
	return o.AccountLiquidation
}

func (o *CreateAccountLiquidationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateAccountLiquidationResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateAccountLiquidationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateAccountLiquidationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
