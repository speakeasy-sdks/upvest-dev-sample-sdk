// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type UpdatePortfoliosConfigurationPortfoliosConfigurationUpdateRequest struct {
	AllocationID *string `json:"allocation_id,omitempty"`
	// List of rebalancing strategy ids
	RebalancingStrategyIds []string `json:"rebalancing_strategy_ids,omitempty"`
}

func (o *UpdatePortfoliosConfigurationPortfoliosConfigurationUpdateRequest) GetAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.AllocationID
}

func (o *UpdatePortfoliosConfigurationPortfoliosConfigurationUpdateRequest) GetRebalancingStrategyIds() []string {
	if o == nil {
		return nil
	}
	return o.RebalancingStrategyIds
}

type UpdatePortfoliosConfigurationRequest struct {
	RequestBody *UpdatePortfoliosConfigurationPortfoliosConfigurationUpdateRequest `request:"mediaType=application/json"`
	AccountID   string                                                             `pathParam:"style=simple,explode=false,name=account_id"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (u UpdatePortfoliosConfigurationRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdatePortfoliosConfigurationRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdatePortfoliosConfigurationRequest) GetRequestBody() *UpdatePortfoliosConfigurationPortfoliosConfigurationUpdateRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UpdatePortfoliosConfigurationRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *UpdatePortfoliosConfigurationRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *UpdatePortfoliosConfigurationRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *UpdatePortfoliosConfigurationRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *UpdatePortfoliosConfigurationRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *UpdatePortfoliosConfigurationRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// UpdatePortfoliosConfigurationPortfoliosConfiguration - Portfolio
type UpdatePortfoliosConfigurationPortfoliosConfiguration struct {
	// Account unique identifier.
	AccountID    string `json:"account_id"`
	AllocationID string `json:"allocation_id"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// List of rebalancing strategy ids
	RebalancingStrategyIds []string `json:"rebalancing_strategy_ids,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (u UpdatePortfoliosConfigurationPortfoliosConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdatePortfoliosConfigurationPortfoliosConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdatePortfoliosConfigurationPortfoliosConfiguration) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *UpdatePortfoliosConfigurationPortfoliosConfiguration) GetAllocationID() string {
	if o == nil {
		return ""
	}
	return o.AllocationID
}

func (o *UpdatePortfoliosConfigurationPortfoliosConfiguration) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UpdatePortfoliosConfigurationPortfoliosConfiguration) GetRebalancingStrategyIds() []string {
	if o == nil {
		return nil
	}
	return o.RebalancingStrategyIds
}

func (o *UpdatePortfoliosConfigurationPortfoliosConfiguration) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type UpdatePortfoliosConfigurationResponse struct {
	// Portfolio
	TwoHundredApplicationJSONPortfoliosConfiguration *UpdatePortfoliosConfigurationPortfoliosConfiguration
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UpdatePortfoliosConfigurationResponse) GetTwoHundredApplicationJSONPortfoliosConfiguration() *UpdatePortfoliosConfigurationPortfoliosConfiguration {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONPortfoliosConfiguration
}

func (o *UpdatePortfoliosConfigurationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdatePortfoliosConfigurationResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *UpdatePortfoliosConfigurationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdatePortfoliosConfigurationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
