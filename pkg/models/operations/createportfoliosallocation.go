// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType - The type of the ID used in the request.
// * ISIN - International Securities Identification Number
// * UPVEST - UPVEST's unique instrument identifier
type CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType string

const (
	CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDTypeIsin   CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType = "ISIN"
	CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDTypeUpvest CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType = "UPVEST"
)

func (e CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType) ToPointer() *CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType {
	return &e
}

func (e *CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ISIN":
		fallthrough
	case "UPVEST":
		*e = CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType: %v", v)
	}
}

type CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocation struct {
	InstrumentID string `json:"instrument_id"`
	// The type of the ID used in the request.
	// * ISIN - International Securities Identification Number
	// * UPVEST - UPVEST's unique instrument identifier
	InstrumentIDType *CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType `default:"ISIN" json:"instrument_id_type"`
	// Instrument allocation weight
	Weight string `json:"weight"`
}

func (c CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocation) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocation) GetInstrumentIDType() *CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocationInstrumentIDType {
	if o == nil {
		return nil
	}
	return o.InstrumentIDType
}

func (o *CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocation) GetWeight() string {
	if o == nil {
		return ""
	}
	return o.Weight
}

type CreatePortfoliosAllocationPortfoliosAllocationCreateRequest struct {
	// List of portfolios allocations
	Allocation []CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocation `json:"allocation"`
	// Allocation name
	Name *string `json:"name,omitempty"`
}

func (o *CreatePortfoliosAllocationPortfoliosAllocationCreateRequest) GetAllocation() []CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocation {
	if o == nil {
		return []CreatePortfoliosAllocationPortfoliosAllocationCreateRequestAllocation{}
	}
	return o.Allocation
}

func (o *CreatePortfoliosAllocationPortfoliosAllocationCreateRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type CreatePortfoliosAllocationRequest struct {
	RequestBody *CreatePortfoliosAllocationPortfoliosAllocationCreateRequest `request:"mediaType=application/json"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (c CreatePortfoliosAllocationRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePortfoliosAllocationRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePortfoliosAllocationRequest) GetRequestBody() *CreatePortfoliosAllocationPortfoliosAllocationCreateRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreatePortfoliosAllocationRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *CreatePortfoliosAllocationRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *CreatePortfoliosAllocationRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *CreatePortfoliosAllocationRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *CreatePortfoliosAllocationRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType - The type of the ID used in the request.
// * ISIN - International Securities Identification Number
// * UPVEST - UPVEST's unique instrument identifier
type CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType string

const (
	CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDTypeIsin   CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType = "ISIN"
	CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDTypeUpvest CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType = "UPVEST"
)

func (e CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType) ToPointer() *CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType {
	return &e
}

func (e *CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ISIN":
		fallthrough
	case "UPVEST":
		*e = CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType: %v", v)
	}
}

type CreatePortfoliosAllocationPortfoliosAllocationAllocation struct {
	InstrumentID string `json:"instrument_id"`
	// The type of the ID used in the request.
	// * ISIN - International Securities Identification Number
	// * UPVEST - UPVEST's unique instrument identifier
	InstrumentIDType *CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType `default:"ISIN" json:"instrument_id_type"`
	// Instrument allocation weight
	Weight string `json:"weight"`
}

func (c CreatePortfoliosAllocationPortfoliosAllocationAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePortfoliosAllocationPortfoliosAllocationAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePortfoliosAllocationPortfoliosAllocationAllocation) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *CreatePortfoliosAllocationPortfoliosAllocationAllocation) GetInstrumentIDType() *CreatePortfoliosAllocationPortfoliosAllocationAllocationInstrumentIDType {
	if o == nil {
		return nil
	}
	return o.InstrumentIDType
}

func (o *CreatePortfoliosAllocationPortfoliosAllocationAllocation) GetWeight() string {
	if o == nil {
		return ""
	}
	return o.Weight
}

// CreatePortfoliosAllocationPortfoliosAllocation - Portfolios allocation
type CreatePortfoliosAllocationPortfoliosAllocation struct {
	// List of portfolios allocations
	Allocation []CreatePortfoliosAllocationPortfoliosAllocationAllocation `json:"allocation"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	ID        string    `json:"id"`
	// Allocation name
	Name string `json:"name"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (c CreatePortfoliosAllocationPortfoliosAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePortfoliosAllocationPortfoliosAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePortfoliosAllocationPortfoliosAllocation) GetAllocation() []CreatePortfoliosAllocationPortfoliosAllocationAllocation {
	if o == nil {
		return []CreatePortfoliosAllocationPortfoliosAllocationAllocation{}
	}
	return o.Allocation
}

func (o *CreatePortfoliosAllocationPortfoliosAllocation) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreatePortfoliosAllocationPortfoliosAllocation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePortfoliosAllocationPortfoliosAllocation) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreatePortfoliosAllocationPortfoliosAllocation) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type CreatePortfoliosAllocationResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Portfolios allocation
	PortfoliosAllocation *CreatePortfoliosAllocationPortfoliosAllocation
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreatePortfoliosAllocationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreatePortfoliosAllocationResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreatePortfoliosAllocationResponse) GetPortfoliosAllocation() *CreatePortfoliosAllocationPortfoliosAllocation {
	if o == nil {
		return nil
	}
	return o.PortfoliosAllocation
}

func (o *CreatePortfoliosAllocationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreatePortfoliosAllocationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
