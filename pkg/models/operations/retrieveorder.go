// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveOrderRequest struct {
	OrderID string `pathParam:"style=simple,explode=false,name=order_id"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (r RetrieveOrderRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveOrderRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveOrderRequest) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

func (o *RetrieveOrderRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveOrderRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveOrderRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveOrderRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// RetrieveOrderOrderCancellationReason - Reason for Order cancellation. The field is present in case the Order has a status of CANCELLED.
// * CANCELLED_BY_CLIENT -
// * CANCELLED_BY_UPVEST_OPERATIONS -
// * CANCELLED_BY_TRADING_PARTNER -
// * CANCELLED_BY_UPVEST_PLATFORM -
type RetrieveOrderOrderCancellationReason string

const (
	RetrieveOrderOrderCancellationReasonCancelledByClient           RetrieveOrderOrderCancellationReason = "CANCELLED_BY_CLIENT"
	RetrieveOrderOrderCancellationReasonCancelledByUpvestOperations RetrieveOrderOrderCancellationReason = "CANCELLED_BY_UPVEST_OPERATIONS"
	RetrieveOrderOrderCancellationReasonCancelledByTradingPartner   RetrieveOrderOrderCancellationReason = "CANCELLED_BY_TRADING_PARTNER"
	RetrieveOrderOrderCancellationReasonCancelledByUpvestPlatform   RetrieveOrderOrderCancellationReason = "CANCELLED_BY_UPVEST_PLATFORM"
)

func (e RetrieveOrderOrderCancellationReason) ToPointer() *RetrieveOrderOrderCancellationReason {
	return &e
}

func (e *RetrieveOrderOrderCancellationReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CANCELLED_BY_CLIENT":
		fallthrough
	case "CANCELLED_BY_UPVEST_OPERATIONS":
		fallthrough
	case "CANCELLED_BY_TRADING_PARTNER":
		fallthrough
	case "CANCELLED_BY_UPVEST_PLATFORM":
		*e = RetrieveOrderOrderCancellationReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderCancellationReason: %v", v)
	}
}

// RetrieveOrderOrderCurrency - The currency for the order.
type RetrieveOrderOrderCurrency string

const (
	RetrieveOrderOrderCurrencyEur RetrieveOrderOrderCurrency = "EUR"
)

func (e RetrieveOrderOrderCurrency) ToPointer() *RetrieveOrderOrderCurrency {
	return &e
}

func (e *RetrieveOrderOrderCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = RetrieveOrderOrderCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderCurrency: %v", v)
	}
}

// RetrieveOrderOrderExecutionFlow - Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
// * STRAIGHT_THROUGH -
// * BLOCK -
type RetrieveOrderOrderExecutionFlow string

const (
	RetrieveOrderOrderExecutionFlowStraightThrough RetrieveOrderOrderExecutionFlow = "STRAIGHT_THROUGH"
	RetrieveOrderOrderExecutionFlowBlock           RetrieveOrderOrderExecutionFlow = "BLOCK"
)

func (e RetrieveOrderOrderExecutionFlow) ToPointer() *RetrieveOrderOrderExecutionFlow {
	return &e
}

func (e *RetrieveOrderOrderExecutionFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STRAIGHT_THROUGH":
		fallthrough
	case "BLOCK":
		*e = RetrieveOrderOrderExecutionFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderExecutionFlow: %v", v)
	}
}

// RetrieveOrderOrderOrderExecutionCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type RetrieveOrderOrderOrderExecutionCurrency string

const (
	RetrieveOrderOrderOrderExecutionCurrencyEur RetrieveOrderOrderOrderExecutionCurrency = "EUR"
)

func (e RetrieveOrderOrderOrderExecutionCurrency) ToPointer() *RetrieveOrderOrderOrderExecutionCurrency {
	return &e
}

func (e *RetrieveOrderOrderOrderExecutionCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = RetrieveOrderOrderOrderExecutionCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderOrderExecutionCurrency: %v", v)
	}
}

// RetrieveOrderOrderOrderExecutionSide - Side of the execution.
// * BUY -
// * SELL -
type RetrieveOrderOrderOrderExecutionSide string

const (
	RetrieveOrderOrderOrderExecutionSideBuy  RetrieveOrderOrderOrderExecutionSide = "BUY"
	RetrieveOrderOrderOrderExecutionSideSell RetrieveOrderOrderOrderExecutionSide = "SELL"
)

func (e RetrieveOrderOrderOrderExecutionSide) ToPointer() *RetrieveOrderOrderOrderExecutionSide {
	return &e
}

func (e *RetrieveOrderOrderOrderExecutionSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = RetrieveOrderOrderOrderExecutionSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderOrderExecutionSide: %v", v)
	}
}

// RetrieveOrderOrderOrderExecutionStatus - Execution status of the Execution.
// * FILLED -
// * SETTLED -
// * CANCELLED -
type RetrieveOrderOrderOrderExecutionStatus string

const (
	RetrieveOrderOrderOrderExecutionStatusFilled    RetrieveOrderOrderOrderExecutionStatus = "FILLED"
	RetrieveOrderOrderOrderExecutionStatusSettled   RetrieveOrderOrderOrderExecutionStatus = "SETTLED"
	RetrieveOrderOrderOrderExecutionStatusCancelled RetrieveOrderOrderOrderExecutionStatus = "CANCELLED"
)

func (e RetrieveOrderOrderOrderExecutionStatus) ToPointer() *RetrieveOrderOrderOrderExecutionStatus {
	return &e
}

func (e *RetrieveOrderOrderOrderExecutionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FILLED":
		fallthrough
	case "SETTLED":
		fallthrough
	case "CANCELLED":
		*e = RetrieveOrderOrderOrderExecutionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderOrderExecutionStatus: %v", v)
	}
}

// RetrieveOrderOrderOrderExecutionTaxType - Tax type
// * TOTAL -
type RetrieveOrderOrderOrderExecutionTaxType string

const (
	RetrieveOrderOrderOrderExecutionTaxTypeTotal RetrieveOrderOrderOrderExecutionTaxType = "TOTAL"
)

func (e RetrieveOrderOrderOrderExecutionTaxType) ToPointer() *RetrieveOrderOrderOrderExecutionTaxType {
	return &e
}

func (e *RetrieveOrderOrderOrderExecutionTaxType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TOTAL":
		*e = RetrieveOrderOrderOrderExecutionTaxType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderOrderExecutionTaxType: %v", v)
	}
}

type RetrieveOrderOrderOrderExecutionTax struct {
	Amount string `json:"amount"`
	// Tax type
	// * TOTAL -
	Type *RetrieveOrderOrderOrderExecutionTaxType `default:"TOTAL" json:"type"`
}

func (r RetrieveOrderOrderOrderExecutionTax) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveOrderOrderOrderExecutionTax) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveOrderOrderOrderExecutionTax) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *RetrieveOrderOrderOrderExecutionTax) GetType() *RetrieveOrderOrderOrderExecutionTaxType {
	if o == nil {
		return nil
	}
	return o.Type
}

type RetrieveOrderOrderOrderExecution struct {
	CashAmount string `json:"cash_amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency       *RetrieveOrderOrderOrderExecutionCurrency `default:"EUR" json:"currency"`
	ID             string                                    `json:"id"`
	OrderID        string                                    `json:"order_id"`
	Price          string                                    `json:"price"`
	SettlementDate *string                                   `json:"settlement_date,omitempty"`
	ShareQuantity  string                                    `json:"share_quantity"`
	// Side of the execution.
	// * BUY -
	// * SELL -
	Side RetrieveOrderOrderOrderExecutionSide `json:"side"`
	// Execution status of the Execution.
	// * FILLED -
	// * SETTLED -
	// * CANCELLED -
	Status          RetrieveOrderOrderOrderExecutionStatus `json:"status"`
	Taxes           []RetrieveOrderOrderOrderExecutionTax  `json:"taxes"`
	TransactionTime time.Time                              `json:"transaction_time"`
}

func (r RetrieveOrderOrderOrderExecution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveOrderOrderOrderExecution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveOrderOrderOrderExecution) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *RetrieveOrderOrderOrderExecution) GetCurrency() *RetrieveOrderOrderOrderExecutionCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *RetrieveOrderOrderOrderExecution) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveOrderOrderOrderExecution) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

func (o *RetrieveOrderOrderOrderExecution) GetPrice() string {
	if o == nil {
		return ""
	}
	return o.Price
}

func (o *RetrieveOrderOrderOrderExecution) GetSettlementDate() *string {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *RetrieveOrderOrderOrderExecution) GetShareQuantity() string {
	if o == nil {
		return ""
	}
	return o.ShareQuantity
}

func (o *RetrieveOrderOrderOrderExecution) GetSide() RetrieveOrderOrderOrderExecutionSide {
	if o == nil {
		return RetrieveOrderOrderOrderExecutionSide("")
	}
	return o.Side
}

func (o *RetrieveOrderOrderOrderExecution) GetStatus() RetrieveOrderOrderOrderExecutionStatus {
	if o == nil {
		return RetrieveOrderOrderOrderExecutionStatus("")
	}
	return o.Status
}

func (o *RetrieveOrderOrderOrderExecution) GetTaxes() []RetrieveOrderOrderOrderExecutionTax {
	if o == nil {
		return []RetrieveOrderOrderOrderExecutionTax{}
	}
	return o.Taxes
}

func (o *RetrieveOrderOrderOrderExecution) GetTransactionTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TransactionTime
}

// RetrieveOrderOrderInitiationFlow - Initiation flow used during order creation, i.e. what triggered the order.
// * API -
// * PORTFOLIO -
// * CASH_DIVIDEND_REINVESTMENT -
// * PORTFOLIO_REBALANCING -
// * SELL_TO_COVER_FEES -
// * SELL_TO_COVER_TAXES -
// * ACCOUNT_LIQUIDATION -
// * UPVEST_OPERATIONS -
type RetrieveOrderOrderInitiationFlow string

const (
	RetrieveOrderOrderInitiationFlowAPI                      RetrieveOrderOrderInitiationFlow = "API"
	RetrieveOrderOrderInitiationFlowPortfolio                RetrieveOrderOrderInitiationFlow = "PORTFOLIO"
	RetrieveOrderOrderInitiationFlowCashDividendReinvestment RetrieveOrderOrderInitiationFlow = "CASH_DIVIDEND_REINVESTMENT"
	RetrieveOrderOrderInitiationFlowPortfolioRebalancing     RetrieveOrderOrderInitiationFlow = "PORTFOLIO_REBALANCING"
	RetrieveOrderOrderInitiationFlowSellToCoverFees          RetrieveOrderOrderInitiationFlow = "SELL_TO_COVER_FEES"
	RetrieveOrderOrderInitiationFlowSellToCoverTaxes         RetrieveOrderOrderInitiationFlow = "SELL_TO_COVER_TAXES"
	RetrieveOrderOrderInitiationFlowAccountLiquidation       RetrieveOrderOrderInitiationFlow = "ACCOUNT_LIQUIDATION"
	RetrieveOrderOrderInitiationFlowUpvestOperations         RetrieveOrderOrderInitiationFlow = "UPVEST_OPERATIONS"
)

func (e RetrieveOrderOrderInitiationFlow) ToPointer() *RetrieveOrderOrderInitiationFlow {
	return &e
}

func (e *RetrieveOrderOrderInitiationFlow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API":
		fallthrough
	case "PORTFOLIO":
		fallthrough
	case "CASH_DIVIDEND_REINVESTMENT":
		fallthrough
	case "PORTFOLIO_REBALANCING":
		fallthrough
	case "SELL_TO_COVER_FEES":
		fallthrough
	case "SELL_TO_COVER_TAXES":
		fallthrough
	case "ACCOUNT_LIQUIDATION":
		fallthrough
	case "UPVEST_OPERATIONS":
		*e = RetrieveOrderOrderInitiationFlow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderInitiationFlow: %v", v)
	}
}

// RetrieveOrderOrderInstrumentIDType - The type of the ID used in the request.
// * ISIN -
type RetrieveOrderOrderInstrumentIDType string

const (
	RetrieveOrderOrderInstrumentIDTypeIsin RetrieveOrderOrderInstrumentIDType = "ISIN"
)

func (e RetrieveOrderOrderInstrumentIDType) ToPointer() *RetrieveOrderOrderInstrumentIDType {
	return &e
}

func (e *RetrieveOrderOrderInstrumentIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ISIN":
		*e = RetrieveOrderOrderInstrumentIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderInstrumentIDType: %v", v)
	}
}

// RetrieveOrderOrderOrderType - Type of the order.
// * MARKET -
// * LIMIT -
// * STOP -
type RetrieveOrderOrderOrderType string

const (
	RetrieveOrderOrderOrderTypeMarket RetrieveOrderOrderOrderType = "MARKET"
	RetrieveOrderOrderOrderTypeLimit  RetrieveOrderOrderOrderType = "LIMIT"
	RetrieveOrderOrderOrderTypeStop   RetrieveOrderOrderOrderType = "STOP"
)

func (e RetrieveOrderOrderOrderType) ToPointer() *RetrieveOrderOrderOrderType {
	return &e
}

func (e *RetrieveOrderOrderOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARKET":
		fallthrough
	case "LIMIT":
		fallthrough
	case "STOP":
		*e = RetrieveOrderOrderOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderOrderType: %v", v)
	}
}

// RetrieveOrderOrderSide - Side of the order.
// * BUY -
// * SELL -
type RetrieveOrderOrderSide string

const (
	RetrieveOrderOrderSideBuy  RetrieveOrderOrderSide = "BUY"
	RetrieveOrderOrderSideSell RetrieveOrderOrderSide = "SELL"
)

func (e RetrieveOrderOrderSide) ToPointer() *RetrieveOrderOrderSide {
	return &e
}

func (e *RetrieveOrderOrderSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUY":
		fallthrough
	case "SELL":
		*e = RetrieveOrderOrderSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderSide: %v", v)
	}
}

// RetrieveOrderOrderStatus - The execution status of the order.
// * NEW -
// * PROCESSING -
// * FILLED -
// * CANCELLED -
type RetrieveOrderOrderStatus string

const (
	RetrieveOrderOrderStatusNew        RetrieveOrderOrderStatus = "NEW"
	RetrieveOrderOrderStatusProcessing RetrieveOrderOrderStatus = "PROCESSING"
	RetrieveOrderOrderStatusFilled     RetrieveOrderOrderStatus = "FILLED"
	RetrieveOrderOrderStatusCancelled  RetrieveOrderOrderStatus = "CANCELLED"
)

func (e RetrieveOrderOrderStatus) ToPointer() *RetrieveOrderOrderStatus {
	return &e
}

func (e *RetrieveOrderOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "FILLED":
		fallthrough
	case "CANCELLED":
		*e = RetrieveOrderOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveOrderOrderStatus: %v", v)
	}
}

// RetrieveOrderOrder - OK
type RetrieveOrderOrder struct {
	// The ID of the account that owns the order
	AccountID string `json:"account_id"`
	// Reason for Order cancellation. The field is present in case the Order has a status of CANCELLED.
	// * CANCELLED_BY_CLIENT -
	// * CANCELLED_BY_UPVEST_OPERATIONS -
	// * CANCELLED_BY_TRADING_PARTNER -
	// * CANCELLED_BY_UPVEST_PLATFORM -
	CancellationReason *RetrieveOrderOrderCancellationReason `json:"cancellation_reason,omitempty"`
	CashAmount         string                                `json:"cash_amount"`
	// An ID provided by the client
	ClientReference string `json:"client_reference"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time                   `json:"created_at"`
	Currency  *RetrieveOrderOrderCurrency `default:"EUR" json:"currency"`
	// Execution flow that the order processing goes through. If no value is specified, the default value is assumed - `STRAIGHT_THROUGH`.
	// * STRAIGHT_THROUGH -
	// * BLOCK -
	ExecutionFlow *RetrieveOrderOrderExecutionFlow `json:"execution_flow,omitempty"`
	// Order executions associated with this order
	Executions []RetrieveOrderOrderOrderExecution `json:"executions"`
	ExpiryDate *string                            `json:"expiry_date,omitempty"`
	Fee        string                             `json:"fee"`
	ID         string                             `json:"id"`
	// Initiation flow used during order creation, i.e. what triggered the order.
	// * API -
	// * PORTFOLIO -
	// * CASH_DIVIDEND_REINVESTMENT -
	// * PORTFOLIO_REBALANCING -
	// * SELL_TO_COVER_FEES -
	// * SELL_TO_COVER_TAXES -
	// * ACCOUNT_LIQUIDATION -
	// * UPVEST_OPERATIONS -
	InitiationFlow RetrieveOrderOrderInitiationFlow `json:"initiation_flow"`
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	InstrumentID string `json:"instrument_id"`
	// The type of the ID used in the request.
	// * ISIN -
	InstrumentIDType *RetrieveOrderOrderInstrumentIDType `default:"ISIN" json:"instrument_id_type"`
	LimitPrice       *string                             `json:"limit_price,omitempty"`
	// Type of the order.
	// * MARKET -
	// * LIMIT -
	// * STOP -
	OrderType RetrieveOrderOrderOrderType `json:"order_type"`
	Quantity  string                      `json:"quantity"`
	// Side of the order.
	// * BUY -
	// * SELL -
	Side RetrieveOrderOrderSide `json:"side"`
	// The execution status of the order.
	// * NEW -
	// * PROCESSING -
	// * FILLED -
	// * CANCELLED -
	Status    RetrieveOrderOrderStatus `json:"status"`
	StopPrice *string                  `json:"stop_price,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// The ID of the user
	UserID string `json:"user_id"`
	// Only applicable if the user has failed the instrument fit check for the instrument type being ordered. True if the user has acknowledged their willingness to trade.
	UserInstrumentFitAcknowledgement *bool `json:"user_instrument_fit_acknowledgement,omitempty"`
}

func (r RetrieveOrderOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveOrderOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveOrderOrder) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *RetrieveOrderOrder) GetCancellationReason() *RetrieveOrderOrderCancellationReason {
	if o == nil {
		return nil
	}
	return o.CancellationReason
}

func (o *RetrieveOrderOrder) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *RetrieveOrderOrder) GetClientReference() string {
	if o == nil {
		return ""
	}
	return o.ClientReference
}

func (o *RetrieveOrderOrder) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveOrderOrder) GetCurrency() *RetrieveOrderOrderCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *RetrieveOrderOrder) GetExecutionFlow() *RetrieveOrderOrderExecutionFlow {
	if o == nil {
		return nil
	}
	return o.ExecutionFlow
}

func (o *RetrieveOrderOrder) GetExecutions() []RetrieveOrderOrderOrderExecution {
	if o == nil {
		return []RetrieveOrderOrderOrderExecution{}
	}
	return o.Executions
}

func (o *RetrieveOrderOrder) GetExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.ExpiryDate
}

func (o *RetrieveOrderOrder) GetFee() string {
	if o == nil {
		return ""
	}
	return o.Fee
}

func (o *RetrieveOrderOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveOrderOrder) GetInitiationFlow() RetrieveOrderOrderInitiationFlow {
	if o == nil {
		return RetrieveOrderOrderInitiationFlow("")
	}
	return o.InitiationFlow
}

func (o *RetrieveOrderOrder) GetInstrumentID() string {
	if o == nil {
		return ""
	}
	return o.InstrumentID
}

func (o *RetrieveOrderOrder) GetInstrumentIDType() *RetrieveOrderOrderInstrumentIDType {
	if o == nil {
		return nil
	}
	return o.InstrumentIDType
}

func (o *RetrieveOrderOrder) GetLimitPrice() *string {
	if o == nil {
		return nil
	}
	return o.LimitPrice
}

func (o *RetrieveOrderOrder) GetOrderType() RetrieveOrderOrderOrderType {
	if o == nil {
		return RetrieveOrderOrderOrderType("")
	}
	return o.OrderType
}

func (o *RetrieveOrderOrder) GetQuantity() string {
	if o == nil {
		return ""
	}
	return o.Quantity
}

func (o *RetrieveOrderOrder) GetSide() RetrieveOrderOrderSide {
	if o == nil {
		return RetrieveOrderOrderSide("")
	}
	return o.Side
}

func (o *RetrieveOrderOrder) GetStatus() RetrieveOrderOrderStatus {
	if o == nil {
		return RetrieveOrderOrderStatus("")
	}
	return o.Status
}

func (o *RetrieveOrderOrder) GetStopPrice() *string {
	if o == nil {
		return nil
	}
	return o.StopPrice
}

func (o *RetrieveOrderOrder) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *RetrieveOrderOrder) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *RetrieveOrderOrder) GetUserInstrumentFitAcknowledgement() *bool {
	if o == nil {
		return nil
	}
	return o.UserInstrumentFitAcknowledgement
}

type RetrieveOrderResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// OK
	Order *RetrieveOrderOrder
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *RetrieveOrderResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveOrderResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *RetrieveOrderResponse) GetOrder() *RetrieveOrderOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *RetrieveOrderResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveOrderResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
