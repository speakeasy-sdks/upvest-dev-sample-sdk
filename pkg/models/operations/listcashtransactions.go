// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type ListCashTransactionsSecurity struct {
	OauthClientCredentials string `security:"scheme,type=oauth2,name=Authorization"`
}

func (o *ListCashTransactionsSecurity) GetOauthClientCredentials() string {
	if o == nil {
		return ""
	}
	return o.OauthClientCredentials
}

// ListCashTransactionsQueryParamOrder - Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
type ListCashTransactionsQueryParamOrder string

const (
	ListCashTransactionsQueryParamOrderAsc  ListCashTransactionsQueryParamOrder = "ASC"
	ListCashTransactionsQueryParamOrderDesc ListCashTransactionsQueryParamOrder = "DESC"
)

func (e ListCashTransactionsQueryParamOrder) ToPointer() *ListCashTransactionsQueryParamOrder {
	return &e
}

func (e *ListCashTransactionsQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListCashTransactionsQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashTransactionsQueryParamOrder: %v", v)
	}
}

// ListCashTransactionsQueryParamSort - Sort the result by `booking_date`.
type ListCashTransactionsQueryParamSort string

const (
	ListCashTransactionsQueryParamSortBookingDate ListCashTransactionsQueryParamSort = "booking_date"
)

func (e ListCashTransactionsQueryParamSort) ToPointer() *ListCashTransactionsQueryParamSort {
	return &e
}

func (e *ListCashTransactionsQueryParamSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "booking_date":
		*e = ListCashTransactionsQueryParamSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashTransactionsQueryParamSort: %v", v)
	}
}

type ListCashTransactionsRequest struct {
	// Filters the list to show only transactions associated with a certain account group ID.
	AccountGroupID *string     `queryParam:"style=form,explode=true,name=account_group_id"`
	EndDate        *types.Date `queryParam:"style=form,explode=true,name=end_date"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *ListCashTransactionsQueryParamOrder `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Sort the result by `booking_date`.
	Sort      *ListCashTransactionsQueryParamSort `default:"booking_date" queryParam:"style=form,explode=true,name=sort"`
	StartDate *types.Date                         `queryParam:"style=form,explode=true,name=start_date"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListCashTransactionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCashTransactionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCashTransactionsRequest) GetAccountGroupID() *string {
	if o == nil {
		return nil
	}
	return o.AccountGroupID
}

func (o *ListCashTransactionsRequest) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ListCashTransactionsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListCashTransactionsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListCashTransactionsRequest) GetOrder() *ListCashTransactionsQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListCashTransactionsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListCashTransactionsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListCashTransactionsRequest) GetSort() *ListCashTransactionsQueryParamSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListCashTransactionsRequest) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ListCashTransactionsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListCashTransactionsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// ListCashTransactionsCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type ListCashTransactionsCurrency string

const (
	ListCashTransactionsCurrencyEur ListCashTransactionsCurrency = "EUR"
)

func (e ListCashTransactionsCurrency) ToPointer() *ListCashTransactionsCurrency {
	return &e
}

func (e *ListCashTransactionsCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = ListCashTransactionsCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashTransactionsCurrency: %v", v)
	}
}

// CashTransactionDelta - Entity representing cash transaction delta.
type CashTransactionDelta struct {
	Amount string `json:"amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *ListCashTransactionsCurrency `default:"EUR" json:"currency"`
}

func (c CashTransactionDelta) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CashTransactionDelta) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CashTransactionDelta) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *CashTransactionDelta) GetCurrency() *ListCashTransactionsCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

// ListCashTransactionsInstrument - Entity representing instrument
type ListCashTransactionsInstrument struct {
	// International securities identification number defined by [ISO 6166](https://en.wikipedia.org/wiki/International_Securities_Identification_Number).
	Isin *string `json:"isin,omitempty"`
	// Internal instrument identifier.
	UUID string `json:"uuid"`
}

func (o *ListCashTransactionsInstrument) GetIsin() *string {
	if o == nil {
		return nil
	}
	return o.Isin
}

func (o *ListCashTransactionsInstrument) GetUUID() string {
	if o == nil {
		return ""
	}
	return o.UUID
}

// ListCashTransactionsType - Type of the reference.
// * ORDER - Order
// * ORDER_EXECUTION - Order execution
// * WITHDRAWAL - Cash withdrawal
// * DIRECT_DEBIT - Direct debit funding request
// * CORPORATE_ACTION - Corporate action
// * CORPORATE_ACTION_TRANSACTION_ID - Corporate action transaction ID
// * TOPUP - Cash top up
// * FEE_COLLECTION - Fee collection
type ListCashTransactionsType string

const (
	ListCashTransactionsTypeOrder                        ListCashTransactionsType = "ORDER"
	ListCashTransactionsTypeOrderExecution               ListCashTransactionsType = "ORDER_EXECUTION"
	ListCashTransactionsTypeWithdrawal                   ListCashTransactionsType = "WITHDRAWAL"
	ListCashTransactionsTypeDirectDebit                  ListCashTransactionsType = "DIRECT_DEBIT"
	ListCashTransactionsTypeCorporateAction              ListCashTransactionsType = "CORPORATE_ACTION"
	ListCashTransactionsTypeCorporateActionTransactionID ListCashTransactionsType = "CORPORATE_ACTION_TRANSACTION_ID"
	ListCashTransactionsTypeTopup                        ListCashTransactionsType = "TOPUP"
	ListCashTransactionsTypeFeeCollection                ListCashTransactionsType = "FEE_COLLECTION"
)

func (e ListCashTransactionsType) ToPointer() *ListCashTransactionsType {
	return &e
}

func (e *ListCashTransactionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ORDER":
		fallthrough
	case "ORDER_EXECUTION":
		fallthrough
	case "WITHDRAWAL":
		fallthrough
	case "DIRECT_DEBIT":
		fallthrough
	case "CORPORATE_ACTION":
		fallthrough
	case "CORPORATE_ACTION_TRANSACTION_ID":
		fallthrough
	case "TOPUP":
		fallthrough
	case "FEE_COLLECTION":
		*e = ListCashTransactionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashTransactionsType: %v", v)
	}
}

// CashTransactionReference - Entity representing cash transaction reference.
type CashTransactionReference struct {
	// Unique identifier for a resource of given type.
	ID string `json:"id"`
	// Type of the reference.
	// * ORDER - Order
	// * ORDER_EXECUTION - Order execution
	// * WITHDRAWAL - Cash withdrawal
	// * DIRECT_DEBIT - Direct debit funding request
	// * CORPORATE_ACTION - Corporate action
	// * CORPORATE_ACTION_TRANSACTION_ID - Corporate action transaction ID
	// * TOPUP - Cash top up
	// * FEE_COLLECTION - Fee collection
	Type ListCashTransactionsType `json:"type"`
}

func (o *CashTransactionReference) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CashTransactionReference) GetType() ListCashTransactionsType {
	if o == nil {
		return ListCashTransactionsType("")
	}
	return o.Type
}

// ListCashTransactionsTransactionsCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type ListCashTransactionsTransactionsCurrency string

const (
	ListCashTransactionsTransactionsCurrencyEur ListCashTransactionsTransactionsCurrency = "EUR"
)

func (e ListCashTransactionsTransactionsCurrency) ToPointer() *ListCashTransactionsTransactionsCurrency {
	return &e
}

func (e *ListCashTransactionsTransactionsCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = ListCashTransactionsTransactionsCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashTransactionsTransactionsCurrency: %v", v)
	}
}

// ListCashTransactionsTransactionsType - Type of the tax.
// * TOTAL - Total taxes
type ListCashTransactionsTransactionsType string

const (
	ListCashTransactionsTransactionsTypeTotal ListCashTransactionsTransactionsType = "TOTAL"
)

func (e ListCashTransactionsTransactionsType) ToPointer() *ListCashTransactionsTransactionsType {
	return &e
}

func (e *ListCashTransactionsTransactionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TOTAL":
		*e = ListCashTransactionsTransactionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashTransactionsTransactionsType: %v", v)
	}
}

// TransactionTax - Entity representing the transaction tax.
type TransactionTax struct {
	Amount string `json:"amount"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *ListCashTransactionsTransactionsCurrency `default:"EUR" json:"currency"`
	// Type of the tax.
	// * TOTAL - Total taxes
	Type *ListCashTransactionsTransactionsType `default:"TOTAL" json:"type"`
}

func (t TransactionTax) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionTax) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransactionTax) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *TransactionTax) GetCurrency() *ListCashTransactionsTransactionsCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *TransactionTax) GetType() *ListCashTransactionsTransactionsType {
	if o == nil {
		return nil
	}
	return o.Type
}

// TransactionType - Transaction type.
// * CALL_ON_INTERMEDIATE_SECURITIES - Call on Intermediate Securities
// * CALL_ON_INTERMEDIATE_SECURITIES_CANCELLATION - Call on Intermediate Securities, Cancellation
// * CASH_DIVIDEND - Cash dividend
// * CASH_DIVIDEND_CANCELLATION - Cash dividend cancellation
// * DECREASE_IN_VALUE - Decrease in Value
// * DECREASE_IN_VALUE_CANCELLATION - Decrease in Value, Cancellation
// * DIVIDEND_OPTION - Dividend Option
// * DIVIDEND_OPTION_CANCELLATION - Dividend Option, Cancellation
// * DIVIDEND_REINVESTMENT - Dividend Reinvestment
// * DIVIDEND_REINVESTMENT_CANCELLATION - Dividend Reinvestment, Cancellation
// * DUTCH_AUCTION - Dutch Auction
// * DUTCH_AUCTION_CANCELLATION - Dutch Auction, Cancellation
// * FEE_COLLECTION - Fee collection
// * FEE_COLLECTION_CANCELLATION - Fee collection cancellation
// * INCREASE_IN_VALUE - Increase in Value
// * INCREASE_IN_VALUE_CANCELLATION - Increase in Value, Cancellation
// * LIQUIDATION_PAYMENT - Liquidation Dividend/Liquidation Payment
// * LIQUIDATION_PAYMENT_CANCELLATION - Liquidation Dividend/Liquidation Payment, Cancellation
// * MERGER - Merger
// * MERGER_CANCELLATION - Merger, Cancellation
// * NON_OFFICIAL_OFFER - Non-Official Offer
// * NON_OFFICIAL_OFFER_CANCELLATION - Non-Official Offer, Cancellation
// * ODD_LOT_SALE - Odd Lot Sale/Purchase
// * ODD_LOT_SALE_CANCELLATION - Odd Lot Sale/Purchase, Cancellation
// * ORDER_EXECUTION - Order execution
// * ORDER_EXECUTION_CANCELLATION - Order execution cancellation
// * OTHER_EVENT - Other Event
// * OTHER_EVENT_CANCELLATION - Other Event, Cancellation
// * PRIORITY_ISSUE - Priority Issue
// * PRIORITY_ISSUE_CANCELLATION - Priority Issue, Cancellation
// * REPURCHASE_OFFER - Repurchase Offer/Issuer Bid/Reverse Rights
// * REPURCHASE_OFFER_CANCELLATION - Repurchase Offer/Issuer Bid/Reverse Rights, Cancellation
// * REVERSE_STOCK_SPLIT - Reverse Stock Split/Change in Nominal Value
// * REVERSE_STOCK_SPLIT_CANCELLATION - Reverse Stock Split/Change in Nominal Value, Cancellation
// * SEPA_DIRECT_DEBIT - Sepa direct debit
// * SEPA_DIRECT_DEBIT_CHARGE_BACK - Sepa direct debit charge back
// * SPIN_OFF - Spin-Off
// * SPIN_OFF_CANCELLATION - Spin-Off, Cancellation
// * STOCK_SPLIT - Stock Split/Change in Nominal Value/Subdivision
// * STOCK_SPLIT_CANCELLATION - Stock Split/Change in Nominal Value/Subdivision, Cancellation
// * TENDER - Tender/Acquisition/Takeover/Purchase Offer
// * TENDER_CANCELLATION - Tender/Acquisition/Takeover/Purchase Offer, Cancellation
// * TOPUP - Cash top up
// * WITHDRAWAL - Withdrawal
// * WITHDRAWAL_CANCELLATION - Withdrawal cancellation
// * DD_REFUND_REJECT_FEE - DD refund reject fee
// * DD_REFUND_REJECT_FEE_CANCELLATION - DD refund reject fee cancellation
type TransactionType string

const (
	TransactionTypeCallOnIntermediateSecurities             TransactionType = "CALL_ON_INTERMEDIATE_SECURITIES"
	TransactionTypeCallOnIntermediateSecuritiesCancellation TransactionType = "CALL_ON_INTERMEDIATE_SECURITIES_CANCELLATION"
	TransactionTypeCashDividend                             TransactionType = "CASH_DIVIDEND"
	TransactionTypeCashDividendCancellation                 TransactionType = "CASH_DIVIDEND_CANCELLATION"
	TransactionTypeDecreaseInValue                          TransactionType = "DECREASE_IN_VALUE"
	TransactionTypeDecreaseInValueCancellation              TransactionType = "DECREASE_IN_VALUE_CANCELLATION"
	TransactionTypeDividendOption                           TransactionType = "DIVIDEND_OPTION"
	TransactionTypeDividendOptionCancellation               TransactionType = "DIVIDEND_OPTION_CANCELLATION"
	TransactionTypeDividendReinvestment                     TransactionType = "DIVIDEND_REINVESTMENT"
	TransactionTypeDividendReinvestmentCancellation         TransactionType = "DIVIDEND_REINVESTMENT_CANCELLATION"
	TransactionTypeDutchAuction                             TransactionType = "DUTCH_AUCTION"
	TransactionTypeDutchAuctionCancellation                 TransactionType = "DUTCH_AUCTION_CANCELLATION"
	TransactionTypeFeeCollection                            TransactionType = "FEE_COLLECTION"
	TransactionTypeFeeCollectionCancellation                TransactionType = "FEE_COLLECTION_CANCELLATION"
	TransactionTypeIncreaseInValue                          TransactionType = "INCREASE_IN_VALUE"
	TransactionTypeIncreaseInValueCancellation              TransactionType = "INCREASE_IN_VALUE_CANCELLATION"
	TransactionTypeLiquidationPayment                       TransactionType = "LIQUIDATION_PAYMENT"
	TransactionTypeLiquidationPaymentCancellation           TransactionType = "LIQUIDATION_PAYMENT_CANCELLATION"
	TransactionTypeMerger                                   TransactionType = "MERGER"
	TransactionTypeMergerCancellation                       TransactionType = "MERGER_CANCELLATION"
	TransactionTypeNonOfficialOffer                         TransactionType = "NON_OFFICIAL_OFFER"
	TransactionTypeNonOfficialOfferCancellation             TransactionType = "NON_OFFICIAL_OFFER_CANCELLATION"
	TransactionTypeOddLotSale                               TransactionType = "ODD_LOT_SALE"
	TransactionTypeOddLotSaleCancellation                   TransactionType = "ODD_LOT_SALE_CANCELLATION"
	TransactionTypeOrderExecution                           TransactionType = "ORDER_EXECUTION"
	TransactionTypeOrderExecutionCancellation               TransactionType = "ORDER_EXECUTION_CANCELLATION"
	TransactionTypeOtherEvent                               TransactionType = "OTHER_EVENT"
	TransactionTypeOtherEventCancellation                   TransactionType = "OTHER_EVENT_CANCELLATION"
	TransactionTypePriorityIssue                            TransactionType = "PRIORITY_ISSUE"
	TransactionTypePriorityIssueCancellation                TransactionType = "PRIORITY_ISSUE_CANCELLATION"
	TransactionTypeRepurchaseOffer                          TransactionType = "REPURCHASE_OFFER"
	TransactionTypeRepurchaseOfferCancellation              TransactionType = "REPURCHASE_OFFER_CANCELLATION"
	TransactionTypeReverseStockSplit                        TransactionType = "REVERSE_STOCK_SPLIT"
	TransactionTypeReverseStockSplitCancellation            TransactionType = "REVERSE_STOCK_SPLIT_CANCELLATION"
	TransactionTypeSepaDirectDebit                          TransactionType = "SEPA_DIRECT_DEBIT"
	TransactionTypeSepaDirectDebitChargeBack                TransactionType = "SEPA_DIRECT_DEBIT_CHARGE_BACK"
	TransactionTypeSpinOff                                  TransactionType = "SPIN_OFF"
	TransactionTypeSpinOffCancellation                      TransactionType = "SPIN_OFF_CANCELLATION"
	TransactionTypeStockSplit                               TransactionType = "STOCK_SPLIT"
	TransactionTypeStockSplitCancellation                   TransactionType = "STOCK_SPLIT_CANCELLATION"
	TransactionTypeTender                                   TransactionType = "TENDER"
	TransactionTypeTenderCancellation                       TransactionType = "TENDER_CANCELLATION"
	TransactionTypeTopup                                    TransactionType = "TOPUP"
	TransactionTypeWithdrawal                               TransactionType = "WITHDRAWAL"
	TransactionTypeWithdrawalCancellation                   TransactionType = "WITHDRAWAL_CANCELLATION"
	TransactionTypeDdRefundRejectFee                        TransactionType = "DD_REFUND_REJECT_FEE"
	TransactionTypeDdRefundRejectFeeCancellation            TransactionType = "DD_REFUND_REJECT_FEE_CANCELLATION"
)

func (e TransactionType) ToPointer() *TransactionType {
	return &e
}

func (e *TransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CALL_ON_INTERMEDIATE_SECURITIES":
		fallthrough
	case "CALL_ON_INTERMEDIATE_SECURITIES_CANCELLATION":
		fallthrough
	case "CASH_DIVIDEND":
		fallthrough
	case "CASH_DIVIDEND_CANCELLATION":
		fallthrough
	case "DECREASE_IN_VALUE":
		fallthrough
	case "DECREASE_IN_VALUE_CANCELLATION":
		fallthrough
	case "DIVIDEND_OPTION":
		fallthrough
	case "DIVIDEND_OPTION_CANCELLATION":
		fallthrough
	case "DIVIDEND_REINVESTMENT":
		fallthrough
	case "DIVIDEND_REINVESTMENT_CANCELLATION":
		fallthrough
	case "DUTCH_AUCTION":
		fallthrough
	case "DUTCH_AUCTION_CANCELLATION":
		fallthrough
	case "FEE_COLLECTION":
		fallthrough
	case "FEE_COLLECTION_CANCELLATION":
		fallthrough
	case "INCREASE_IN_VALUE":
		fallthrough
	case "INCREASE_IN_VALUE_CANCELLATION":
		fallthrough
	case "LIQUIDATION_PAYMENT":
		fallthrough
	case "LIQUIDATION_PAYMENT_CANCELLATION":
		fallthrough
	case "MERGER":
		fallthrough
	case "MERGER_CANCELLATION":
		fallthrough
	case "NON_OFFICIAL_OFFER":
		fallthrough
	case "NON_OFFICIAL_OFFER_CANCELLATION":
		fallthrough
	case "ODD_LOT_SALE":
		fallthrough
	case "ODD_LOT_SALE_CANCELLATION":
		fallthrough
	case "ORDER_EXECUTION":
		fallthrough
	case "ORDER_EXECUTION_CANCELLATION":
		fallthrough
	case "OTHER_EVENT":
		fallthrough
	case "OTHER_EVENT_CANCELLATION":
		fallthrough
	case "PRIORITY_ISSUE":
		fallthrough
	case "PRIORITY_ISSUE_CANCELLATION":
		fallthrough
	case "REPURCHASE_OFFER":
		fallthrough
	case "REPURCHASE_OFFER_CANCELLATION":
		fallthrough
	case "REVERSE_STOCK_SPLIT":
		fallthrough
	case "REVERSE_STOCK_SPLIT_CANCELLATION":
		fallthrough
	case "SEPA_DIRECT_DEBIT":
		fallthrough
	case "SEPA_DIRECT_DEBIT_CHARGE_BACK":
		fallthrough
	case "SPIN_OFF":
		fallthrough
	case "SPIN_OFF_CANCELLATION":
		fallthrough
	case "STOCK_SPLIT":
		fallthrough
	case "STOCK_SPLIT_CANCELLATION":
		fallthrough
	case "TENDER":
		fallthrough
	case "TENDER_CANCELLATION":
		fallthrough
	case "TOPUP":
		fallthrough
	case "WITHDRAWAL":
		fallthrough
	case "WITHDRAWAL_CANCELLATION":
		fallthrough
	case "DD_REFUND_REJECT_FEE":
		fallthrough
	case "DD_REFUND_REJECT_FEE_CANCELLATION":
		*e = TransactionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionType: %v", v)
	}
}

type CashTransaction struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	// Account unique identifier.
	AccountID *string `json:"account_id,omitempty"`
	//  Transaction booking date and time. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	BookingDate time.Time `json:"booking_date"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Entity representing cash transaction delta.
	Delta CashTransactionDelta `json:"delta"`
	// Cash transaction unique identifier.
	ID string `json:"id"`
	// Entity representing instrument
	Instrument *ListCashTransactionsInstrument `json:"instrument,omitempty"`
	References []CashTransactionReference      `json:"references"`
	Taxes      []TransactionTax                `json:"taxes"`
	// Transaction type.
	// * CALL_ON_INTERMEDIATE_SECURITIES - Call on Intermediate Securities
	// * CALL_ON_INTERMEDIATE_SECURITIES_CANCELLATION - Call on Intermediate Securities, Cancellation
	// * CASH_DIVIDEND - Cash dividend
	// * CASH_DIVIDEND_CANCELLATION - Cash dividend cancellation
	// * DECREASE_IN_VALUE - Decrease in Value
	// * DECREASE_IN_VALUE_CANCELLATION - Decrease in Value, Cancellation
	// * DIVIDEND_OPTION - Dividend Option
	// * DIVIDEND_OPTION_CANCELLATION - Dividend Option, Cancellation
	// * DIVIDEND_REINVESTMENT - Dividend Reinvestment
	// * DIVIDEND_REINVESTMENT_CANCELLATION - Dividend Reinvestment, Cancellation
	// * DUTCH_AUCTION - Dutch Auction
	// * DUTCH_AUCTION_CANCELLATION - Dutch Auction, Cancellation
	// * FEE_COLLECTION - Fee collection
	// * FEE_COLLECTION_CANCELLATION - Fee collection cancellation
	// * INCREASE_IN_VALUE - Increase in Value
	// * INCREASE_IN_VALUE_CANCELLATION - Increase in Value, Cancellation
	// * LIQUIDATION_PAYMENT - Liquidation Dividend/Liquidation Payment
	// * LIQUIDATION_PAYMENT_CANCELLATION - Liquidation Dividend/Liquidation Payment, Cancellation
	// * MERGER - Merger
	// * MERGER_CANCELLATION - Merger, Cancellation
	// * NON_OFFICIAL_OFFER - Non-Official Offer
	// * NON_OFFICIAL_OFFER_CANCELLATION - Non-Official Offer, Cancellation
	// * ODD_LOT_SALE - Odd Lot Sale/Purchase
	// * ODD_LOT_SALE_CANCELLATION - Odd Lot Sale/Purchase, Cancellation
	// * ORDER_EXECUTION - Order execution
	// * ORDER_EXECUTION_CANCELLATION - Order execution cancellation
	// * OTHER_EVENT - Other Event
	// * OTHER_EVENT_CANCELLATION - Other Event, Cancellation
	// * PRIORITY_ISSUE - Priority Issue
	// * PRIORITY_ISSUE_CANCELLATION - Priority Issue, Cancellation
	// * REPURCHASE_OFFER - Repurchase Offer/Issuer Bid/Reverse Rights
	// * REPURCHASE_OFFER_CANCELLATION - Repurchase Offer/Issuer Bid/Reverse Rights, Cancellation
	// * REVERSE_STOCK_SPLIT - Reverse Stock Split/Change in Nominal Value
	// * REVERSE_STOCK_SPLIT_CANCELLATION - Reverse Stock Split/Change in Nominal Value, Cancellation
	// * SEPA_DIRECT_DEBIT - Sepa direct debit
	// * SEPA_DIRECT_DEBIT_CHARGE_BACK - Sepa direct debit charge back
	// * SPIN_OFF - Spin-Off
	// * SPIN_OFF_CANCELLATION - Spin-Off, Cancellation
	// * STOCK_SPLIT - Stock Split/Change in Nominal Value/Subdivision
	// * STOCK_SPLIT_CANCELLATION - Stock Split/Change in Nominal Value/Subdivision, Cancellation
	// * TENDER - Tender/Acquisition/Takeover/Purchase Offer
	// * TENDER_CANCELLATION - Tender/Acquisition/Takeover/Purchase Offer, Cancellation
	// * TOPUP - Cash top up
	// * WITHDRAWAL - Withdrawal
	// * WITHDRAWAL_CANCELLATION - Withdrawal cancellation
	// * DD_REFUND_REJECT_FEE - DD refund reject fee
	// * DD_REFUND_REJECT_FEE_CANCELLATION - DD refund reject fee cancellation
	Type TransactionType `json:"type"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// Transaction value date and time. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	ValueDate time.Time `json:"value_date"`
}

func (c CashTransaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CashTransaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CashTransaction) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *CashTransaction) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *CashTransaction) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *CashTransaction) GetBookingDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.BookingDate
}

func (o *CashTransaction) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CashTransaction) GetDelta() CashTransactionDelta {
	if o == nil {
		return CashTransactionDelta{}
	}
	return o.Delta
}

func (o *CashTransaction) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CashTransaction) GetInstrument() *ListCashTransactionsInstrument {
	if o == nil {
		return nil
	}
	return o.Instrument
}

func (o *CashTransaction) GetReferences() []CashTransactionReference {
	if o == nil {
		return []CashTransactionReference{}
	}
	return o.References
}

func (o *CashTransaction) GetTaxes() []TransactionTax {
	if o == nil {
		return []TransactionTax{}
	}
	return o.Taxes
}

func (o *CashTransaction) GetType() TransactionType {
	if o == nil {
		return TransactionType("")
	}
	return o.Type
}

func (o *CashTransaction) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *CashTransaction) GetValueDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ValueDate
}

// ListCashTransactionsOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListCashTransactionsOrder string

const (
	ListCashTransactionsOrderAsc  ListCashTransactionsOrder = "ASC"
	ListCashTransactionsOrderDesc ListCashTransactionsOrder = "DESC"
)

func (e ListCashTransactionsOrder) ToPointer() *ListCashTransactionsOrder {
	return &e
}

func (e *ListCashTransactionsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListCashTransactionsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCashTransactionsOrder: %v", v)
	}
}

type ListCashTransactionsMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListCashTransactionsOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListCashTransactionsMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListCashTransactionsMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListCashTransactionsMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListCashTransactionsMeta) GetOrder() *ListCashTransactionsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListCashTransactionsMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListCashTransactionsMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListCashTransactionsCashTransactionListResponse - Cash Transactions
type ListCashTransactionsCashTransactionListResponse struct {
	Data []CashTransaction        `json:"data"`
	Meta ListCashTransactionsMeta `json:"meta"`
}

func (o *ListCashTransactionsCashTransactionListResponse) GetData() []CashTransaction {
	if o == nil {
		return []CashTransaction{}
	}
	return o.Data
}

func (o *ListCashTransactionsCashTransactionListResponse) GetMeta() ListCashTransactionsMeta {
	if o == nil {
		return ListCashTransactionsMeta{}
	}
	return o.Meta
}

type ListCashTransactionsResponse struct {
	// Cash Transactions
	CashTransactionListResponse *ListCashTransactionsCashTransactionListResponse
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListCashTransactionsResponse) GetCashTransactionListResponse() *ListCashTransactionsCashTransactionListResponse {
	if o == nil {
		return nil
	}
	return o.CashTransactionListResponse
}

func (o *ListCashTransactionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListCashTransactionsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListCashTransactionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListCashTransactionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
