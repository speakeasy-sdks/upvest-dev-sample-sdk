// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason - Reason why TIN is missing
// * TIN_NOT_YET_ASSIGNED - Indicates that the tax identification number has not yet been assigned by the tax authorities. A common example is, that a user has moved to a country and thus became taxable, but that the tax authorities have not yet assigned the TIN to this user.
// * COUNTRY_HAS_NO_TIN - Indicates that the specific country does not provide a TIN.
// * OTHER_REASONS - Applies in case of other reasons - i.e. when a user does not have the TIN at hand. Note this may cause additional inquiries by our customer service team.
type SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason string

const (
	SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReasonTinNotYetAssigned SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason = "TIN_NOT_YET_ASSIGNED"
	SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReasonCountryHasNoTin   SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason = "COUNTRY_HAS_NO_TIN"
	SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReasonOtherReasons      SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason = "OTHER_REASONS"
)

func (e SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason) ToPointer() *SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason {
	return &e
}

func (e *SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TIN_NOT_YET_ASSIGNED":
		fallthrough
	case "COUNTRY_HAS_NO_TIN":
		fallthrough
	case "OTHER_REASONS":
		*e = SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason: %v", v)
	}
}

type SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber struct {
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Reason why TIN is missing
	// * TIN_NOT_YET_ASSIGNED - Indicates that the tax identification number has not yet been assigned by the tax authorities. A common example is, that a user has moved to a country and thus became taxable, but that the tax authorities have not yet assigned the TIN to this user.
	// * COUNTRY_HAS_NO_TIN - Indicates that the specific country does not provide a TIN.
	// * OTHER_REASONS - Applies in case of other reasons - i.e. when a user does not have the TIN at hand. Note this may cause additional inquiries by our customer service team.
	MissingTinReason SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason `json:"missing_tin_reason"`
}

func (o *SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber) GetMissingTinReason() SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason {
	if o == nil {
		return SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumberMissingTinReason("")
	}
	return o.MissingTinReason
}

type SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber struct {
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Tax identifier number
	TaxIdentifierNumber string `json:"tax_identifier_number"`
}

func (o *SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber) GetTaxIdentifierNumber() string {
	if o == nil {
		return ""
	}
	return o.TaxIdentifierNumber
}

type SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestType string

const (
	SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestTypeSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber    SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestType = "set_tax_residencies_Tax Residencies - Set - Request_Tax residency for Create Request_With tax identifier number"
	SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestTypeSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestType = "set_tax_residencies_Tax Residencies - Set - Request_Tax residency for Create Request_Without tax identifier number"
)

type SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest struct {
	SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber    *SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber
	SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber *SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber

	Type SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestType
}

func CreateSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber(setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber) SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest {
	typ := SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestTypeSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber

	return SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest{
		SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber: &setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber,
		Type: typ,
	}
}

func CreateSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber(setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber) SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest {
	typ := SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestTypeSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber

	return SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest{
		SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber: &setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber,
		Type: typ,
	}
}

func (u *SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest) UnmarshalJSON(data []byte) error {

	setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber := SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber{}
	if err := utils.UnmarshalJSON(data, &setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber, "", true, true); err == nil {
		u.SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber = &setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber
		u.Type = SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestTypeSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber
		return nil
	}

	setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber := SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber{}
	if err := utils.UnmarshalJSON(data, &setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber, "", true, true); err == nil {
		u.SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber = &setTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber
		u.Type = SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestTypeSetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest) MarshalJSON() ([]byte, error) {
	if u.SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber != nil {
		return utils.MarshalJSON(u.SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithTaxIdentifierNumber, "", true)
	}

	if u.SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber != nil {
		return utils.MarshalJSON(u.SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequestWithoutTaxIdentifierNumber, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SetTaxResidenciesTaxResidenciesSetRequest struct {
	TaxResidencies []SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest `json:"tax_residencies"`
}

func (o *SetTaxResidenciesTaxResidenciesSetRequest) GetTaxResidencies() []SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest {
	if o == nil {
		return []SetTaxResidenciesTaxResidenciesSetRequestTaxResidencyForCreateRequest{}
	}
	return o.TaxResidencies
}

type SetTaxResidenciesRequest struct {
	RequestBody *SetTaxResidenciesTaxResidenciesSetRequest `request:"mediaType=application/json"`
	// A UUID to be used as an idempotency key.  This prevents a duplicate request from being replayed.
	// https://docs.upvest.co/concepts/api_concepts/idempotency
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=idempotency-key"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (s SetTaxResidenciesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SetTaxResidenciesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SetTaxResidenciesRequest) GetRequestBody() *SetTaxResidenciesTaxResidenciesSetRequest {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *SetTaxResidenciesRequest) GetIdempotencyKey() string {
	if o == nil {
		return ""
	}
	return o.IdempotencyKey
}

func (o *SetTaxResidenciesRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *SetTaxResidenciesRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *SetTaxResidenciesRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *SetTaxResidenciesRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *SetTaxResidenciesRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// SetTaxResidenciesTaxResidencyRecordStatus - Tax residency status
// * PENDING - It indicates that the tax residency records are not yet processed by Upvest.
// * ACTIVE - It indicates that tax residency records are processed, and the tax residency record is the one in use.
type SetTaxResidenciesTaxResidencyRecordStatus string

const (
	SetTaxResidenciesTaxResidencyRecordStatusPending SetTaxResidenciesTaxResidencyRecordStatus = "PENDING"
	SetTaxResidenciesTaxResidencyRecordStatusActive  SetTaxResidenciesTaxResidencyRecordStatus = "ACTIVE"
)

func (e SetTaxResidenciesTaxResidencyRecordStatus) ToPointer() *SetTaxResidenciesTaxResidencyRecordStatus {
	return &e
}

func (e *SetTaxResidenciesTaxResidencyRecordStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "ACTIVE":
		*e = SetTaxResidenciesTaxResidencyRecordStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SetTaxResidenciesTaxResidencyRecordStatus: %v", v)
	}
}

// SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason - Reason why TIN is missing
// * TIN_NOT_YET_ASSIGNED - Indicates that the tax identification number has not yet been assigned by the tax authorities. A common example is, that a user has moved to a country and thus became taxable, but that the tax authorities have not yet assigned the TIN to this user.
// * COUNTRY_HAS_NO_TIN - Indicates that the specific country does not provide a TIN.
// * OTHER_REASONS - Applies in case of other reasons - i.e. when a user does not have the TIN at hand. Note this may cause additional inquiries by our customer service team.
type SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason string

const (
	SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReasonTinNotYetAssigned SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason = "TIN_NOT_YET_ASSIGNED"
	SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReasonCountryHasNoTin   SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason = "COUNTRY_HAS_NO_TIN"
	SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReasonOtherReasons      SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason = "OTHER_REASONS"
)

func (e SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason) ToPointer() *SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason {
	return &e
}

func (e *SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TIN_NOT_YET_ASSIGNED":
		fallthrough
	case "COUNTRY_HAS_NO_TIN":
		fallthrough
	case "OTHER_REASONS":
		*e = SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason: %v", v)
	}
}

type SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber struct {
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Reason why TIN is missing
	// * TIN_NOT_YET_ASSIGNED - Indicates that the tax identification number has not yet been assigned by the tax authorities. A common example is, that a user has moved to a country and thus became taxable, but that the tax authorities have not yet assigned the TIN to this user.
	// * COUNTRY_HAS_NO_TIN - Indicates that the specific country does not provide a TIN.
	// * OTHER_REASONS - Applies in case of other reasons - i.e. when a user does not have the TIN at hand. Note this may cause additional inquiries by our customer service team.
	MissingTinReason SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason `json:"missing_tin_reason"`
}

func (o *SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber) GetMissingTinReason() SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason {
	if o == nil {
		return SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumberMissingTinReason("")
	}
	return o.MissingTinReason
}

type SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber struct {
	// Country code. [ISO 3166 alpha-2 Codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	Country string `json:"country"`
	// Tax identifier number
	TaxIdentifierNumber string `json:"tax_identifier_number"`
}

func (o *SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber) GetTaxIdentifierNumber() string {
	if o == nil {
		return ""
	}
	return o.TaxIdentifierNumber
}

type SetTaxResidenciesTaxResidencyRecordTaxResidencyType string

const (
	SetTaxResidenciesTaxResidencyRecordTaxResidencyTypeSetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber    SetTaxResidenciesTaxResidencyRecordTaxResidencyType = "set_tax_residencies_Tax residency Record_Tax residency_With tax identifier number"
	SetTaxResidenciesTaxResidencyRecordTaxResidencyTypeSetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber SetTaxResidenciesTaxResidencyRecordTaxResidencyType = "set_tax_residencies_Tax residency Record_Tax residency_Without tax identifier number"
)

type SetTaxResidenciesTaxResidencyRecordTaxResidency struct {
	SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber    *SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber
	SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber *SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber

	Type SetTaxResidenciesTaxResidencyRecordTaxResidencyType
}

func CreateSetTaxResidenciesTaxResidencyRecordTaxResidencySetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber(setTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber) SetTaxResidenciesTaxResidencyRecordTaxResidency {
	typ := SetTaxResidenciesTaxResidencyRecordTaxResidencyTypeSetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber

	return SetTaxResidenciesTaxResidencyRecordTaxResidency{
		SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber: &setTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber,
		Type: typ,
	}
}

func CreateSetTaxResidenciesTaxResidencyRecordTaxResidencySetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber(setTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber) SetTaxResidenciesTaxResidencyRecordTaxResidency {
	typ := SetTaxResidenciesTaxResidencyRecordTaxResidencyTypeSetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber

	return SetTaxResidenciesTaxResidencyRecordTaxResidency{
		SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber: &setTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber,
		Type: typ,
	}
}

func (u *SetTaxResidenciesTaxResidencyRecordTaxResidency) UnmarshalJSON(data []byte) error {

	setTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber := SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber{}
	if err := utils.UnmarshalJSON(data, &setTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber, "", true, true); err == nil {
		u.SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber = &setTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber
		u.Type = SetTaxResidenciesTaxResidencyRecordTaxResidencyTypeSetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber
		return nil
	}

	setTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber := SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber{}
	if err := utils.UnmarshalJSON(data, &setTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber, "", true, true); err == nil {
		u.SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber = &setTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber
		u.Type = SetTaxResidenciesTaxResidencyRecordTaxResidencyTypeSetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SetTaxResidenciesTaxResidencyRecordTaxResidency) MarshalJSON() ([]byte, error) {
	if u.SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber != nil {
		return utils.MarshalJSON(u.SetTaxResidenciesTaxResidencyRecordTaxResidencyWithTaxIdentifierNumber, "", true)
	}

	if u.SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber != nil {
		return utils.MarshalJSON(u.SetTaxResidenciesTaxResidencyRecordTaxResidencyWithoutTaxIdentifierNumber, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SetTaxResidenciesTaxResidencyRecord - User tax residencies
type SetTaxResidenciesTaxResidencyRecord struct {
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Tax residency status
	// * PENDING - It indicates that the tax residency records are not yet processed by Upvest.
	// * ACTIVE - It indicates that tax residency records are processed, and the tax residency record is the one in use.
	Status         SetTaxResidenciesTaxResidencyRecordStatus         `json:"status"`
	TaxResidencies []SetTaxResidenciesTaxResidencyRecordTaxResidency `json:"tax_residencies"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
}

func (s SetTaxResidenciesTaxResidencyRecord) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SetTaxResidenciesTaxResidencyRecord) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SetTaxResidenciesTaxResidencyRecord) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *SetTaxResidenciesTaxResidencyRecord) GetStatus() SetTaxResidenciesTaxResidencyRecordStatus {
	if o == nil {
		return SetTaxResidenciesTaxResidencyRecordStatus("")
	}
	return o.Status
}

func (o *SetTaxResidenciesTaxResidencyRecord) GetTaxResidencies() []SetTaxResidenciesTaxResidencyRecordTaxResidency {
	if o == nil {
		return []SetTaxResidenciesTaxResidencyRecordTaxResidency{}
	}
	return o.TaxResidencies
}

func (o *SetTaxResidenciesTaxResidencyRecord) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type SetTaxResidenciesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// User tax residencies
	TaxResidencyRecord *SetTaxResidenciesTaxResidencyRecord
}

func (o *SetTaxResidenciesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *SetTaxResidenciesResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *SetTaxResidenciesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *SetTaxResidenciesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *SetTaxResidenciesResponse) GetTaxResidencyRecord() *SetTaxResidenciesTaxResidencyRecord {
	if o == nil {
		return nil
	}
	return o.TaxResidencyRecord
}
