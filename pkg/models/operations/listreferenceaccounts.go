// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListReferenceAccountsQueryParamOrder - Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
type ListReferenceAccountsQueryParamOrder string

const (
	ListReferenceAccountsQueryParamOrderAsc  ListReferenceAccountsQueryParamOrder = "ASC"
	ListReferenceAccountsQueryParamOrderDesc ListReferenceAccountsQueryParamOrder = "DESC"
)

func (e ListReferenceAccountsQueryParamOrder) ToPointer() *ListReferenceAccountsQueryParamOrder {
	return &e
}

func (e *ListReferenceAccountsQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListReferenceAccountsQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReferenceAccountsQueryParamOrder: %v", v)
	}
}

// ListReferenceAccountsQueryParamSort - Field of resource to sort by
type ListReferenceAccountsQueryParamSort string

const (
	ListReferenceAccountsQueryParamSortID        ListReferenceAccountsQueryParamSort = "id"
	ListReferenceAccountsQueryParamSortCreatedAt ListReferenceAccountsQueryParamSort = "created_at"
)

func (e ListReferenceAccountsQueryParamSort) ToPointer() *ListReferenceAccountsQueryParamSort {
	return &e
}

func (e *ListReferenceAccountsQueryParamSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "created_at":
		*e = ListReferenceAccountsQueryParamSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReferenceAccountsQueryParamSort: %v", v)
	}
}

type ListReferenceAccountsRequest struct {
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *ListReferenceAccountsQueryParamOrder `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Field of resource to sort by
	Sort *ListReferenceAccountsQueryParamSort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	UserID         string `pathParam:"style=simple,explode=false,name=user_id"`
}

func (l ListReferenceAccountsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListReferenceAccountsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListReferenceAccountsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListReferenceAccountsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListReferenceAccountsRequest) GetOrder() *ListReferenceAccountsQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListReferenceAccountsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListReferenceAccountsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListReferenceAccountsRequest) GetSort() *ListReferenceAccountsQueryParamSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListReferenceAccountsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListReferenceAccountsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *ListReferenceAccountsRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type ReferenceAccount struct {
	// First and last name of the reference account owner
	AccountOwner string `json:"account_owner"`
	// Business Identifier Code (also known as SWIFT-BIC, BIC, SWIFT ID or SWIFT code) [ISO 9362](https://en.wikipedia.org/wiki/ISO_9362).
	Bic string `json:"bic"`
	// Timestamp of when user validated the reference account
	ConfirmedAt time.Time `json:"confirmed_at"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// International Bank Account Number [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number).
	Iban string `json:"iban"`
	// Reference account unique identifier.
	ID string `json:"id"`
	// Human-readable name of the reference bank account
	Name string `json:"name"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (r ReferenceAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReferenceAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ReferenceAccount) GetAccountOwner() string {
	if o == nil {
		return ""
	}
	return o.AccountOwner
}

func (o *ReferenceAccount) GetBic() string {
	if o == nil {
		return ""
	}
	return o.Bic
}

func (o *ReferenceAccount) GetConfirmedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConfirmedAt
}

func (o *ReferenceAccount) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ReferenceAccount) GetIban() string {
	if o == nil {
		return ""
	}
	return o.Iban
}

func (o *ReferenceAccount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReferenceAccount) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ReferenceAccount) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ReferenceAccount) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListReferenceAccountsOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListReferenceAccountsOrder string

const (
	ListReferenceAccountsOrderAsc  ListReferenceAccountsOrder = "ASC"
	ListReferenceAccountsOrderDesc ListReferenceAccountsOrder = "DESC"
)

func (e ListReferenceAccountsOrder) ToPointer() *ListReferenceAccountsOrder {
	return &e
}

func (e *ListReferenceAccountsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListReferenceAccountsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReferenceAccountsOrder: %v", v)
	}
}

type ListReferenceAccountsMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListReferenceAccountsOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListReferenceAccountsMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListReferenceAccountsMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListReferenceAccountsMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListReferenceAccountsMeta) GetOrder() *ListReferenceAccountsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListReferenceAccountsMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListReferenceAccountsMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListReferenceAccountsUsersListResponse - OK
type ListReferenceAccountsUsersListResponse struct {
	Data []ReferenceAccount        `json:"data"`
	Meta ListReferenceAccountsMeta `json:"meta"`
}

func (o *ListReferenceAccountsUsersListResponse) GetData() []ReferenceAccount {
	if o == nil {
		return []ReferenceAccount{}
	}
	return o.Data
}

func (o *ListReferenceAccountsUsersListResponse) GetMeta() ListReferenceAccountsMeta {
	if o == nil {
		return ListReferenceAccountsMeta{}
	}
	return o.Meta
}

type ListReferenceAccountsResponse struct {
	// OK
	TwoHundredApplicationJSONUsersListResponse *ListReferenceAccountsUsersListResponse
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListReferenceAccountsResponse) GetTwoHundredApplicationJSONUsersListResponse() *ListReferenceAccountsUsersListResponse {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONUsersListResponse
}

func (o *ListReferenceAccountsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListReferenceAccountsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *ListReferenceAccountsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListReferenceAccountsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
