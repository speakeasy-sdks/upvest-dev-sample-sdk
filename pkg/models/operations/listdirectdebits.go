// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListDirectDebitsOrder - Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
type ListDirectDebitsOrder string

const (
	ListDirectDebitsOrderAsc  ListDirectDebitsOrder = "ASC"
	ListDirectDebitsOrderDesc ListDirectDebitsOrder = "DESC"
)

func (e ListDirectDebitsOrder) ToPointer() *ListDirectDebitsOrder {
	return &e
}

func (e *ListDirectDebitsOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListDirectDebitsOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDirectDebitsOrder: %v", v)
	}
}

// ListDirectDebitsSort - Field of resource to sort by
type ListDirectDebitsSort string

const (
	ListDirectDebitsSortID        ListDirectDebitsSort = "id"
	ListDirectDebitsSortCreatedAt ListDirectDebitsSort = "created_at"
)

func (e ListDirectDebitsSort) ToPointer() *ListDirectDebitsSort {
	return &e
}

func (e *ListDirectDebitsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "created_at":
		*e = ListDirectDebitsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDirectDebitsSort: %v", v)
	}
}

type ListDirectDebitsRequest struct {
	AccountGroupID string `pathParam:"style=simple,explode=false,name=account_group_id"`
	// Use the `limit` argument to specify the maximum number of items returned.
	Limit *int `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// Use the `offset` argument to specify where in the list of results to start when returning items for a particular query.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort order of the result list if the `sort` parameter is specified. Use `ASC` for ascending or `DESC` for descending sort order.
	Order *ListDirectDebitsOrder `default:"ASC" queryParam:"style=form,explode=true,name=order"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Field of resource to sort by
	Sort *ListDirectDebitsSort `default:"created_at" queryParam:"style=form,explode=true,name=sort"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
}

func (l ListDirectDebitsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListDirectDebitsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListDirectDebitsRequest) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *ListDirectDebitsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListDirectDebitsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListDirectDebitsRequest) GetOrder() *ListDirectDebitsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListDirectDebitsRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ListDirectDebitsRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *ListDirectDebitsRequest) GetSort() *ListDirectDebitsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListDirectDebitsRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *ListDirectDebitsRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

// ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency string

const (
	ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrencyEur ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency = "EUR"
)

func (e ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency) ToPointer() *ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency {
	return &e
}

func (e *ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency: %v", v)
	}
}

// ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus - Status of the direct debit
// * NEW - Direct debit is created but not started processing.
// * PROCESSING - Direct debit is in processing.
// * CONFIRMED - Direct debit was successfully processed.
// * CANCELLED - Direct debit was cancelled.
type ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus string

const (
	ListDirectDebitsPaymentsDirectDebitsListResponseDataStatusNew        ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus = "NEW"
	ListDirectDebitsPaymentsDirectDebitsListResponseDataStatusProcessing ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus = "PROCESSING"
	ListDirectDebitsPaymentsDirectDebitsListResponseDataStatusConfirmed  ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus = "CONFIRMED"
	ListDirectDebitsPaymentsDirectDebitsListResponseDataStatusCancelled  ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus = "CANCELLED"
)

func (e ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus) ToPointer() *ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus {
	return &e
}

func (e *ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "CANCELLED":
		*e = ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus: %v", v)
	}
}

type ListDirectDebitsPaymentsDirectDebitsListResponseData struct {
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	CashAmount     string `json:"cash_amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency `default:"EUR" json:"currency"`
	// Direct debit funding request unique identifier
	ID string `json:"id"`
	// Direct Debit Mandate unique identifier.
	MandateID string `json:"mandate_id"`
	// Payment reference the end user will see in their bank statement for the corresponding direct debit booking (“Verwendungszweck”)
	RemittanceInformation *string `json:"remittance_information,omitempty"`
	// Status of the direct debit
	// * NEW - Direct debit is created but not started processing.
	// * PROCESSING - Direct debit is in processing.
	// * CONFIRMED - Direct debit was successfully processed.
	// * CANCELLED - Direct debit was cancelled.
	Status *ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus `json:"status,omitempty"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (l ListDirectDebitsPaymentsDirectDebitsListResponseData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListDirectDebitsPaymentsDirectDebitsListResponseData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseData) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseData) GetCashAmount() string {
	if o == nil {
		return ""
	}
	return o.CashAmount
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseData) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseData) GetCurrency() *ListDirectDebitsPaymentsDirectDebitsListResponseDataCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseData) GetMandateID() string {
	if o == nil {
		return ""
	}
	return o.MandateID
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseData) GetRemittanceInformation() *string {
	if o == nil {
		return nil
	}
	return o.RemittanceInformation
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseData) GetStatus() *ListDirectDebitsPaymentsDirectDebitsListResponseDataStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseData) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder - The ordering of the response.
// * ASC - Ascending order
// * DESC - Descending order
type ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder string

const (
	ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrderAsc  ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder = "ASC"
	ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrderDesc ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder = "DESC"
)

func (e ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder) ToPointer() *ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder {
	return &e
}

func (e *ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder: %v", v)
	}
}

type ListDirectDebitsPaymentsDirectDebitsListResponseMeta struct {
	// Count of the resources returned in the response.
	Count int64 `json:"count"`
	// Total limit of the response.
	Limit int64 `json:"limit"`
	// Amount of resource to offset in the response.
	Offset int64 `json:"offset"`
	// The ordering of the response.
	// * ASC - Ascending order
	// * DESC - Descending order
	Order *ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder `json:"order,omitempty"`
	// The field that the list is sorted by.
	Sort *string `json:"sort,omitempty"`
	// Total count of all the resources.
	TotalCount int64 `json:"total_count"`
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseMeta) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseMeta) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseMeta) GetOrder() *ListDirectDebitsPaymentsDirectDebitsListResponseMetaOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseMeta) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponseMeta) GetTotalCount() int64 {
	if o == nil {
		return 0
	}
	return o.TotalCount
}

// ListDirectDebitsPaymentsDirectDebitsListResponse - Direct debits list
type ListDirectDebitsPaymentsDirectDebitsListResponse struct {
	Data []ListDirectDebitsPaymentsDirectDebitsListResponseData `json:"data"`
	Meta ListDirectDebitsPaymentsDirectDebitsListResponseMeta   `json:"meta"`
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponse) GetData() []ListDirectDebitsPaymentsDirectDebitsListResponseData {
	if o == nil {
		return []ListDirectDebitsPaymentsDirectDebitsListResponseData{}
	}
	return o.Data
}

func (o *ListDirectDebitsPaymentsDirectDebitsListResponse) GetMeta() ListDirectDebitsPaymentsDirectDebitsListResponseMeta {
	if o == nil {
		return ListDirectDebitsPaymentsDirectDebitsListResponseMeta{}
	}
	return o.Meta
}

type ListDirectDebitsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// Direct debits list
	PaymentsDirectDebitsListResponse *ListDirectDebitsPaymentsDirectDebitsListResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListDirectDebitsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListDirectDebitsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListDirectDebitsResponse) GetPaymentsDirectDebitsListResponse() *ListDirectDebitsPaymentsDirectDebitsListResponse {
	if o == nil {
		return nil
	}
	return o.PaymentsDirectDebitsListResponse
}

func (o *ListDirectDebitsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListDirectDebitsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
