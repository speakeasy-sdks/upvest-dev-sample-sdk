// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/upvest-dev-sample-sdk/pkg/utils"
	"net/http"
	"time"
)

type RetrieveCashWithdrawalRequest struct {
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-http-header
	Signature string `header:"style=simple,explode=false,name=signature"`
	// https://tools.ietf.org/id/draft-ietf-httpbis-message-signatures-01.html#name-the-signature-input-http-he
	SignatureInput string `header:"style=simple,explode=false,name=signature-input"`
	// Upvest API version (Note: Do not include quotation marks)
	UpvestAPIVersion *shared.APIVersion `default:"1" header:"style=simple,explode=false,name=upvest-api-version"`
	// Tenant Client ID
	UpvestClientID string `header:"style=simple,explode=false,name=upvest-client-id"`
	WithdrawalID   string `pathParam:"style=simple,explode=false,name=withdrawal_id"`
}

func (r RetrieveCashWithdrawalRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveCashWithdrawalRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveCashWithdrawalRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *RetrieveCashWithdrawalRequest) GetSignatureInput() string {
	if o == nil {
		return ""
	}
	return o.SignatureInput
}

func (o *RetrieveCashWithdrawalRequest) GetUpvestAPIVersion() *shared.APIVersion {
	if o == nil {
		return nil
	}
	return o.UpvestAPIVersion
}

func (o *RetrieveCashWithdrawalRequest) GetUpvestClientID() string {
	if o == nil {
		return ""
	}
	return o.UpvestClientID
}

func (o *RetrieveCashWithdrawalRequest) GetWithdrawalID() string {
	if o == nil {
		return ""
	}
	return o.WithdrawalID
}

// RetrieveCashWithdrawalCurrency - Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
// * EUR - Euro
type RetrieveCashWithdrawalCurrency string

const (
	RetrieveCashWithdrawalCurrencyEur RetrieveCashWithdrawalCurrency = "EUR"
)

func (e RetrieveCashWithdrawalCurrency) ToPointer() *RetrieveCashWithdrawalCurrency {
	return &e
}

func (e *RetrieveCashWithdrawalCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = RetrieveCashWithdrawalCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveCashWithdrawalCurrency: %v", v)
	}
}

// RetrieveCashWithdrawalStatus - Status of the withdrawal
// * NEW - Withdrawal is created but not started processing.
// * PROCESSING - Withdrawal is in processing.
// * CONFIRMED - Withdrawal was successfully processed.
// * CANCELLED - Withdrawal was cancelled.
type RetrieveCashWithdrawalStatus string

const (
	RetrieveCashWithdrawalStatusNew        RetrieveCashWithdrawalStatus = "NEW"
	RetrieveCashWithdrawalStatusProcessing RetrieveCashWithdrawalStatus = "PROCESSING"
	RetrieveCashWithdrawalStatusConfirmed  RetrieveCashWithdrawalStatus = "CONFIRMED"
	RetrieveCashWithdrawalStatusCancelled  RetrieveCashWithdrawalStatus = "CANCELLED"
)

func (e RetrieveCashWithdrawalStatus) ToPointer() *RetrieveCashWithdrawalStatus {
	return &e
}

func (e *RetrieveCashWithdrawalStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "CANCELLED":
		*e = RetrieveCashWithdrawalStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveCashWithdrawalStatus: %v", v)
	}
}

// RetrieveCashWithdrawalPaymentsWithdrawal - Withdrawal
type RetrieveCashWithdrawalPaymentsWithdrawal struct {
	// Account group unique identifier.
	AccountGroupID string `json:"account_group_id"`
	Amount         string `json:"amount"`
	// Date and time when the resource was created. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	CreatedAt time.Time `json:"created_at"`
	// Alphabetic three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
	// * EUR - Euro
	Currency *RetrieveCashWithdrawalCurrency `default:"EUR" json:"currency"`
	// Cash withdrawal unique identifier
	ID string `json:"id"`
	// Reference account unique identifier.
	ReferenceAccountID string `json:"reference_account_id"`
	// Payment reference the end user will see in their bank statement for the corresponding credit transfer booking (“Verwendungszweck”)
	RemittanceInformation string `json:"remittance_information"`
	// Status of the withdrawal
	// * NEW - Withdrawal is created but not started processing.
	// * PROCESSING - Withdrawal is in processing.
	// * CONFIRMED - Withdrawal was successfully processed.
	// * CANCELLED - Withdrawal was cancelled.
	Status *RetrieveCashWithdrawalStatus `json:"status,omitempty"`
	// Date and time when the resource was last updated. [RFC 3339-5](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6), [ISO8601 UTC](https://www.iso.org/iso-8601-date-and-time-format.html)
	UpdatedAt time.Time `json:"updated_at"`
	// User unique identifier.
	UserID string `json:"user_id"`
}

func (r RetrieveCashWithdrawalPaymentsWithdrawal) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveCashWithdrawalPaymentsWithdrawal) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetAccountGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccountGroupID
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetCurrency() *RetrieveCashWithdrawalCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetReferenceAccountID() string {
	if o == nil {
		return ""
	}
	return o.ReferenceAccountID
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetRemittanceInformation() string {
	if o == nil {
		return ""
	}
	return o.RemittanceInformation
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetStatus() *RetrieveCashWithdrawalStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *RetrieveCashWithdrawalPaymentsWithdrawal) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type RetrieveCashWithdrawalResponse struct {
	// Withdrawal
	TwoHundredApplicationJSONPaymentsWithdrawal *RetrieveCashWithdrawalPaymentsWithdrawal
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *RetrieveCashWithdrawalResponse) GetTwoHundredApplicationJSONPaymentsWithdrawal() *RetrieveCashWithdrawalPaymentsWithdrawal {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONPaymentsWithdrawal
}

func (o *RetrieveCashWithdrawalResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RetrieveCashWithdrawalResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *RetrieveCashWithdrawalResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RetrieveCashWithdrawalResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
